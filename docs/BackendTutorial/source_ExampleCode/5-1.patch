diff -Naur Chapter4_2/MCTargetDesc/CMakeLists.txt Chapter5_1/MCTargetDesc/CMakeLists.txt
--- Chapter4_2/MCTargetDesc/CMakeLists.txt	2013-12-27 15:52:01.032977142 +0800
+++ Chapter5_1/MCTargetDesc/CMakeLists.txt	2013-12-27 15:52:01.070977141 +0800
@@ -1,7 +1,10 @@
 # MCTargetDesc/CMakeLists.txt
 add_llvm_library(LLVMCpu0Desc
+  Cpu0AsmBackend.cpp
   Cpu0MCAsmInfo.cpp
+  Cpu0MCCodeEmitter.cpp
   Cpu0MCTargetDesc.cpp
+  Cpu0ELFObjectWriter.cpp
   )
 
 add_dependencies(LLVMCpu0Desc Cpu0CommonTableGen)
diff -Naur Chapter4_2/MCTargetDesc/Cpu0AsmBackend.cpp Chapter5_1/MCTargetDesc/Cpu0AsmBackend.cpp
--- Chapter4_2/MCTargetDesc/Cpu0AsmBackend.cpp	1970-01-01 08:00:00.000000000 +0800
+++ Chapter5_1/MCTargetDesc/Cpu0AsmBackend.cpp	2013-12-27 15:52:01.070977141 +0800
@@ -0,0 +1,212 @@
+//===-- Cpu0ASMBackend.cpp - Cpu0 Asm Backend  ----------------------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file implements the Cpu0AsmBackend and Cpu0ELFObjectWriter classes.
+//
+//===----------------------------------------------------------------------===//
+//
+
+#include "Cpu0FixupKinds.h"
+#include "MCTargetDesc/Cpu0MCTargetDesc.h"
+#include "llvm/MC/MCAsmBackend.h"
+#include "llvm/MC/MCAssembler.h"
+#include "llvm/MC/MCDirectives.h"
+#include "llvm/MC/MCELFObjectWriter.h"
+#include "llvm/MC/MCFixupKindInfo.h"
+#include "llvm/MC/MCObjectWriter.h"
+#include "llvm/MC/MCSubtargetInfo.h"
+#include "llvm/Support/ErrorHandling.h"
+#include "llvm/Support/raw_ostream.h"
+
+using namespace llvm;
+
+// Prepare value for the target space for it
+static unsigned adjustFixupValue(unsigned Kind, uint64_t Value) {
+
+  // Add/subtract and shift
+  switch (Kind) {
+  default:
+    return 0;
+  case FK_GPRel_4:
+  case FK_Data_4:
+  case Cpu0::fixup_Cpu0_LO16:
+    break;
+  case Cpu0::fixup_Cpu0_PC24:
+    // So far we are only using this type for branches and jump.
+    // For branches we start 1 instruction after the branch
+    // so the displacement will be one instruction size less.
+    Value -= 4;
+    break;
+  case Cpu0::fixup_Cpu0_24:
+    // So far we are only using this type for instruction SWI.
+    break;
+  case Cpu0::fixup_Cpu0_HI16:
+  case Cpu0::fixup_Cpu0_GOT_Local:
+    // Get the higher 16-bits. Also add 1 if bit 15 is 1.
+    Value = ((Value + 0x8000) >> 16) & 0xffff;
+    break;
+  }
+
+  return Value;
+}
+
+namespace {
+class Cpu0AsmBackend : public MCAsmBackend {
+  Triple::OSType OSType;
+  bool IsLittle; // Big or little endian
+
+public:
+  Cpu0AsmBackend(const Target &T,  Triple::OSType _OSType,
+                 bool _isLittle)
+    :MCAsmBackend(), OSType(_OSType), IsLittle(_isLittle) {}
+
+  MCObjectWriter *createObjectWriter(raw_ostream &OS) const {
+  // Change Reason:
+  // Reduce the exposure of Triple::OSType in the ELF object writer. This will
+  //  avoid including ADT/Triple.h in many places when the target specific bits 
+  //  are moved.
+    return createCpu0ELFObjectWriter(OS,
+      MCELFObjectTargetWriter::getOSABI(OSType), IsLittle);
+  }
+
+  /// ApplyFixup - Apply the \arg Value for given \arg Fixup into the provided
+  /// data fragment, at the offset specified by the fixup and following the
+  /// fixup kind as appropriate.
+  void applyFixup(const MCFixup &Fixup, char *Data, unsigned DataSize,
+                  uint64_t Value) const {
+    MCFixupKind Kind = Fixup.getKind();
+    Value = adjustFixupValue((unsigned)Kind, Value);
+
+    if (!Value)
+      return; // Doesn't change encoding.
+
+    // Where do we start in the object
+    unsigned Offset = Fixup.getOffset();
+    // Number of bytes we need to fixup
+    unsigned NumBytes = (getFixupKindInfo(Kind).TargetSize + 7) / 8;
+    // Used to point to big endian bytes
+    unsigned FullSize;
+
+    switch ((unsigned)Kind) {
+    case Cpu0::fixup_Cpu0_24:
+      FullSize = 3;
+      break;
+    default:
+      FullSize = 4;
+      break;
+    }
+
+    // Grab current value, if any, from bits.
+    uint64_t CurVal = 0;
+
+    for (unsigned i = 0; i != NumBytes; ++i) {
+      unsigned Idx = IsLittle ? i : (FullSize - 1 - i);
+      CurVal |= (uint64_t)((uint8_t)Data[Offset + Idx]) << (i*8);
+    }
+
+    uint64_t Mask = ((uint64_t)(-1) >> (64 - getFixupKindInfo(Kind).TargetSize));
+    CurVal |= Value & Mask;
+
+    // Write out the fixed up bytes back to the code/data bits.
+    for (unsigned i = 0; i != NumBytes; ++i) {
+      unsigned Idx = IsLittle ? i : (FullSize - 1 - i);
+      Data[Offset + Idx] = (uint8_t)((CurVal >> (i*8)) & 0xff);
+    }
+  }
+
+  unsigned getNumFixupKinds() const { return Cpu0::NumTargetFixupKinds; }
+
+  const MCFixupKindInfo &getFixupKindInfo(MCFixupKind Kind) const {
+    const static MCFixupKindInfo Infos[Cpu0::NumTargetFixupKinds] = {
+      // This table *must* be in same the order of fixup_* kinds in
+      // Cpu0FixupKinds.h.
+      //
+      // name                        offset  bits  flags
+      { "fixup_Cpu0_24",             0,     24,   0 },
+      { "fixup_Cpu0_32",             0,     32,   0 },
+      { "fixup_Cpu0_HI16",           0,     16,   0 },
+      { "fixup_Cpu0_LO16",           0,     16,   0 },
+      { "fixup_Cpu0_GPREL16",        0,     16,   0 },
+      { "fixup_Cpu0_GOT_Global",     0,     16,   0 },
+      { "fixup_Cpu0_GOT_Local",      0,     16,   0 },
+      { "fixup_Cpu0_PC24",           0,     24,  MCFixupKindInfo::FKF_IsPCRel },
+      { "fixup_Cpu0_GOT_HI16",       0,     16,   0 },
+      { "fixup_Cpu0_GOT_LO16",       0,     16,   0 }
+    };
+
+    if (Kind < FirstTargetFixupKind)
+      return MCAsmBackend::getFixupKindInfo(Kind);
+
+    assert(unsigned(Kind - FirstTargetFixupKind) < getNumFixupKinds() &&
+           "Invalid kind!");
+    return Infos[Kind - FirstTargetFixupKind];
+  }
+
+  /// @name Target Relaxation Interfaces
+  /// @{
+
+  /// MayNeedRelaxation - Check whether the given instruction may need
+  /// relaxation.
+  ///
+  /// \param Inst - The instruction to test.
+  bool mayNeedRelaxation(const MCInst &Inst) const {
+    return false;
+  }
+
+  /// fixupNeedsRelaxation - Target specific predicate for whether a given
+  /// fixup requires the associated instruction to be relaxed.
+  bool fixupNeedsRelaxation(const MCFixup &Fixup,
+                            uint64_t Value,
+                            const MCRelaxableFragment *DF,
+                            const MCAsmLayout &Layout) const {
+    // FIXME.
+    assert(0 && "RelaxInstruction() unimplemented");
+    return false;
+  }
+
+  /// RelaxInstruction - Relax the instruction in the given fragment
+  /// to the next wider instruction.
+  ///
+  /// \param Inst - The instruction to relax, which may be the same
+  /// as the output.
+  /// \parm Res [output] - On return, the relaxed instruction.
+  void relaxInstruction(const MCInst &Inst, MCInst &Res) const {
+  }
+
+  /// @}
+
+  /// WriteNopData - Write an (optimal) nop sequence of Count bytes
+  /// to the given output. If the target cannot generate such a sequence,
+  /// it should return an error.
+  ///
+  /// \return - True on success.
+  bool writeNopData(uint64_t Count, MCObjectWriter *OW) const {
+    return true;
+  }
+}; // class Cpu0AsmBackend
+
+} // namespace
+
+// MCAsmBackend
+MCAsmBackend *llvm::createCpu0AsmBackendEL32(const Target &T,
+                                             const MCRegisterInfo &MRI,
+                                             StringRef TT,
+                                             StringRef CPU) {
+  return new Cpu0AsmBackend(T, Triple(TT).getOS(),
+                            /*IsLittle*/true);
+}
+
+MCAsmBackend *llvm::createCpu0AsmBackendEB32(const Target &T,
+                                             const MCRegisterInfo &MRI,
+                                             StringRef TT,
+                                             StringRef CPU) {
+  return new Cpu0AsmBackend(T, Triple(TT).getOS(),
+                            /*IsLittle*/false);
+}
+
diff -Naur Chapter4_2/MCTargetDesc/Cpu0BaseInfo.h Chapter5_1/MCTargetDesc/Cpu0BaseInfo.h
--- Chapter4_2/MCTargetDesc/Cpu0BaseInfo.h	2013-12-27 15:52:01.047977142 +0800
+++ Chapter5_1/MCTargetDesc/Cpu0BaseInfo.h	2013-12-27 15:52:01.070977141 +0800
@@ -14,6 +14,7 @@
 #ifndef CPU0BASEINFO_H
 #define CPU0BASEINFO_H
 
+#include "Cpu0FixupKinds.h"
 #include "Cpu0MCTargetDesc.h"
 #include "llvm/MC/MCExpr.h"
 #include "llvm/Support/DataTypes.h"
@@ -26,6 +27,61 @@
 ///
 namespace Cpu0II {
   /// Target Operand Flag enum.
+  enum TOF {
+    //===------------------------------------------------------------------===//
+    // Cpu0 Specific MachineOperand flags.
+
+    MO_NO_FLAG,
+
+    /// MO_GOT16 - Represents the offset into the global offset table at which
+    /// the address the relocation entry symbol resides during execution.
+    MO_GOT16,
+    MO_GOT,
+
+    /// MO_GOT_CALL - Represents the offset into the global offset table at
+    /// which the address of a call site relocation entry symbol resides
+    /// during execution. This is different from the above since this flag
+    /// can only be present in call instructions.
+    MO_GOT_CALL,
+
+    /// MO_GPREL - Represents the offset from the current gp value to be used
+    /// for the relocatable object file being produced.
+    MO_GPREL,
+
+    /// MO_ABS_HI/LO - Represents the hi or low part of an absolute symbol
+    /// address.
+    MO_ABS_HI,
+    MO_ABS_LO,
+
+    /// MO_TLSGD - Represents the offset into the global offset table at which
+    // the module ID and TSL block offset reside during execution (General
+    // Dynamic TLS).
+    MO_TLSGD,
+
+    /// MO_TLSLDM - Represents the offset into the global offset table at which
+    // the module ID and TSL block offset reside during execution (Local
+    // Dynamic TLS).
+    MO_TLSLDM,
+    MO_DTPREL_HI,
+    MO_DTPREL_LO,
+
+    /// MO_GOTTPREL - Represents the offset from the thread pointer (Initial
+    // Exec TLS).
+    MO_GOTTPREL,
+
+    /// MO_TPREL_HI/LO - Represents the hi and low part of the offset from
+    // the thread pointer (Local Exec TLS).
+    MO_TPREL_HI,
+    MO_TPREL_LO,
+
+    // N32/64 Flags.
+    MO_GPOFF_HI,
+    MO_GPOFF_LO,
+    MO_GOT_DISP,
+    MO_GOT_PAGE,
+    MO_GOT_OFST
+  }; // enum TOF {
+
   enum {
     //===------------------------------------------------------------------===//
     // Instruction encodings.  These are the standard/most common forms for
@@ -97,6 +153,33 @@
   }
 }
 
+inline static std::pair<const MCSymbolRefExpr*, int64_t>
+Cpu0GetSymAndOffset(const MCFixup &Fixup) {
+  MCFixupKind FixupKind = Fixup.getKind();
+
+  if ((FixupKind < FirstTargetFixupKind) ||
+      (FixupKind >= MCFixupKind(Cpu0::LastTargetFixupKind)))
+    return std::make_pair((const MCSymbolRefExpr*)0, (int64_t)0);
+
+  const MCExpr *Expr = Fixup.getValue();
+  MCExpr::ExprKind Kind = Expr->getKind();
+
+  if (Kind == MCExpr::Binary) {
+    const MCBinaryExpr *BE = static_cast<const MCBinaryExpr*>(Expr);
+    const MCExpr *LHS = BE->getLHS();
+    const MCConstantExpr *CE = dyn_cast<MCConstantExpr>(BE->getRHS());
+
+    if ((LHS->getKind() != MCExpr::SymbolRef) || !CE)
+      return std::make_pair((const MCSymbolRefExpr*)0, (int64_t)0);
+
+    return std::make_pair(cast<MCSymbolRefExpr>(LHS), CE->getValue());
+  }
+
+  if (Kind != MCExpr::SymbolRef)
+    return std::make_pair((const MCSymbolRefExpr*)0, (int64_t)0);
+
+  return std::make_pair(cast<MCSymbolRefExpr>(Expr), 0);
+} // Cpu0GetSymAndOffset
 }
 
 #endif
diff -Naur Chapter4_2/MCTargetDesc/Cpu0ELFObjectWriter.cpp Chapter5_1/MCTargetDesc/Cpu0ELFObjectWriter.cpp
--- Chapter4_2/MCTargetDesc/Cpu0ELFObjectWriter.cpp	1970-01-01 08:00:00.000000000 +0800
+++ Chapter5_1/MCTargetDesc/Cpu0ELFObjectWriter.cpp	2013-12-27 15:52:01.070977141 +0800
@@ -0,0 +1,226 @@
+//===-- Cpu0ELFObjectWriter.cpp - Cpu0 ELF Writer -------------------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+
+#include "MCTargetDesc/Cpu0BaseInfo.h"
+#include "MCTargetDesc/Cpu0FixupKinds.h"
+#include "MCTargetDesc/Cpu0MCTargetDesc.h"
+#include "llvm/MC/MCAssembler.h"
+#include "llvm/MC/MCELFObjectWriter.h"
+#include "llvm/MC/MCExpr.h"
+#include "llvm/MC/MCSection.h"
+#include "llvm/MC/MCValue.h"
+#include "llvm/Support/ErrorHandling.h"
+#include <list>
+
+using namespace llvm;
+
+namespace {
+  struct RelEntry {
+    RelEntry(const ELFRelocationEntry &R, const MCSymbol *S, int64_t O) :
+      Reloc(R), Sym(S), Offset(O) {}
+    ELFRelocationEntry Reloc;
+    const MCSymbol *Sym;
+    int64_t Offset;
+  };
+
+  typedef std::list<RelEntry> RelLs;
+  typedef RelLs::iterator RelLsIter;
+
+  class Cpu0ELFObjectWriter : public MCELFObjectTargetWriter {
+  public:
+    Cpu0ELFObjectWriter(uint8_t OSABI);
+
+    virtual ~Cpu0ELFObjectWriter();
+
+    virtual unsigned GetRelocType(const MCValue &Target, const MCFixup &Fixup,
+                                  bool IsPCRel, bool IsRelocWithSymbol,
+                                  int64_t Addend) const;
+    virtual unsigned getEFlags() const;
+    virtual const MCSymbol *ExplicitRelSym(const MCAssembler &Asm,
+                                           const MCValue &Target,
+                                           const MCFragment &F,
+                                           const MCFixup &Fixup,
+                                           bool IsPCRel) const;
+    virtual void sortRelocs(const MCAssembler &Asm,
+                            std::vector<ELFRelocationEntry> &Relocs);
+  };
+}
+
+Cpu0ELFObjectWriter::Cpu0ELFObjectWriter(uint8_t OSABI)
+  : MCELFObjectTargetWriter(/*_is64Bit=false*/ false, OSABI, ELF::EM_CPU0,
+                            /*HasRelocationAddend*/ false) {}
+
+Cpu0ELFObjectWriter::~Cpu0ELFObjectWriter() {}
+
+// FIXME: get the real EABI Version from the Subtarget class.
+unsigned Cpu0ELFObjectWriter::getEFlags() const {
+
+  // FIXME: We can't tell if we are PIC (dynamic) or CPIC (static)
+  unsigned Flag = ELF::EF_CPU0_NOREORDER;
+
+  Flag |= ELF::EF_CPU0_ARCH_32R2;
+  return Flag;
+}
+
+const MCSymbol *Cpu0ELFObjectWriter::ExplicitRelSym(const MCAssembler &Asm,
+                                                    const MCValue &Target,
+                                                    const MCFragment &F,
+                                                    const MCFixup &Fixup,
+                                                    bool IsPCRel) const {
+  assert(Target.getSymA() && "SymA cannot be 0.");
+  const MCSymbol &Sym = Target.getSymA()->getSymbol().AliasedSymbol();
+
+  if (Sym.getSection().getKind().isMergeableCString() ||
+      Sym.getSection().getKind().isMergeableConst())
+    return &Sym;
+
+  return NULL;
+}
+
+unsigned Cpu0ELFObjectWriter::GetRelocType(const MCValue &Target,
+                                           const MCFixup &Fixup,
+                                           bool IsPCRel,
+                                           bool IsRelocWithSymbol,
+                                           int64_t Addend) const {
+  // determine the type of the relocation
+  unsigned Type = (unsigned)ELF::R_CPU0_NONE;
+  unsigned Kind = (unsigned)Fixup.getKind();
+
+  switch (Kind) {
+  default:
+    llvm_unreachable("invalid fixup kind!");
+  case FK_Data_4:
+    Type = ELF::R_CPU0_32;
+    break;
+  case Cpu0::fixup_Cpu0_24:
+    Type = ELF::R_CPU0_24;
+    break;
+  case Cpu0::fixup_Cpu0_32:
+    Type = ELF::R_CPU0_32;
+    break;
+  case Cpu0::fixup_Cpu0_HI16:
+    Type = ELF::R_CPU0_HI16;
+    break;
+  case Cpu0::fixup_Cpu0_LO16:
+    Type = ELF::R_CPU0_LO16;
+    break;
+  case Cpu0::fixup_Cpu0_GPREL16:
+    Type = ELF::R_CPU0_GPREL16;
+    break;
+  case Cpu0::fixup_Cpu0_GOT_Global:
+  case Cpu0::fixup_Cpu0_GOT_Local:
+    Type = ELF::R_CPU0_GOT16;
+    break;
+  case Cpu0::fixup_Cpu0_PC24:
+    Type = ELF::R_CPU0_PC24;
+    break;
+  case Cpu0::fixup_Cpu0_GOT_HI16:
+    Type = ELF::R_CPU0_GOT_HI16;
+    break;
+  case Cpu0::fixup_Cpu0_GOT_LO16:
+    Type = ELF::R_CPU0_GOT_LO16;
+    break;
+  }
+
+  return Type;
+}
+
+// Return true if R is either a GOT16 against a local symbol or HI16.
+static bool NeedsMatchingLo(const MCAssembler &Asm, const RelEntry &R) {
+  if (!R.Sym)
+    return false;
+
+  MCSymbolData &SD = Asm.getSymbolData(R.Sym->AliasedSymbol());
+
+  return ((R.Reloc.Type == ELF::R_CPU0_GOT16) && !SD.isExternal()) ||
+    (R.Reloc.Type == ELF::R_CPU0_HI16);
+}
+
+static bool HasMatchingLo(const MCAssembler &Asm, RelLsIter I, RelLsIter Last) {
+  if (I == Last)
+    return false;
+
+  RelLsIter Hi = I++;
+
+  return (I->Reloc.Type == ELF::R_CPU0_LO16) && (Hi->Sym == I->Sym) &&
+    (Hi->Offset == I->Offset);
+}
+
+static bool HasSameSymbol(const RelEntry &R0, const RelEntry &R1) {
+  return R0.Sym == R1.Sym;
+}
+
+static int CompareOffset(const RelEntry &R0, const RelEntry &R1) {
+  return (R0.Offset > R1.Offset) ? 1 : ((R0.Offset == R1.Offset) ? 0 : -1);
+}
+
+void Cpu0ELFObjectWriter::sortRelocs(const MCAssembler &Asm,
+                                     std::vector<ELFRelocationEntry> &Relocs) {
+  // Call the defualt function first. Relocations are sorted in descending
+  // order of r_offset.
+  MCELFObjectTargetWriter::sortRelocs(Asm, Relocs);
+  
+  RelLs RelocLs;
+  std::vector<RelLsIter> Unmatched;
+
+  // Fill RelocLs. Traverse Relocs backwards so that relocations in RelocLs
+  // are in ascending order of r_offset.
+  for (std::vector<ELFRelocationEntry>::reverse_iterator R = Relocs.rbegin();
+       R != Relocs.rend(); ++R) {
+     std::pair<const MCSymbolRefExpr*, int64_t> P =
+       Cpu0GetSymAndOffset(*R->Fixup);
+     RelocLs.push_back(RelEntry(*R, P.first ? &P.first->getSymbol() : 0,
+                                P.second));
+  }
+
+  // Get list of unmatched HI16 and GOT16.
+  for (RelLsIter R = RelocLs.begin(); R != RelocLs.end(); ++R)
+    if (NeedsMatchingLo(Asm, *R) && !HasMatchingLo(Asm, R, --RelocLs.end()))
+      Unmatched.push_back(R);
+
+  // Insert unmatched HI16 and GOT16 immediately before their matching LO16.
+  for (std::vector<RelLsIter>::iterator U = Unmatched.begin();
+       U != Unmatched.end(); ++U) {
+    RelLsIter LoPos = RelocLs.end(), HiPos = *U;
+    bool MatchedLo = false;
+
+    for (RelLsIter R = RelocLs.begin(); R != RelocLs.end(); ++R) {
+      if ((R->Reloc.Type == ELF::R_CPU0_LO16) && HasSameSymbol(*HiPos, *R) &&
+          (CompareOffset(*R, *HiPos) >= 0) &&
+          ((LoPos == RelocLs.end()) || ((CompareOffset(*R, *LoPos) < 0)) ||
+           (!MatchedLo && !CompareOffset(*R, *LoPos))))
+        LoPos = R;
+
+      MatchedLo = NeedsMatchingLo(Asm, *R) &&
+        HasMatchingLo(Asm, R, --RelocLs.end());
+    }
+
+    // If a matching LoPos was found, move HiPos and insert it before LoPos.
+    // Make the offsets of HiPos and LoPos match.
+    if (LoPos != RelocLs.end()) {
+      HiPos->Offset = LoPos->Offset;
+      RelocLs.insert(LoPos, *HiPos);
+      RelocLs.erase(HiPos);
+    }
+  }
+
+  // Put the sorted list back in reverse order.
+  assert(Relocs.size() == RelocLs.size());
+  unsigned I = RelocLs.size();
+
+  for (RelLsIter R = RelocLs.begin(); R != RelocLs.end(); ++R)
+    Relocs[--I] = R->Reloc;
+}
+
+MCObjectWriter *llvm::createCpu0ELFObjectWriter(raw_ostream &OS,
+                                                uint8_t OSABI,
+                                                bool IsLittleEndian) {
+  MCELFObjectTargetWriter *MOTW = new Cpu0ELFObjectWriter(OSABI);
+  return createELFObjectWriter(MOTW, OS, IsLittleEndian);
+}
diff -Naur Chapter4_2/MCTargetDesc/Cpu0FixupKinds.h Chapter5_1/MCTargetDesc/Cpu0FixupKinds.h
--- Chapter4_2/MCTargetDesc/Cpu0FixupKinds.h	1970-01-01 08:00:00.000000000 +0800
+++ Chapter5_1/MCTargetDesc/Cpu0FixupKinds.h	2013-12-27 15:52:01.070977141 +0800
@@ -0,0 +1,65 @@
+//===-- Cpu0FixupKinds.h - Cpu0 Specific Fixup Entries ----------*- C++ -*-===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLVM_CPU0_CPU0FIXUPKINDS_H
+#define LLVM_CPU0_CPU0FIXUPKINDS_H
+
+#include "llvm/MC/MCFixup.h"
+
+namespace llvm {
+namespace Cpu0 {
+  // Although most of the current fixup types reflect a unique relocation
+  // one can have multiple fixup types for a given relocation and thus need
+  // to be uniquely named.
+  //
+  // This table *must* be in the save order of
+  // MCFixupKindInfo Infos[Cpu0::NumTargetFixupKinds]
+  // in Cpu0AsmBackend.cpp.
+  //
+  enum Fixups {
+    // Jump 24 bit fixup resulting in - R_CPU0_24.
+    fixup_Cpu0_24 = FirstTargetFixupKind,
+
+    // Pure upper 32 bit fixup resulting in - R_CPU0_32.
+    fixup_Cpu0_32,
+
+    // Pure upper 16 bit fixup resulting in - R_CPU0_HI16.
+    fixup_Cpu0_HI16,
+
+    // Pure lower 16 bit fixup resulting in - R_CPU0_LO16.
+    fixup_Cpu0_LO16,
+
+    // Pure lower 16 bit fixup resulting in - R_CPU0_GPREL16.
+    fixup_Cpu0_GPREL16,
+
+    // Global symbol fixup resulting in - R_CPU0_GOT16.
+    fixup_Cpu0_GOT_Global,
+
+    // Local symbol fixup resulting in - R_CPU0_GOT16.
+    fixup_Cpu0_GOT_Local,
+    
+    // PC relative branch fixup resulting in - R_CPU0_PC24.
+    // cpu0 PC24, e.g. jeq, jmp
+    fixup_Cpu0_PC24,
+
+    // resulting in - R_CPU0_GOT_HI16
+    fixup_Cpu0_GOT_HI16,
+
+    // resulting in - R_CPU0_GOT_LO16
+    fixup_Cpu0_GOT_LO16,
+
+    // Marker
+    LastTargetFixupKind,
+    NumTargetFixupKinds = LastTargetFixupKind - FirstTargetFixupKind
+  };
+} // namespace Cpu0
+} // namespace llvm
+
+
+#endif // LLVM_CPU0_CPU0FIXUPKINDS_H
diff -Naur Chapter4_2/MCTargetDesc/Cpu0MCCodeEmitter.cpp Chapter5_1/MCTargetDesc/Cpu0MCCodeEmitter.cpp
--- Chapter4_2/MCTargetDesc/Cpu0MCCodeEmitter.cpp	1970-01-01 08:00:00.000000000 +0800
+++ Chapter5_1/MCTargetDesc/Cpu0MCCodeEmitter.cpp	2013-12-27 15:52:01.070977141 +0800
@@ -0,0 +1,176 @@
+//===-- Cpu0MCCodeEmitter.cpp - Convert Cpu0 Code to Machine Code ---------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file implements the Cpu0MCCodeEmitter class.
+//
+//===----------------------------------------------------------------------===//
+//
+#define DEBUG_TYPE "mccodeemitter"
+#include "MCTargetDesc/Cpu0BaseInfo.h"
+#include "MCTargetDesc/Cpu0FixupKinds.h"
+#include "MCTargetDesc/Cpu0MCTargetDesc.h"
+#include "llvm/ADT/APFloat.h"
+#include "llvm/ADT/Statistic.h"
+#include "llvm/MC/MCCodeEmitter.h"
+#include "llvm/MC/MCExpr.h"
+#include "llvm/MC/MCInst.h"
+#include "llvm/MC/MCInstrInfo.h"
+#include "llvm/MC/MCRegisterInfo.h"
+#include "llvm/MC/MCSubtargetInfo.h"
+#include "llvm/Support/raw_ostream.h"
+
+using namespace llvm;
+
+namespace {
+class Cpu0MCCodeEmitter : public MCCodeEmitter {
+  // #define LLVM_DELETED_FUNCTION
+  //  LLVM_DELETED_FUNCTION - Expands to = delete if the compiler supports it. 
+  //  Use to mark functions as uncallable. Member functions with this should be 
+  //  declared private so that some behavior is kept in C++03 mode.
+  //  class DontCopy { private: DontCopy(const DontCopy&) LLVM_DELETED_FUNCTION;
+  //  DontCopy &operator =(const DontCopy&) LLVM_DELETED_FUNCTION; public: ... };
+  //  Definition at line 79 of file Compiler.h.
+
+  Cpu0MCCodeEmitter(const Cpu0MCCodeEmitter &) LLVM_DELETED_FUNCTION;
+  void operator=(const Cpu0MCCodeEmitter &) LLVM_DELETED_FUNCTION;
+
+  const MCInstrInfo &MCII;
+  const MCSubtargetInfo &STI;
+  MCContext &Ctx;
+  bool IsLittleEndian;
+
+public:
+  Cpu0MCCodeEmitter(const MCInstrInfo &mcii, const MCSubtargetInfo &sti,
+                    MCContext &ctx, bool IsLittle) :
+            MCII(mcii), STI(sti) , Ctx(ctx), IsLittleEndian(IsLittle) {}
+
+  ~Cpu0MCCodeEmitter() {}
+
+  void EmitByte(unsigned char C, raw_ostream &OS) const {
+    OS << (char)C;
+  }
+
+  void EmitInstruction(uint64_t Val, unsigned Size, raw_ostream &OS) const {
+    // Output the instruction encoding in little endian byte order.
+    for (unsigned i = 0; i < Size; ++i) {
+      unsigned Shift = IsLittleEndian ? i * 8 : (Size - 1 - i) * 8;
+      EmitByte((Val >> Shift) & 0xff, OS);
+    }
+  }
+
+  void EncodeInstruction(const MCInst &MI, raw_ostream &OS,
+                         SmallVectorImpl<MCFixup> &Fixups) const;
+
+  // getBinaryCodeForInstr - TableGen'erated function for getting the
+  // binary encoding for an instruction.
+  uint64_t getBinaryCodeForInstr(const MCInst &MI,
+                                 SmallVectorImpl<MCFixup> &Fixups) const;
+  // getMachineOpValue - Return binary encoding of operand. If the machin
+  // operand requires relocation, record the relocation and return zero.
+  unsigned getMachineOpValue(const MCInst &MI,const MCOperand &MO,
+                             SmallVectorImpl<MCFixup> &Fixups) const;
+
+  unsigned getMemEncoding(const MCInst &MI, unsigned OpNo,
+                          SmallVectorImpl<MCFixup> &Fixups) const;
+}; // class Cpu0MCCodeEmitter
+}  // namespace
+
+MCCodeEmitter *llvm::createCpu0MCCodeEmitterEB(const MCInstrInfo &MCII,
+                                               const MCRegisterInfo &MRI,
+                                               const MCSubtargetInfo &STI,
+                                               MCContext &Ctx)
+{
+  return new Cpu0MCCodeEmitter(MCII, STI, Ctx, false);
+}
+
+MCCodeEmitter *llvm::createCpu0MCCodeEmitterEL(const MCInstrInfo &MCII,
+                                               const MCRegisterInfo &MRI,
+                                               const MCSubtargetInfo &STI,
+                                               MCContext &Ctx)
+{
+  return new Cpu0MCCodeEmitter(MCII, STI, Ctx, true);
+}
+
+/// EncodeInstruction - Emit the instruction.
+/// Size the instruction (currently only 4 bytes
+void Cpu0MCCodeEmitter::
+EncodeInstruction(const MCInst &MI, raw_ostream &OS,
+                  SmallVectorImpl<MCFixup> &Fixups) const
+{
+  uint32_t Binary = getBinaryCodeForInstr(MI, Fixups);
+
+  // Check for unimplemented opcodes.
+  // Unfortunately in CPU0 both NOT and SLL will come in with Binary == 0
+  // so we have to special check for them.
+  unsigned Opcode = MI.getOpcode();
+  if ((Opcode != Cpu0::NOP) && (Opcode != Cpu0::SHL) && !Binary)
+    llvm_unreachable("unimplemented opcode in EncodeInstruction()");
+
+  const MCInstrDesc &Desc = MCII.get(MI.getOpcode());
+  uint64_t TSFlags = Desc.TSFlags;
+
+  // Pseudo instructions don't get encoded and shouldn't be here
+  // in the first place!
+  if ((TSFlags & Cpu0II::FormMask) == Cpu0II::Pseudo)
+    llvm_unreachable("Pseudo opcode found in EncodeInstruction()");
+
+  // For now all instructions are 4 bytes
+  int Size = 4; // FIXME: Have Desc.getSize() return the correct value!
+
+  EmitInstruction(Binary, Size, OS);
+}
+
+/// getMachineOpValue - Return binary encoding of operand. If the machine
+/// operand requires relocation, record the relocation and return zero.
+unsigned Cpu0MCCodeEmitter::
+getMachineOpValue(const MCInst &MI, const MCOperand &MO,
+                  SmallVectorImpl<MCFixup> &Fixups) const {
+  if (MO.isReg()) {
+    unsigned Reg = MO.getReg();
+    unsigned RegNo = getCpu0RegisterNumbering(Reg);
+    return RegNo;
+  } else if (MO.isImm()) {
+    return static_cast<unsigned>(MO.getImm());
+  } else if (MO.isFPImm()) {
+    return static_cast<unsigned>(APFloat(MO.getFPImm())
+        .bitcastToAPInt().getHiBits(32).getLimitedValue());
+  } 
+
+  // MO must be an Expr.
+  assert(MO.isExpr());
+
+  const MCExpr *Expr = MO.getExpr();
+  MCExpr::ExprKind Kind = Expr->getKind();
+
+  if (Kind == MCExpr::Binary) {
+    Expr = static_cast<const MCBinaryExpr*>(Expr)->getLHS();
+    Kind = Expr->getKind();
+  }
+
+  assert (Kind == MCExpr::SymbolRef);
+
+  // All of the information is in the fixup.
+  return 0;
+}
+
+/// getMemEncoding - Return binary encoding of memory related operand.
+/// If the offset operand requires relocation, record the relocation.
+unsigned
+Cpu0MCCodeEmitter::getMemEncoding(const MCInst &MI, unsigned OpNo,
+                                  SmallVectorImpl<MCFixup> &Fixups) const {
+  // Base register is encoded in bits 20-16, offset is encoded in bits 15-0.
+  assert(MI.getOperand(OpNo).isReg());
+  unsigned RegBits = getMachineOpValue(MI, MI.getOperand(OpNo),Fixups) << 16;
+  unsigned OffBits = getMachineOpValue(MI, MI.getOperand(OpNo+1), Fixups);
+
+  return (OffBits & 0xFFFF) | RegBits;
+}
+
+#include "Cpu0GenMCCodeEmitter.inc"
+
diff -Naur Chapter4_2/MCTargetDesc/Cpu0MCTargetDesc.cpp Chapter5_1/MCTargetDesc/Cpu0MCTargetDesc.cpp
--- Chapter4_2/MCTargetDesc/Cpu0MCTargetDesc.cpp	2013-12-27 15:52:01.047977142 +0800
+++ Chapter5_1/MCTargetDesc/Cpu0MCTargetDesc.cpp	2013-12-27 15:52:01.070977141 +0800
@@ -120,6 +120,26 @@
   return new Cpu0InstPrinter(MAI, MII, MRI);
 } // lbd document - mark - createCpu0MCInstPrinter
 
+static MCStreamer *createMCStreamer(const Target &T, StringRef TT,
+                                    MCContext &Context, MCAsmBackend &MAB,
+                                    raw_ostream &OS, MCCodeEmitter *Emitter,
+                                    bool RelaxAll, bool NoExecStack) {
+  MCTargetStreamer *S = new MCTargetStreamer();
+  return createELFStreamer(Context, S, MAB, OS, Emitter, RelaxAll, NoExecStack);
+}
+
+static MCStreamer *
+createMCAsmStreamer(MCContext &Ctx, formatted_raw_ostream &OS,
+                    bool isVerboseAsm, bool useLoc, bool useCFI,
+                    bool useDwarfDirectory, MCInstPrinter *InstPrint,
+                    MCCodeEmitter *CE, MCAsmBackend *TAB, bool ShowInst) {
+  MCTargetStreamer *S = new MCTargetStreamer();
+
+  return llvm::createAsmStreamer(Ctx, S, OS, isVerboseAsm, useLoc, useCFI,
+                                 useDwarfDirectory, InstPrint, CE, TAB,
+                                 ShowInst);
+} // lbd document - mark - createMCStreamer
+
 extern "C" void LLVMInitializeCpu0TargetMC() {
   // Register the MC asm info.
   RegisterMCAsmInfoFn X(TheCpu0Target, createCpu0MCAsmInfo);
@@ -138,6 +158,25 @@
   TargetRegistry::RegisterMCRegInfo(TheCpu0Target, createCpu0MCRegisterInfo);
   TargetRegistry::RegisterMCRegInfo(TheCpu0elTarget, createCpu0MCRegisterInfo);
 
+  // Register the MC Code Emitter
+  TargetRegistry::RegisterMCCodeEmitter(TheCpu0Target,
+                                        createCpu0MCCodeEmitterEB);
+  TargetRegistry::RegisterMCCodeEmitter(TheCpu0elTarget,
+                                        createCpu0MCCodeEmitterEL);
+
+  // Register the object streamer.
+  TargetRegistry::RegisterMCObjectStreamer(TheCpu0Target, createMCStreamer);
+  TargetRegistry::RegisterMCObjectStreamer(TheCpu0elTarget, createMCStreamer);
+
+  // Register the asm streamer.
+  TargetRegistry::RegisterAsmStreamer(TheCpu0Target, createMCAsmStreamer);
+  TargetRegistry::RegisterAsmStreamer(TheCpu0elTarget, createMCAsmStreamer);
+
+  // Register the asm backend.
+  TargetRegistry::RegisterMCAsmBackend(TheCpu0Target,
+                                       createCpu0AsmBackendEB32);
+  TargetRegistry::RegisterMCAsmBackend(TheCpu0elTarget,
+                                       createCpu0AsmBackendEL32);
   // Register the MC subtarget info.
   TargetRegistry::RegisterMCSubtargetInfo(TheCpu0Target,
                                           createCpu0MCSubtargetInfo);
diff -Naur Chapter4_2/MCTargetDesc/Cpu0MCTargetDesc.h Chapter5_1/MCTargetDesc/Cpu0MCTargetDesc.h
--- Chapter4_2/MCTargetDesc/Cpu0MCTargetDesc.h	2013-12-27 15:52:01.047977142 +0800
+++ Chapter5_1/MCTargetDesc/Cpu0MCTargetDesc.h	2013-12-27 15:52:01.070977141 +0800
@@ -22,6 +22,7 @@
 class MCContext;
 class MCInstrInfo;
 class MCObjectWriter;
+class MCRegisterInfo;
 class MCSubtargetInfo;
 class StringRef;
 class Target;
@@ -30,11 +31,25 @@
 extern Target TheCpu0Target;
 extern Target TheCpu0elTarget;
 
-MCAsmBackend *createCpu0AsmBackendEB32(const Target &T, StringRef TT,
-                                       StringRef CPU);
-MCAsmBackend *createCpu0AsmBackendEL32(const Target &T, StringRef TT,
-                                       StringRef CPU);
+MCCodeEmitter *createCpu0MCCodeEmitterEB(const MCInstrInfo &MCII,
+                                         const MCRegisterInfo &MRI,
+                                         const MCSubtargetInfo &STI,
+                                         MCContext &Ctx);
+MCCodeEmitter *createCpu0MCCodeEmitterEL(const MCInstrInfo &MCII,
+                                         const MCRegisterInfo &MRI,
+                                         const MCSubtargetInfo &STI,
+                                         MCContext &Ctx);
+// lbd document - mark - createCpu0MCCodeEmitterEL
+
+MCAsmBackend *createCpu0AsmBackendEB32(const Target &T, const MCRegisterInfo &MRI,
+                                       StringRef TT, StringRef CPU);
+MCAsmBackend *createCpu0AsmBackendEL32(const Target &T, const MCRegisterInfo &MRI,
+                                       StringRef TT, StringRef CPU);
 // lbd document - mark - createCpu0AsmBackendEL32
+
+MCObjectWriter *createCpu0ELFObjectWriter(raw_ostream &OS,
+                                          uint8_t OSABI,
+                                          bool IsLittleEndian);
 } // End llvm namespace
 
 // Defines symbolic names for Cpu0 registers.  This defines a mapping from
