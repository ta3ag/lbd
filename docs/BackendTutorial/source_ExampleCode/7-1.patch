diff -Naur Chapter6_1/Cpu0InstrInfo.td Chapter7_1/Cpu0InstrInfo.td
--- Chapter6_1/Cpu0InstrInfo.td	2013-12-27 15:52:01.120977139 +0800
+++ Chapter7_1/Cpu0InstrInfo.td	2013-12-27 15:52:01.151977138 +0800
@@ -71,6 +71,12 @@
   let EncoderMethod = "getMemEncoding";
 }
 
+def mem_ea : Operand<i32> {
+  let PrintMethod = "printMemOperandEA";
+  let MIOperandInfo = (ops CPURegs, simm16);
+  let EncoderMethod = "getMemEncoding";
+}
+
 // Transformation Function - get the lower 16 bits.
 def LO16 : SDNodeXForm<imm, [{
   return getImm(N, N->getZExtValue() & 0xffff);
@@ -126,7 +132,11 @@
 }]>;
 
 // Load/Store PatFrags.
+def sextloadi16_a   : AlignedLoad<sextloadi16>;
+def zextloadi16_a   : AlignedLoad<zextloadi16>;
+def extloadi16_a    : AlignedLoad<extloadi16>;
 def load_a          : AlignedLoad<load>;
+def truncstorei16_a : AlignedStore<truncstorei16>;
 def store_a         : AlignedStore<store>;
 
 //===----------------------------------------------------------------------===//
@@ -320,6 +330,10 @@
   let neverHasSideEffects = 1;
 }
 
+class EffectiveAddress<string instr_asm, RegisterClass RC, Operand Mem> :
+  FMem<0x09, (outs RC:$ra), (ins Mem:$addr),
+     instr_asm, [(set RC:$ra, addr:$addr)], IIAlu>;
+
 //===----------------------------------------------------------------------===//
 // Instruction definition
 //===----------------------------------------------------------------------===//
@@ -332,6 +346,12 @@
 ///  aligned
 defm LD     : LoadM32<0x01,  "ld",  load_a>;
 defm ST     : StoreM32<0x02, "st",  store_a>;
+defm LB     : LoadM32<0x03, "lb",  sextloadi8>;
+defm LBu    : LoadM32<0x04, "lbu", zextloadi8>;
+defm SB     : StoreM32<0x05, "sb", truncstorei8>;
+defm LH     : LoadM32<0x06, "lh",  sextloadi16_a>;
+defm LHu    : LoadM32<0x07, "lhu", zextloadi16_a>;
+defm SH     : StoreM32<0x08, "sh", truncstorei16_a>;
 
 /// Arithmetic Instructions (ALU Immediate)
 // IR "add" defined in include/llvm/Target/TargetSelectionDAG.td, line 315 (def add).
@@ -386,6 +406,14 @@
 let addr=0 in
   def NOP   : FJ<0, (outs), (ins), "nop", [], IIAlu>;
 
+// FrameIndexes are legalized when they are operands from load/store
+// instructions. The same not happens for stack address copies, so an
+// add op with mem ComplexPattern is used and the stack address copy
+// can be matched. It's similar to Sparc LEA_ADDRi
+def LEA_ADDiu : EffectiveAddress<"addiu\t$ra, $addr", CPURegs, mem_ea> {
+  let isCodeGenOnly = 1;
+} // lbd document - mark - def LEA_ADDiu
+
 //===----------------------------------------------------------------------===//
 //  Arbitrary patterns that map to one or more instructions
 //===----------------------------------------------------------------------===//
@@ -402,6 +430,14 @@
 def : Pat<(i32 imm:$imm),
           (ORi (LUi (HI16 imm:$imm)), (LO16 imm:$imm))>;
 
+// Carry patterns
+def : Pat<(subc CPURegs:$lhs, CPURegs:$rhs),
+          (SUBu CPURegs:$lhs, CPURegs:$rhs)>;
+def : Pat<(addc CPURegs:$lhs, CPURegs:$rhs),
+          (ADDu CPURegs:$lhs, CPURegs:$rhs)>;
+def : Pat<(addc  CPURegs:$src, immSExt16:$imm),
+          (ADDiu CPURegs:$src, imm:$imm)>;
+
 // hi/lo relocs
 def : Pat<(Cpu0Hi tglobaladdr:$in), (SHL (ADDiu ZERO, tglobaladdr:$in), 16)>;
 def : Pat<(Cpu0Hi tglobaladdr:$in), (LUi tglobaladdr:$in)>;
@@ -417,6 +453,10 @@
 // 1: in == 0; 0: in != 0
           (XORi CPURegs:$in, 1)>;
 
+def : Pat<(i32 (extloadi1  addr:$src)), (LBu addr:$src)>;
+def : Pat<(i32 (extloadi8  addr:$src)), (LBu addr:$src)>;
+def : Pat<(i32 (extloadi16_a addr:$src)), (LHu addr:$src)>;
+
 // setcc patterns
 multiclass SeteqPatsCmp<RegisterClass RC> {
 // a == b
diff -Naur Chapter6_1/Cpu0ISelDAGToDAG.cpp Chapter7_1/Cpu0ISelDAGToDAG.cpp
--- Chapter6_1/Cpu0ISelDAGToDAG.cpp	2013-12-27 15:52:01.104977139 +0800
+++ Chapter7_1/Cpu0ISelDAGToDAG.cpp	2013-12-27 15:52:01.147977138 +0800
@@ -152,6 +152,23 @@
         Addr.getOpcode() == ISD::TargetGlobalAddress))
       return false;
   }
+  
+  // Addresses of the form FI+const or FI|const
+  if (CurDAG->isBaseWithConstantOffset(Addr)) {
+    ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Addr.getOperand(1));
+    if (isInt<16>(CN->getSExtValue())) {
+
+      // If the first operand is a FI, get the TargetFI Node
+      if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>
+                                  (Addr.getOperand(0)))
+        Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), ValTy);
+      else
+        Base = Addr.getOperand(0);
+
+      Offset = CurDAG->getTargetConstant(CN->getZExtValue(), ValTy);
+      return true;
+    }
+  } // lbd document - mark - if (CurDAG->isBaseWithConstantOffset(Addr))
 
   Base   = Addr;
   Offset = CurDAG->getTargetConstant(0, ValTy);
@@ -204,6 +221,58 @@
   switch(Opcode) {
   default: break;
 
+  case ISD::SUBE:
+  case ISD::ADDE: {
+    SDValue InFlag = Node->getOperand(2), CmpLHS;
+    unsigned Opc = InFlag.getOpcode(); (void)Opc;
+    assert(((Opc == ISD::ADDC || Opc == ISD::ADDE) ||
+            (Opc == ISD::SUBC || Opc == ISD::SUBE)) &&
+           "(ADD|SUB)E flag operand must come from (ADD|SUB)C/E insn");
+
+    unsigned MOp;
+    if (Opcode == ISD::ADDE) {
+      CmpLHS = InFlag.getValue(0);
+      MOp = Cpu0::ADDu;
+    } else {
+      CmpLHS = InFlag.getOperand(0);
+      MOp = Cpu0::SUBu;
+    }
+
+    SDValue Ops[] = { CmpLHS, InFlag.getOperand(1) };
+
+    SDValue LHS = Node->getOperand(0);
+    SDValue RHS = Node->getOperand(1);
+
+    EVT VT = LHS.getValueType();
+    SDNode *StatusWord = CurDAG->getMachineNode(Cpu0::CMP, DL, VT, Ops);
+    SDValue Constant1 = CurDAG->getTargetConstant(1, VT);
+    SDNode *Carry = CurDAG->getMachineNode(Cpu0::ANDi, DL, VT, 
+                                           SDValue(StatusWord,0), Constant1);
+    SDNode *AddCarry = CurDAG->getMachineNode(Cpu0::ADDu, DL, VT,
+                                              SDValue(Carry,0), RHS);
+
+    return CurDAG->SelectNodeTo(Node, MOp, VT, MVT::Glue,
+                                LHS, SDValue(AddCarry,0));
+  }
+
+  /// Mul with two results
+  case ISD::SMUL_LOHI:
+  case ISD::UMUL_LOHI: {
+    if (NodeTy == MVT::i32)
+      MultOpc = (Opcode == ISD::UMUL_LOHI ? Cpu0::MULTu : Cpu0::MULT);
+
+    std::pair<SDNode*, SDNode*> LoHi = SelectMULT(Node, MultOpc, DL, NodeTy,
+                                                  true, true);
+
+    if (!SDValue(Node, 0).use_empty())
+      ReplaceUses(SDValue(Node, 0), SDValue(LoHi.first, 0));
+
+    if (!SDValue(Node, 1).use_empty())
+      ReplaceUses(SDValue(Node, 1), SDValue(LoHi.second, 0));
+
+    return NULL;
+  }
+
   case ISD::MULHS:
   case ISD::MULHU: {
     MultOpc = (Opcode == ISD::MULHU ? Cpu0::MULTu : Cpu0::MULT);
diff -Naur Chapter6_1/Cpu0ISelLowering.cpp Chapter7_1/Cpu0ISelLowering.cpp
--- Chapter6_1/Cpu0ISelLowering.cpp	2013-12-27 15:52:01.104977139 +0800
+++ Chapter7_1/Cpu0ISelLowering.cpp	2013-12-27 15:52:01.147977138 +0800
@@ -122,6 +122,16 @@
   // Set up the register classes
   addRegisterClass(MVT::i32, &Cpu0::CPURegsRegClass);
 
+  // Cpu0 does not have i1 type, so use i32 for
+  // setcc operations results (slt, sgt, ...).
+  setBooleanContents(ZeroOrOneBooleanContent);
+  setBooleanVectorContents(ZeroOrNegativeOneBooleanContent);
+
+  // Load extented operations for i1 types must be promoted
+  setLoadExtAction(ISD::EXTLOAD,  MVT::i1,  Promote);
+  setLoadExtAction(ISD::ZEXTLOAD, MVT::i1,  Promote);
+  setLoadExtAction(ISD::SEXTLOAD, MVT::i1,  Promote);
+
   // Cpu0 Custom Operations
   setOperationAction(ISD::GlobalAddress,      MVT::i32,   Custom);
 
@@ -283,3 +293,9 @@
     return DAG.getNode(Cpu0ISD::Ret, DL, MVT::Other,
                        Chain, DAG.getRegister(Cpu0::LR, MVT::i32));
 }
+
+bool // lbd document - mark - isOffsetFoldingLegal
+Cpu0TargetLowering::isOffsetFoldingLegal(const GlobalAddressSDNode *GA) const {
+  // The Cpu0 target isn't yet aware of offsets.
+  return false;
+}
diff -Naur Chapter6_1/Cpu0ISelLowering.h Chapter7_1/Cpu0ISelLowering.h
--- Chapter6_1/Cpu0ISelLowering.h	2013-12-27 15:52:01.120977139 +0800
+++ Chapter7_1/Cpu0ISelLowering.h	2013-12-27 15:52:01.151977138 +0800
@@ -105,6 +105,8 @@
                   const SmallVectorImpl<ISD::OutputArg> &Outs,
                   const SmallVectorImpl<SDValue> &OutVals,
                   SDLoc DL, SelectionDAG &DAG) const;
+
+    virtual bool isOffsetFoldingLegal(const GlobalAddressSDNode *GA) const;
   };
 }
 
diff -Naur Chapter6_1/InstPrinter/Cpu0InstPrinter.cpp Chapter7_1/InstPrinter/Cpu0InstPrinter.cpp
--- Chapter6_1/InstPrinter/Cpu0InstPrinter.cpp	2013-12-27 15:52:01.126977139 +0800
+++ Chapter7_1/InstPrinter/Cpu0InstPrinter.cpp	2013-12-27 15:52:01.151977138 +0800
@@ -118,3 +118,12 @@
   O << ")";
 }
 
+void Cpu0InstPrinter:: // lbd document - mark - printMemOperandEA
+printMemOperandEA(const MCInst *MI, int opNum, raw_ostream &O) {
+  // when using stack locations for not load/store instructions
+  // print the same way as all normal 3 operand instructions.
+  printOperand(MI, opNum, O);
+  O << ", ";
+  printOperand(MI, opNum+1, O);
+  return;
+}
diff -Naur Chapter6_1/InstPrinter/Cpu0InstPrinter.h Chapter7_1/InstPrinter/Cpu0InstPrinter.h
--- Chapter6_1/InstPrinter/Cpu0InstPrinter.h	2013-12-27 15:52:01.120977139 +0800
+++ Chapter7_1/InstPrinter/Cpu0InstPrinter.h	2013-12-27 15:52:01.151977138 +0800
@@ -39,6 +39,7 @@
   void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);
   void printUnsignedImm(const MCInst *MI, int opNum, raw_ostream &O);
   void printMemOperand(const MCInst *MI, int opNum, raw_ostream &O);
+  void printMemOperandEA(const MCInst *MI, int opNum, raw_ostream &O);
 };
 } // end namespace llvm
 
