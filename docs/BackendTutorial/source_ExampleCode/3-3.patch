diff -Naur Chapter3_2/CMakeLists.txt Chapter3_3/CMakeLists.txt
--- Chapter3_2/CMakeLists.txt	2013-12-27 15:52:00.913977147 +0800
+++ Chapter3_3/CMakeLists.txt	2013-12-27 15:52:00.946977146 +0800
@@ -25,6 +25,7 @@
 add_llvm_target(Cpu0CodeGen
   Cpu0AsmPrinter.cpp
   Cpu0InstrInfo.cpp
+  Cpu0ISelDAGToDAG.cpp
   Cpu0ISelLowering.cpp
   Cpu0FrameLowering.cpp
   Cpu0MCInstLower.cpp
diff -Naur Chapter3_2/Cpu0InstrInfo.cpp Chapter3_3/Cpu0InstrInfo.cpp
--- Chapter3_2/Cpu0InstrInfo.cpp	2013-12-27 15:52:00.913977147 +0800
+++ Chapter3_3/Cpu0InstrInfo.cpp	2013-12-27 15:52:00.946977146 +0800
@@ -13,6 +13,7 @@
 
 #include "Cpu0InstrInfo.h"
 #include "Cpu0TargetMachine.h"
+#include "llvm/CodeGen/MachineInstrBuilder.h"
 #define GET_INSTRINFO_CTOR_DTOR
 #include "Cpu0GenInstrInfo.inc"
 
@@ -27,3 +28,12 @@
   return RI;
 } // lbd document - mark - getRegisterInfo()
 
+MachineInstr*
+Cpu0InstrInfo::emitFrameIndexDebugValue(MachineFunction &MF, int FrameIx,
+                                        uint64_t Offset, const MDNode *MDPtr,
+                                        DebugLoc DL) const {
+  MachineInstrBuilder MIB = BuildMI(MF, DL, get(Cpu0::DBG_VALUE))
+    .addFrameIndex(FrameIx).addImm(0).addImm(Offset).addMetadata(MDPtr);
+  return &*MIB;
+} // lbd document - mark - emitFrameIndexDebugValue
+
diff -Naur Chapter3_2/Cpu0InstrInfo.h Chapter3_3/Cpu0InstrInfo.h
--- Chapter3_2/Cpu0InstrInfo.h	2013-12-27 15:52:00.913977147 +0800
+++ Chapter3_3/Cpu0InstrInfo.h	2013-12-27 15:52:00.947977146 +0800
@@ -35,6 +35,12 @@
   /// always be able to get register info as well (through this method).
   ///
   virtual const Cpu0RegisterInfo &getRegisterInfo() const;
+
+  virtual MachineInstr* emitFrameIndexDebugValue(MachineFunction &MF,
+                                                 int FrameIx, uint64_t Offset,
+                                                 const MDNode *MDPtr,
+                                                 DebugLoc DL) const;
+  // lbd document - mark - emitFrameIndexDebugValue
 };
 }
 
diff -Naur Chapter3_2/Cpu0ISelDAGToDAG.cpp Chapter3_3/Cpu0ISelDAGToDAG.cpp
--- Chapter3_2/Cpu0ISelDAGToDAG.cpp	1970-01-01 08:00:00.000000000 +0800
+++ Chapter3_3/Cpu0ISelDAGToDAG.cpp	2013-12-27 15:52:00.943977146 +0800
@@ -0,0 +1,183 @@
+//===-- Cpu0ISelDAGToDAG.cpp - A Dag to Dag Inst Selector for Cpu0 --------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file defines an instruction selector for the CPU0 target.
+//
+//===----------------------------------------------------------------------===//
+
+#define DEBUG_TYPE "cpu0-isel"
+#include "Cpu0.h"
+#include "Cpu0RegisterInfo.h"
+#include "Cpu0Subtarget.h"
+#include "Cpu0TargetMachine.h"
+#include "MCTargetDesc/Cpu0BaseInfo.h"
+#include "llvm/IR/GlobalValue.h"
+#include "llvm/IR/Instructions.h"
+#include "llvm/IR/Intrinsics.h"
+#include "llvm/Support/CFG.h"
+#include "llvm/IR/Type.h"
+#include "llvm/CodeGen/MachineConstantPool.h"
+#include "llvm/CodeGen/MachineFunction.h"
+#include "llvm/CodeGen/MachineFrameInfo.h"
+#include "llvm/CodeGen/MachineInstrBuilder.h"
+#include "llvm/CodeGen/MachineRegisterInfo.h"
+#include "llvm/CodeGen/SelectionDAGISel.h"
+#include "llvm/CodeGen/SelectionDAGNodes.h"
+#include "llvm/Target/TargetMachine.h"
+#include "llvm/Support/Debug.h"
+#include "llvm/Support/ErrorHandling.h"
+#include "llvm/Support/raw_ostream.h"
+using namespace llvm;
+
+//===----------------------------------------------------------------------===//
+// Instruction Selector Implementation
+//===----------------------------------------------------------------------===//
+
+//===----------------------------------------------------------------------===//
+// Cpu0DAGToDAGISel - CPU0 specific code to select CPU0 machine
+// instructions for SelectionDAG operations.
+//===----------------------------------------------------------------------===//
+namespace {
+
+class Cpu0DAGToDAGISel : public SelectionDAGISel {
+
+  /// TM - Keep a reference to Cpu0TargetMachine.
+  Cpu0TargetMachine &TM;
+
+  /// Subtarget - Keep a pointer to the Cpu0Subtarget around so that we can
+  /// make the right decision when generating code for different targets.
+  const Cpu0Subtarget &Subtarget;
+
+public:
+  explicit Cpu0DAGToDAGISel(Cpu0TargetMachine &tm) :
+  SelectionDAGISel(tm),
+  TM(tm), Subtarget(tm.getSubtarget<Cpu0Subtarget>()) {}
+
+  // Pass Name
+  virtual const char *getPassName() const {
+    return "CPU0 DAG->DAG Pattern Instruction Selection";
+  }
+
+  virtual bool runOnMachineFunction(MachineFunction &MF);
+
+private:
+  // Include the pieces autogenerated from the target description.
+  #include "Cpu0GenDAGISel.inc"
+
+  /// getTargetMachine - Return a reference to the TargetMachine, casted
+  /// to the target-specific type.
+  const Cpu0TargetMachine &getTargetMachine() {
+    return static_cast<const Cpu0TargetMachine &>(TM);
+  }
+
+  /// getInstrInfo - Return a reference to the TargetInstrInfo, casted
+  /// to the target-specific type.
+  const Cpu0InstrInfo *getInstrInfo() {
+    return getTargetMachine().getInstrInfo();
+  }
+
+  SDNode *getGlobalBaseReg();
+
+  SDNode *Select(SDNode *N);
+  // Complex Pattern.
+  bool SelectAddr(SDNode *Parent, SDValue N, SDValue &Base, SDValue &Offset);
+  // getImm - Return a target constant with the specified value.
+  inline SDValue getImm(const SDNode *Node, unsigned Imm) {
+    return CurDAG->getTargetConstant(Imm, Node->getValueType(0));
+  }
+};
+}
+
+bool Cpu0DAGToDAGISel::runOnMachineFunction(MachineFunction &MF) {
+  bool Ret = SelectionDAGISel::runOnMachineFunction(MF);
+
+  return Ret;
+}
+
+/// ComplexPattern used on Cpu0InstrInfo
+/// Used on Cpu0 Load/Store instructions
+bool Cpu0DAGToDAGISel::
+SelectAddr(SDNode *Parent, SDValue Addr, SDValue &Base, SDValue &Offset) {
+  EVT ValTy = Addr.getValueType();
+
+  // If Parent is an unaligned f32 load or store, select a (base + index)
+  // floating point load/store instruction (luxc1 or suxc1).
+  const LSBaseSDNode* LS = 0;
+
+  if (Parent && (LS = dyn_cast<LSBaseSDNode>(Parent))) {
+    EVT VT = LS->getMemoryVT();
+
+    if (VT.getSizeInBits() / 8 > LS->getAlignment()) {
+      assert(getTargetLowering()->allowsUnalignedMemoryAccesses(VT) &&
+             "Unaligned loads/stores not supported for this type.");
+      if (VT == MVT::f32)
+        return false;
+    }
+  }
+
+  // if Address is FI, get the TargetFrameIndex.
+  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
+    Base   = CurDAG->getTargetFrameIndex(FIN->getIndex(), ValTy);
+    Offset = CurDAG->getTargetConstant(0, ValTy);
+    return true;
+  }
+
+  Base   = Addr;
+  Offset = CurDAG->getTargetConstant(0, ValTy);
+  return true;
+}
+
+/// Select instructions not customized! Used for
+/// expanded, promoted and normal instructions
+SDNode* Cpu0DAGToDAGISel::Select(SDNode *Node) {
+  unsigned Opcode = Node->getOpcode();
+
+  // Dump information about the Node being selected
+  DEBUG(errs() << "Selecting: "; Node->dump(CurDAG); errs() << "\n");
+
+  // If we have a custom node, we already have selected!
+  if (Node->isMachineOpcode()) {
+    DEBUG(errs() << "== "; Node->dump(CurDAG); errs() << "\n");
+    return NULL;
+  }
+
+  ///
+  // Instruction Selection not handled by the auto-generated
+  // tablegen selection should be handled here.
+  ///
+
+  switch(Opcode) {
+  default: break;
+
+  case ISD::Constant: {
+    const ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Node);
+    unsigned Size = CN->getValueSizeInBits(0);
+
+    if (Size == 32)
+      break;
+  }
+  }
+
+  // Select the default instruction
+  SDNode *ResNode = SelectCode(Node);
+
+  DEBUG(errs() << "=> ");
+  if (ResNode == NULL || ResNode == Node)
+    DEBUG(Node->dump(CurDAG));
+  else
+    DEBUG(ResNode->dump(CurDAG));
+  DEBUG(errs() << "\n");
+  return ResNode;
+}
+
+/// createCpu0ISelDag - This pass converts a legalized DAG into a
+/// CPU0-specific DAG, ready for instruction scheduling.
+FunctionPass *llvm::createCpu0ISelDag(Cpu0TargetMachine &TM) {
+  return new Cpu0DAGToDAGISel(TM);
+}
diff -Naur Chapter3_2/Cpu0TargetMachine.cpp Chapter3_3/Cpu0TargetMachine.cpp
--- Chapter3_2/Cpu0TargetMachine.cpp	2013-12-27 15:52:00.913977147 +0800
+++ Chapter3_3/Cpu0TargetMachine.cpp	2013-12-27 15:52:00.946977146 +0800
@@ -82,6 +82,7 @@
   const Cpu0Subtarget &getCpu0Subtarget() const {
     return *getCpu0TargetMachine().getSubtargetImpl();
   } // lbd document - mark - getCpu0Subtarget()
+  virtual bool addInstSelector();
 };
 } // namespace
 
@@ -89,3 +90,10 @@
   return new Cpu0PassConfig(this, PM);
 } // lbd document - mark - createPassConfig
 
+// Install an instruction selector pass using
+// the ISelDag to gen Cpu0 code.
+bool Cpu0PassConfig::addInstSelector() {
+  addPass(createCpu0ISelDag(getCpu0TargetMachine()));
+  return false;
+} // lbd document - mark - addInstSelector()
+
