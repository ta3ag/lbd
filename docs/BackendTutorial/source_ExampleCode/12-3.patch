diff -Naur Chapter12_2/AsmParser/Cpu0AsmParser.cpp Chapter12_3/AsmParser/Cpu0AsmParser.cpp
--- Chapter12_2/AsmParser/Cpu0AsmParser.cpp	2014-02-21 17:55:13.314150213 +0800
+++ Chapter12_3/AsmParser/Cpu0AsmParser.cpp	2014-02-21 17:55:13.314150213 +0800
@@ -1049,59 +1049,68 @@
   { 10 /* addu */, Cpu0::ADDu, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
   { 15 /* and */, Cpu0::AND, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
   { 19 /* andi */, Cpu0::ANDi, Convert__Reg1_0__Reg1_1__Imm1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
-  { 24 /* cmp */, Cpu0::CMP, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_SR, MCK_CPURegs, MCK_CPURegs }, },
-  { 28 /* div */, Cpu0::SDIV, Convert__Reg1_0__Reg1_1, 0, { MCK_CPURegs, MCK_CPURegs }, },
-  { 32 /* divu */, Cpu0::UDIV, Convert__Reg1_0__Reg1_1, 0, { MCK_CPURegs, MCK_CPURegs }, },
-  { 37 /* iret */, Cpu0::IRET, Convert__Reg1_0, 0, { MCK_CPURegs }, },
-  { 42 /* jalr */, Cpu0::JALR, Convert__Reg1_0, 0, { MCK_CPURegs }, },
-  { 47 /* jeq */, Cpu0::JEQ, Convert__Reg1_0__Imm1_1, 0, { MCK_SR, MCK_Imm }, },
-  { 51 /* jge */, Cpu0::JGE, Convert__Reg1_0__Imm1_1, 0, { MCK_SR, MCK_Imm }, },
-  { 55 /* jgt */, Cpu0::JGT, Convert__Reg1_0__Imm1_1, 0, { MCK_SR, MCK_Imm }, },
-  { 59 /* jle */, Cpu0::JLE, Convert__Reg1_0__Imm1_1, 0, { MCK_SR, MCK_Imm }, },
-  { 63 /* jlt */, Cpu0::JLT, Convert__Reg1_0__Imm1_1, 0, { MCK_SR, MCK_Imm }, },
-  { 67 /* jmp */, Cpu0::JMP, Convert__Imm1_0, 0, { MCK_Imm }, },
-  { 71 /* jne */, Cpu0::JNE, Convert__Reg1_0__Imm1_1, 0, { MCK_SR, MCK_Imm }, },
-  { 75 /* jsub */, Cpu0::JSUB, Convert__Imm1_0, 0, { MCK_Imm }, },
-  { 80 /* la */, Cpu0::LoadAddr32Reg, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
-  { 80 /* la */, Cpu0::LoadAddr32Imm, Convert__Reg1_0__Imm1_1, 0, { MCK_CPURegs, MCK_Imm }, },
-  { 83 /* lb */, Cpu0::LB, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
-  { 86 /* lbu */, Cpu0::LBu, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
-  { 90 /* ld */, Cpu0::LD, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
-  { 93 /* lh */, Cpu0::LH, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
-  { 96 /* lhu */, Cpu0::LHu, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
-  { 100 /* li */, Cpu0::LoadImm32Reg, Convert__Reg1_0__Imm1_1, 0, { MCK_CPURegs, MCK_Imm }, },
-  { 103 /* lui */, Cpu0::LUi, Convert__Reg1_0__Imm1_1, 0, { MCK_CPURegs, MCK_Imm }, },
-  { 107 /* mfhi */, Cpu0::MFHI, Convert__Reg1_0, 0, { MCK_CPURegs }, },
-  { 112 /* mflo */, Cpu0::MFLO, Convert__Reg1_0, 0, { MCK_CPURegs }, },
-  { 117 /* mfsw */, Cpu0::MFSW, Convert__Reg1_0, 0, { MCK_CPURegs }, },
-  { 122 /* mthi */, Cpu0::MTHI, Convert__Reg1_0, 0, { MCK_CPURegs }, },
-  { 127 /* mtlo */, Cpu0::MTLO, Convert__Reg1_0, 0, { MCK_CPURegs }, },
-  { 132 /* mtsw */, Cpu0::MTSW, Convert__Reg1_0, 0, { MCK_CPURegs }, },
-  { 137 /* mul */, Cpu0::MUL, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
-  { 141 /* mult */, Cpu0::MULT, Convert__Reg1_0__Reg1_1, 0, { MCK_CPURegs, MCK_CPURegs }, },
-  { 146 /* multu */, Cpu0::MULTu, Convert__Reg1_0__Reg1_1, 0, { MCK_CPURegs, MCK_CPURegs }, },
-  { 152 /* nop */, Cpu0::NOP, Convert_NoOperands, 0, {  }, },
-  { 156 /* or */, Cpu0::OR, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
-  { 159 /* ori */, Cpu0::ORi, Convert__Reg1_0__Reg1_1__Imm1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
-  { 163 /* ret */, Cpu0::JR, Convert__Reg1_0, 0, { MCK_CPURegs }, },
-  { 167 /* rol */, Cpu0::ROL, Convert__Reg1_0__Reg1_1__Imm1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
-  { 171 /* ror */, Cpu0::ROR, Convert__Reg1_0__Reg1_1__Imm1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
-  { 175 /* sb */, Cpu0::SB, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
-  { 178 /* sh */, Cpu0::SH, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
-  { 181 /* shl */, Cpu0::SHL, Convert__Reg1_0__Reg1_1__Imm1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
-  { 185 /* shlv */, Cpu0::SHLV, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
-  { 190 /* shr */, Cpu0::SHR, Convert__Reg1_0__Reg1_1__Imm1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
-  { 194 /* shrv */, Cpu0::SHRV, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
-  { 199 /* sra */, Cpu0::SRA, Convert__Reg1_0__Reg1_1__Imm1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
-  { 203 /* srav */, Cpu0::SRAV, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
-  { 208 /* st */, Cpu0::ST, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
-  { 211 /* sub */, Cpu0::SUB, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
-  { 215 /* subu */, Cpu0::SUBu, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
-  { 220 /* swi */, Cpu0::SWI, Convert__Imm1_0, 0, { MCK_Imm }, },
-  { 224 /* xor */, Cpu0::XOR, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
-  { 228 /* xori */, Cpu0::XORi, Convert__Reg1_0__Reg1_1__Imm1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
+  { 24 /* beq */, Cpu0::BEQ, Convert__Reg1_0__Reg1_1__Imm1_2, Feature_HasCpu032II, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
+  { 28 /* bne */, Cpu0::BNE, Convert__Reg1_0__Reg1_1__Imm1_2, Feature_HasCpu032II, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
+  { 32 /* cmp */, Cpu0::CMP, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_NotCpu032II, { MCK_SR, MCK_CPURegs, MCK_CPURegs }, },
+  { 36 /* div */, Cpu0::SDIV, Convert__Reg1_0__Reg1_1, 0, { MCK_CPURegs, MCK_CPURegs }, },
+  { 40 /* divu */, Cpu0::UDIV, Convert__Reg1_0__Reg1_1, 0, { MCK_CPURegs, MCK_CPURegs }, },
+  { 45 /* iret */, Cpu0::IRET, Convert__Reg1_0, 0, { MCK_CPURegs }, },
+  { 50 /* jalr */, Cpu0::JALR, Convert__Reg1_0, 0, { MCK_CPURegs }, },
+  { 55 /* jeq */, Cpu0::JEQ, Convert__Reg1_0__Imm1_1, Feature_NotCpu032II, { MCK_SR, MCK_Imm }, },
+  { 59 /* jge */, Cpu0::JGE, Convert__Reg1_0__Imm1_1, Feature_NotCpu032II, { MCK_SR, MCK_Imm }, },
+  { 63 /* jgt */, Cpu0::JGT, Convert__Reg1_0__Imm1_1, Feature_NotCpu032II, { MCK_SR, MCK_Imm }, },
+  { 67 /* jle */, Cpu0::JLE, Convert__Reg1_0__Imm1_1, Feature_NotCpu032II, { MCK_SR, MCK_Imm }, },
+  { 71 /* jlt */, Cpu0::JLT, Convert__Reg1_0__Imm1_1, Feature_NotCpu032II, { MCK_SR, MCK_Imm }, },
+  { 75 /* jmp */, Cpu0::JMP, Convert__Imm1_0, 0, { MCK_Imm }, },
+  { 79 /* jne */, Cpu0::JNE, Convert__Reg1_0__Imm1_1, Feature_NotCpu032II, { MCK_SR, MCK_Imm }, },
+  { 83 /* jsub */, Cpu0::JSUB, Convert__Imm1_0, 0, { MCK_Imm }, },
+  { 88 /* la */, Cpu0::LoadAddr32Reg, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
+  { 88 /* la */, Cpu0::LoadAddr32Imm, Convert__Reg1_0__Imm1_1, 0, { MCK_CPURegs, MCK_Imm }, },
+  { 91 /* lb */, Cpu0::LB, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
+  { 94 /* lbu */, Cpu0::LBu, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
+  { 98 /* ld */, Cpu0::LD, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
+  { 101 /* lh */, Cpu0::LH, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
+  { 104 /* lhu */, Cpu0::LHu, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
+  { 108 /* li */, Cpu0::LoadImm32Reg, Convert__Reg1_0__Imm1_1, 0, { MCK_CPURegs, MCK_Imm }, },
+  { 111 /* lui */, Cpu0::LUi, Convert__Reg1_0__Imm1_1, 0, { MCK_CPURegs, MCK_Imm }, },
+  { 115 /* mfhi */, Cpu0::MFHI, Convert__Reg1_0, 0, { MCK_CPURegs }, },
+  { 120 /* mflo */, Cpu0::MFLO, Convert__Reg1_0, 0, { MCK_CPURegs }, },
+  { 125 /* mfsw */, Cpu0::MFSW, Convert__Reg1_0, 0, { MCK_CPURegs }, },
+  { 130 /* movn */, Cpu0::MOVN_I_I, Convert__Reg1_0__Reg1_1__Reg1_2__Tie0, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
+  { 135 /* movz */, Cpu0::MOVZ_I_I, Convert__Reg1_0__Reg1_1__Reg1_2__Tie0, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
+  { 140 /* mthi */, Cpu0::MTHI, Convert__Reg1_0, 0, { MCK_CPURegs }, },
+  { 145 /* mtlo */, Cpu0::MTLO, Convert__Reg1_0, 0, { MCK_CPURegs }, },
+  { 150 /* mtsw */, Cpu0::MTSW, Convert__Reg1_0, 0, { MCK_CPURegs }, },
+  { 155 /* mul */, Cpu0::MUL, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_GPROut, MCK_CPURegs, MCK_CPURegs }, },
+  { 159 /* mult */, Cpu0::MULT, Convert__Reg1_0__Reg1_1, 0, { MCK_CPURegs, MCK_CPURegs }, },
+  { 164 /* multu */, Cpu0::MULTu, Convert__Reg1_0__Reg1_1, 0, { MCK_CPURegs, MCK_CPURegs }, },
+  { 170 /* nop */, Cpu0::NOP, Convert_NoOperands, 0, {  }, },
+  { 174 /* or */, Cpu0::OR, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
+  { 177 /* ori */, Cpu0::ORi, Convert__Reg1_0__Reg1_1__Imm1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
+  { 181 /* ret */, Cpu0::JR, Convert__Reg1_0, 0, { MCK_GPROut }, },
+  { 185 /* rol */, Cpu0::ROL, Convert__Reg1_0__Reg1_1__Imm1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
+  { 189 /* ror */, Cpu0::ROR, Convert__Reg1_0__Reg1_1__Imm1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
+  { 193 /* sb */, Cpu0::SB, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
+  { 196 /* sh */, Cpu0::SH, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
+  { 199 /* shl */, Cpu0::SHL, Convert__Reg1_0__Reg1_1__Imm1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
+  { 203 /* shlv */, Cpu0::SHLV, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
+  { 208 /* shr */, Cpu0::SHR, Convert__Reg1_0__Reg1_1__Imm1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
+  { 212 /* shrv */, Cpu0::SHRV, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
+  { 217 /* slt */, Cpu0::SLT, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_HasCpu032II, { MCK_GPROut, MCK_CPURegs, MCK_CPURegs }, },
+  { 221 /* slti */, Cpu0::SLTi, Convert__Reg1_0__Reg1_1__Imm1_2, Feature_HasCpu032II, { MCK_GPROut, MCK_CPURegs, MCK_Imm }, },
+  { 226 /* sltiu */, Cpu0::SLTiu, Convert__Reg1_0__Reg1_1__Imm1_2, Feature_HasCpu032II, { MCK_GPROut, MCK_CPURegs, MCK_Imm }, },
+  { 232 /* sltu */, Cpu0::SLTu, Convert__Reg1_0__Reg1_1__Reg1_2, Feature_HasCpu032II, { MCK_GPROut, MCK_CPURegs, MCK_CPURegs }, },
+  { 237 /* sra */, Cpu0::SRA, Convert__Reg1_0__Reg1_1__Imm1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
+  { 241 /* srav */, Cpu0::SRAV, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
+  { 246 /* st */, Cpu0::ST, Convert__Reg1_0__Mem2_1, 0, { MCK_CPURegs, MCK_Mem }, },
+  { 249 /* sub */, Cpu0::SUB, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
+  { 253 /* subu */, Cpu0::SUBu, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
+  { 258 /* swi */, Cpu0::SWI, Convert__Imm1_0, 0, { MCK_Imm }, },
+  { 262 /* xor */, Cpu0::XOR, Convert__Reg1_0__Reg1_1__Reg1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_CPURegs }, },
+  { 266 /* xori */, Cpu0::XORi, Convert__Reg1_0__Reg1_1__Imm1_2, 0, { MCK_CPURegs, MCK_CPURegs, MCK_Imm }, },
 };
 
+// lbd document - mark - MatchInstructionImpl_R
 unsigned Cpu0AsmParser::
 MatchInstructionImpl_R(const SmallVectorImpl<MCParsedAsmOperand*> &Operands,
                      MCInst &Inst,
diff -Naur Chapter12_2/Cpu0CondMov.td Chapter12_3/Cpu0CondMov.td
--- Chapter12_2/Cpu0CondMov.td	1970-01-01 08:00:00.000000000 +0800
+++ Chapter12_3/Cpu0CondMov.td	2014-02-21 17:55:13.314150213 +0800
@@ -0,0 +1,77 @@
+//===-- Cpu0CondMov.td - Describe Cpu0 Conditional Moves --*- tablegen -*--===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This is the Conditional Moves implementation.
+//
+//===----------------------------------------------------------------------===//
+
+// Conditional moves:
+// These instructions are expanded in
+// Cpu0ISelLowering::EmitInstrWithCustomInserter if target does not have
+// conditional move instructions.
+// cond:int, data:int
+class CondMovIntInt<RegisterClass CRC, RegisterClass DRC, bits<8> op,
+                    string instr_asm> :
+  FA<op, (outs DRC:$ra), (ins DRC:$rb, CRC:$rc, DRC:$F),
+     !strconcat(instr_asm, "\t$ra, $rb, $rc"), [], IIAlu> {
+  let shamt = 0;
+  let Constraints = "$F = $ra";
+}
+
+// select patterns
+multiclass MovzPats0Slt<RegisterClass CRC, RegisterClass DRC,
+                     Instruction MOVZInst, Instruction SLTOp,
+                     Instruction SLTuOp, Instruction SLTiOp,
+                     Instruction SLTiuOp> {
+  def : Pat<(select (i32 (setge CRC:$lhs, CRC:$rhs)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, (SLTOp CRC:$lhs, CRC:$rhs), DRC:$F)>;
+  def : Pat<(select (i32 (setuge CRC:$lhs, CRC:$rhs)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, (SLTuOp CRC:$lhs, CRC:$rhs), DRC:$F)>;
+  def : Pat<(select (i32 (setge CRC:$lhs, immSExt16:$rhs)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, (SLTiOp CRC:$lhs, immSExt16:$rhs), DRC:$F)>;
+  def : Pat<(select (i32 (setuge CRC:$lh, immSExt16:$rh)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, (SLTiuOp CRC:$lh, immSExt16:$rh), DRC:$F)>;
+  def : Pat<(select (i32 (setle CRC:$lhs, CRC:$rhs)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, (SLTOp CRC:$rhs, CRC:$lhs), DRC:$F)>;
+  def : Pat<(select (i32 (setule CRC:$lhs, CRC:$rhs)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, (SLTuOp CRC:$rhs, CRC:$lhs), DRC:$F)>;
+}
+
+multiclass MovzPats1<RegisterClass CRC, RegisterClass DRC,
+                     Instruction MOVZInst, Instruction XOROp> {
+  def : Pat<(select (i32 (seteq CRC:$lhs, CRC:$rhs)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, (XOROp CRC:$lhs, CRC:$rhs), DRC:$F)>;
+  def : Pat<(select (i32 (seteq CRC:$lhs, 0)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, CRC:$lhs, DRC:$F)>;
+}
+
+multiclass MovnPats<RegisterClass CRC, RegisterClass DRC, Instruction MOVNInst,
+                    Instruction XOROp> {
+  def : Pat<(select (i32 (setne CRC:$lhs, CRC:$rhs)), DRC:$T, DRC:$F),
+            (MOVNInst DRC:$T, (XOROp CRC:$lhs, CRC:$rhs), DRC:$F)>;
+  def : Pat<(select CRC:$cond, DRC:$T, DRC:$F),
+            (MOVNInst DRC:$T, CRC:$cond, DRC:$F)>;
+  def : Pat<(select (i32 (setne CRC:$lhs, 0)),DRC:$T, DRC:$F),
+            (MOVNInst DRC:$T, CRC:$lhs, DRC:$F)>;
+}
+
+// Instantiation of instructions.
+def MOVZ_I_I     : CondMovIntInt<CPURegs, CPURegs, 0x0a, "movz">;
+
+def MOVN_I_I     : CondMovIntInt<CPURegs, CPURegs, 0x0b, "movn">;
+
+// Instantiation of conditional move patterns.
+let Predicates = [HasCpu032II] in {
+defm : MovzPats0Slt<CPURegs, CPURegs, MOVZ_I_I, SLT, SLTu, SLTi, SLTiu>;
+}
+
+defm : MovzPats1<CPURegs, CPURegs, MOVZ_I_I, XOR>;
+
+defm : MovnPats<CPURegs, CPURegs, MOVN_I_I, XOR>;
+
diff -Naur Chapter12_2/Cpu0InstrInfo.td Chapter12_3/Cpu0InstrInfo.td
--- Chapter12_2/Cpu0InstrInfo.td	2014-02-21 17:55:13.314150213 +0800
+++ Chapter12_3/Cpu0InstrInfo.td	2014-02-21 17:55:13.314150213 +0800
@@ -871,3 +871,6 @@
 defm : SetgePatsSlt<CPURegs, SLT, SLTu>;
 defm : SetgeImmPatsSlt<CPURegs, SLTi, SLTiu>;
 }
+
+include "Cpu0CondMov.td"
+
diff -Naur Chapter12_2/Cpu0ISelLowering.cpp Chapter12_3/Cpu0ISelLowering.cpp
--- Chapter12_2/Cpu0ISelLowering.cpp	2014-02-21 17:55:13.314150213 +0800
+++ Chapter12_3/Cpu0ISelLowering.cpp	2014-02-21 17:55:13.314150213 +0800
@@ -141,6 +141,7 @@
 
   // Cpu0 Custom Operations
   setOperationAction(ISD::GlobalAddress,      MVT::i32,   Custom);
+  setOperationAction(ISD::SELECT,             MVT::i32,   Custom);
   setOperationAction(ISD::BRCOND,             MVT::Other, Custom);
   setOperationAction(ISD::VASTART,            MVT::Other, Custom);
 
@@ -154,6 +155,7 @@
 
   // Operations not directly supported by Cpu0.
   setOperationAction(ISD::BR_CC,             MVT::i32, Expand);
+  setOperationAction(ISD::SELECT_CC,         MVT::Other, Expand);
   setOperationAction(ISD::DYNAMIC_STACKALLOC, MVT::i32,  Expand);
 
   // Support va_arg(): variable numbers (not fixed numbers) of arguments 
@@ -236,6 +238,7 @@
   {
     case ISD::BRCOND:             return LowerBRCOND(Op, DAG);
     case ISD::GlobalAddress:      return LowerGlobalAddress(Op, DAG);
+    case ISD::SELECT:             return lowerSELECT(Op, DAG);
     case ISD::VASTART:            return LowerVASTART(Op, DAG);
   }
   return SDValue();
@@ -266,6 +269,12 @@
   return Op;
 }
 
+SDValue Cpu0TargetLowering::
+lowerSELECT(SDValue Op, SelectionDAG &DAG) const
+{
+  return Op;
+} // lbd document - mark - lowerSELECT
+
 SDValue Cpu0TargetLowering::LowerGlobalAddress(SDValue Op,
                                                SelectionDAG &DAG) const {
   // FIXME there isn't actually debug info here
diff -Naur Chapter12_2/Cpu0ISelLowering.h Chapter12_3/Cpu0ISelLowering.h
--- Chapter12_2/Cpu0ISelLowering.h	2014-02-21 17:55:13.314150213 +0800
+++ Chapter12_3/Cpu0ISelLowering.h	2014-02-21 17:55:13.314150213 +0800
@@ -95,6 +95,7 @@
 
     // Lower Operand specifics
     SDValue LowerBRCOND(SDValue Op, SelectionDAG &DAG) const;
+    SDValue lowerSELECT(SDValue Op, SelectionDAG &DAG) const;
     SDValue LowerGlobalAddress(SDValue Op, SelectionDAG &DAG) const;
     SDValue LowerVASTART(SDValue Op, SelectionDAG &DAG) const;
 
