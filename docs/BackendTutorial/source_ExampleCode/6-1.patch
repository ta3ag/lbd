diff -Naur Chapter5_1/CMakeLists.txt Chapter6_1/CMakeLists.txt
--- Chapter5_1/CMakeLists.txt	2013-12-27 15:52:01.071977141 +0800
+++ Chapter6_1/CMakeLists.txt	2013-12-27 15:52:01.120977139 +0800
@@ -30,6 +30,7 @@
   Cpu0ISelLowering.cpp
   Cpu0FrameLowering.cpp
   Cpu0MCInstLower.cpp
+  Cpu0MachineFunction.cpp
   Cpu0RegisterInfo.cpp
   Cpu0Subtarget.cpp
   Cpu0TargetMachine.cpp
diff -Naur Chapter5_1/Cpu0AsmPrinter.cpp Chapter6_1/Cpu0AsmPrinter.cpp
--- Chapter5_1/Cpu0AsmPrinter.cpp	2013-12-27 15:52:01.072977141 +0800
+++ Chapter6_1/Cpu0AsmPrinter.cpp	2013-12-27 15:52:01.127977139 +0800
@@ -185,6 +185,11 @@
   MCInstLowering.Initialize(&MF->getContext());
 
   emitFrameDirective();
+  bool EmitCPLoad = (MF->getTarget().getRelocationModel() == Reloc::PIC_) &&
+    Cpu0FI->globalBaseRegSet() &&
+    Cpu0FI->globalBaseRegFixed();
+  if (Cpu0NoCpload)
+    EmitCPLoad = false;
 
   if (OutStreamer.hasRawTextSupport()) {
     SmallString<128> Str;
@@ -192,9 +197,19 @@
     printSavedRegsBitmask(OS);
     OutStreamer.EmitRawText(OS.str());
     OutStreamer.EmitRawText(StringRef("\t.set\tnoreorder"));
+    // Emit .cpload directive if needed.
+    if (EmitCPLoad)
+      OutStreamer.EmitRawText(StringRef("\t.cpload\t$t9"));
     OutStreamer.EmitRawText(StringRef("\t.set\tnomacro"));
     if (Cpu0FI->getEmitNOAT())
-      OutStreamer.EmitRawText(StringRef("\t.set\tat"));
+      OutStreamer.EmitRawText(StringRef("\t.set\tnoat"));
+  } else if (EmitCPLoad) {
+    SmallVector<MCInst, 4> MCInsts;
+    MCInstLowering.LowerCPLOAD(MCInsts);
+    for (SmallVector<MCInst, 4>::iterator I = MCInsts.begin();
+       I != MCInsts.end(); ++I)
+      OutStreamer.EmitInstruction(*I);
+    // lbd document - mark - EmitInstruction(*I)
   }
 }
 
diff -Naur Chapter5_1/Cpu0InstrInfo.td Chapter6_1/Cpu0InstrInfo.td
--- Chapter5_1/Cpu0InstrInfo.td	2013-12-27 15:52:01.072977141 +0800
+++ Chapter6_1/Cpu0InstrInfo.td	2013-12-27 15:52:01.120977139 +0800
@@ -26,6 +26,13 @@
                                          [SDTCisInt<0>,
                                           SDTCisSameAs<0, 1>]>;
 
+// Hi and Lo nodes are used to handle global addresses. Used on
+// Cpu0ISelLowering to lower stuff like GlobalAddress, ExternalSymbol
+// static model. (nothing to do with Cpu0 Registers Hi and Lo)
+def Cpu0Hi    : SDNode<"Cpu0ISD::Hi", SDTIntUnaryOp>;
+def Cpu0Lo    : SDNode<"Cpu0ISD::Lo", SDTIntUnaryOp>;
+def Cpu0GPRel : SDNode<"Cpu0ISD::GPRel", SDTIntUnaryOp>;
+
 // Return
 def Cpu0Ret : SDNode<"Cpu0ISD::Ret", SDTNone,
                      [SDNPHasChain, SDNPOptInGlue, SDNPVariadic]>;
@@ -37,6 +44,11 @@
                            [SDNPOutGlue]>;
 
 //===----------------------------------------------------------------------===//
+// Cpu0 Instruction Predicate Definitions.
+//===----------------------------------------------------------------------===//
+def RelocPIC    :     Predicate<"TM.getRelocationModel() == Reloc::PIC_">;
+
+//===----------------------------------------------------------------------===//
 // Cpu0 Operand, Complex Patterns and Transformations Definitions.
 //===----------------------------------------------------------------------===//
 
@@ -390,6 +402,17 @@
 def : Pat<(i32 imm:$imm),
           (ORi (LUi (HI16 imm:$imm)), (LO16 imm:$imm))>;
 
+// hi/lo relocs
+def : Pat<(Cpu0Hi tglobaladdr:$in), (SHL (ADDiu ZERO, tglobaladdr:$in), 16)>;
+def : Pat<(Cpu0Hi tglobaladdr:$in), (LUi tglobaladdr:$in)>;
+
+def : Pat<(add CPURegs:$hi, (Cpu0Lo tglobaladdr:$lo)),
+          (ADDiu CPURegs:$hi, tglobaladdr:$lo)>;
+
+// gp_rel relocs
+def : Pat<(add CPURegs:$gp, (Cpu0GPRel tglobaladdr:$in)),
+          (ADDiu CPURegs:$gp, tglobaladdr:$in)>;
+
 def : Pat<(not CPURegs:$in),
 // 1: in == 0; 0: in != 0
           (XORi CPURegs:$in, 1)>;
diff -Naur Chapter5_1/Cpu0ISelDAGToDAG.cpp Chapter6_1/Cpu0ISelDAGToDAG.cpp
--- Chapter5_1/Cpu0ISelDAGToDAG.cpp	2013-12-27 15:52:01.070977141 +0800
+++ Chapter6_1/Cpu0ISelDAGToDAG.cpp	2013-12-27 15:52:01.104977139 +0800
@@ -13,6 +13,7 @@
 
 #define DEBUG_TYPE "cpu0-isel"
 #include "Cpu0.h"
+#include "Cpu0MachineFunction.h"
 #include "Cpu0RegisterInfo.h"
 #include "Cpu0Subtarget.h"
 #include "Cpu0TargetMachine.h"
@@ -94,6 +95,7 @@
   inline SDValue getImm(const SDNode *Node, unsigned Imm) {
     return CurDAG->getTargetConstant(Imm, Node->getValueType(0));
   }
+  void InitGlobalBaseReg(MachineFunction &MF);
 };
 }
 
@@ -103,6 +105,13 @@
   return Ret;
 }
 
+/// getGlobalBaseReg - Output the instructions required to put the
+/// GOT address into a register.
+SDNode *Cpu0DAGToDAGISel::getGlobalBaseReg() {
+  unsigned GlobalBaseReg = MF->getInfo<Cpu0FunctionInfo>()->getGlobalBaseReg();
+  return CurDAG->getRegister(GlobalBaseReg, getTargetLowering()->getPointerTy()).getNode();
+} // lbd document - mark - getGlobalBaseReg()
+
 /// ComplexPattern used on Cpu0InstrInfo
 /// Used on Cpu0 Load/Store instructions
 bool Cpu0DAGToDAGISel::
@@ -131,6 +140,19 @@
     return true;
   }
 
+  // on PIC code Load GA
+  if (Addr.getOpcode() == Cpu0ISD::Wrapper) {
+    Base   = Addr.getOperand(0);
+    Offset = Addr.getOperand(1);
+    return true;
+  }
+
+  if (TM.getRelocationModel() != Reloc::PIC_) {
+    if ((Addr.getOpcode() == ISD::TargetExternalSymbol ||
+        Addr.getOpcode() == ISD::TargetGlobalAddress))
+      return false;
+  }
+
   Base   = Addr;
   Offset = CurDAG->getTargetConstant(0, ValTy);
   return true;
@@ -188,6 +210,16 @@
     return SelectMULT(Node, MultOpc, DL, NodeTy, false, true).second;
   }
 
+  // Get target GOT address.
+  // For global variables as follows,
+  //- @gI = global i32 100, align 4
+  //- %2 = load i32* @gI, align 4
+  // =>
+  //- .cpload	$gp
+  //- ld	$2, %got(gI)($gp)
+  case ISD::GLOBAL_OFFSET_TABLE:
+    return getGlobalBaseReg();
+
   case ISD::Constant: {
     const ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Node);
     unsigned Size = CN->getValueSizeInBits(0);
diff -Naur Chapter5_1/Cpu0ISelLowering.cpp Chapter6_1/Cpu0ISelLowering.cpp
--- Chapter5_1/Cpu0ISelLowering.cpp	2013-12-27 15:52:01.070977141 +0800
+++ Chapter6_1/Cpu0ISelLowering.cpp	2013-12-27 15:52:01.104977139 +0800
@@ -14,9 +14,11 @@
 
 #define DEBUG_TYPE "cpu0-lower"
 #include "Cpu0ISelLowering.h"
+#include "Cpu0MachineFunction.h"
 #include "Cpu0TargetMachine.h"
 #include "Cpu0TargetObjectFile.h"
 #include "Cpu0Subtarget.h"
+#include "MCTargetDesc/Cpu0BaseInfo.h"
 #include "llvm/IR/DerivedTypes.h"
 #include "llvm/IR/Function.h"
 #include "llvm/IR/GlobalVariable.h"
@@ -29,12 +31,89 @@
 #include "llvm/CodeGen/MachineRegisterInfo.h"
 #include "llvm/CodeGen/SelectionDAGISel.h"
 #include "llvm/CodeGen/ValueTypes.h"
+#include "llvm/Support/CommandLine.h"
 #include "llvm/Support/Debug.h"
 #include "llvm/Support/ErrorHandling.h"
 #include "llvm/Support/raw_ostream.h"
 
 using namespace llvm;
 
+SDValue Cpu0TargetLowering::getGlobalReg(SelectionDAG &DAG, EVT Ty) const {
+  Cpu0FunctionInfo *FI = DAG.getMachineFunction().getInfo<Cpu0FunctionInfo>();
+  return DAG.getRegister(FI->getGlobalBaseReg(), Ty);
+}
+
+static SDValue getTargetNode(SDValue Op, SelectionDAG &DAG, unsigned Flag) {
+  EVT Ty = Op.getValueType();
+
+  if (GlobalAddressSDNode *N = dyn_cast<GlobalAddressSDNode>(Op))
+    return DAG.getTargetGlobalAddress(N->getGlobal(), SDLoc(Op), Ty, 0,
+                                      Flag);
+  if (ExternalSymbolSDNode *N = dyn_cast<ExternalSymbolSDNode>(Op))
+    return DAG.getTargetExternalSymbol(N->getSymbol(), Ty, Flag);
+  if (BlockAddressSDNode *N = dyn_cast<BlockAddressSDNode>(Op))
+    return DAG.getTargetBlockAddress(N->getBlockAddress(), Ty, 0, Flag);
+  if (JumpTableSDNode *N = dyn_cast<JumpTableSDNode>(Op))
+    return DAG.getTargetJumpTable(N->getIndex(), Ty, Flag);
+  if (ConstantPoolSDNode *N = dyn_cast<ConstantPoolSDNode>(Op))
+    return DAG.getTargetConstantPool(N->getConstVal(), Ty, N->getAlignment(),
+                                     N->getOffset(), Flag);
+
+  llvm_unreachable("Unexpected node type.");
+  return SDValue();
+}
+
+SDValue Cpu0TargetLowering::getAddrLocal(SDValue Op, SelectionDAG &DAG) const {
+  SDLoc DL = SDLoc(Op);
+  EVT Ty = Op.getValueType();
+  unsigned GOTFlag = Cpu0II::MO_GOT;
+  SDValue GOT = DAG.getNode(Cpu0ISD::Wrapper, DL, Ty, getGlobalReg(DAG, Ty),
+                            getTargetNode(Op, DAG, GOTFlag));
+  SDValue Load = DAG.getLoad(Ty, DL, DAG.getEntryNode(), GOT,
+                             MachinePointerInfo::getGOT(), false, false, false,
+                             0);
+  unsigned LoFlag = Cpu0II::MO_ABS_LO;
+  SDValue Lo = DAG.getNode(Cpu0ISD::Lo, DL, Ty, getTargetNode(Op, DAG, LoFlag));
+  return DAG.getNode(ISD::ADD, DL, Ty, Load, Lo);
+}
+
+SDValue Cpu0TargetLowering::getAddrGlobal(SDValue Op, SelectionDAG &DAG,
+                                          unsigned Flag) const {
+  SDLoc DL = SDLoc(Op);
+  EVT Ty = Op.getValueType();
+  SDValue Tgt = DAG.getNode(Cpu0ISD::Wrapper, DL, Ty, getGlobalReg(DAG, Ty),
+                            getTargetNode(Op, DAG, Flag));
+  return DAG.getLoad(Ty, DL, DAG.getEntryNode(), Tgt,
+                     MachinePointerInfo::getGOT(), false, false, false, 0);
+}
+
+SDValue Cpu0TargetLowering::getAddrGlobalLargeGOT(SDValue Op, SelectionDAG &DAG,
+                                                  unsigned HiFlag,
+                                                  unsigned LoFlag) const {
+  SDLoc DL = SDLoc(Op);
+  EVT Ty = Op.getValueType();
+  SDValue Hi = DAG.getNode(Cpu0ISD::Hi, DL, Ty, getTargetNode(Op, DAG, HiFlag));
+  Hi = DAG.getNode(ISD::ADD, DL, Ty, Hi, getGlobalReg(DAG, Ty));
+  SDValue Wrapper = DAG.getNode(Cpu0ISD::Wrapper, DL, Ty, Hi,
+                                getTargetNode(Op, DAG, LoFlag));
+  return DAG.getLoad(Ty, DL, DAG.getEntryNode(), Wrapper,
+                     MachinePointerInfo::getGOT(), false, false, false, 0);
+}
+
+const char *Cpu0TargetLowering::getTargetNodeName(unsigned Opcode) const {
+  switch (Opcode) {
+  case Cpu0ISD::JmpLink:           return "Cpu0ISD::JmpLink";
+  case Cpu0ISD::Hi:                return "Cpu0ISD::Hi";
+  case Cpu0ISD::Lo:                return "Cpu0ISD::Lo";
+  case Cpu0ISD::GPRel:             return "Cpu0ISD::GPRel";
+  case Cpu0ISD::Ret:               return "Cpu0ISD::Ret";
+  case Cpu0ISD::DivRem:            return "Cpu0ISD::DivRem";
+  case Cpu0ISD::DivRemU:           return "Cpu0ISD::DivRemU";
+  case Cpu0ISD::Wrapper:           return "Cpu0ISD::Wrapper";
+  default:                         return NULL;
+  }
+} // lbd document - mark - getTargetNodeName
+
 Cpu0TargetLowering::
 Cpu0TargetLowering(Cpu0TargetMachine &TM)
   : TargetLowering(TM, new Cpu0TargetObjectFile()),
@@ -43,6 +122,9 @@
   // Set up the register classes
   addRegisterClass(MVT::i32, &Cpu0::CPURegsRegClass);
 
+  // Cpu0 Custom Operations
+  setOperationAction(ISD::GlobalAddress,      MVT::i32,   Custom);
+
   // Cpu0 doesn't have sext_inreg, replace them with shl/sra.
   setOperationAction(ISD::SIGN_EXTEND_INREG, MVT::i1 , Expand);
 
@@ -115,6 +197,63 @@
   return SDValue();
 }
 
+SDValue Cpu0TargetLowering::
+LowerOperation(SDValue Op, SelectionDAG &DAG) const
+{
+  switch (Op.getOpcode())
+  {
+    case ISD::GlobalAddress:      return LowerGlobalAddress(Op, DAG);
+  }
+  return SDValue();
+}
+
+//===----------------------------------------------------------------------===//
+//  Lower helper functions
+//===----------------------------------------------------------------------===//
+
+//===----------------------------------------------------------------------===//
+//  Misc Lower Operation implementation
+//===----------------------------------------------------------------------===//
+
+SDValue Cpu0TargetLowering::LowerGlobalAddress(SDValue Op,
+                                               SelectionDAG &DAG) const {
+  // FIXME there isn't actually debug info here
+  SDLoc DL = SDLoc(Op);
+  const GlobalValue *GV = cast<GlobalAddressSDNode>(Op)->getGlobal();
+
+  Cpu0TargetObjectFile &TLOF = (Cpu0TargetObjectFile&)getObjFileLowering();
+
+  if (getTargetMachine().getRelocationModel() != Reloc::PIC_) {
+    SDVTList VTs = DAG.getVTList(MVT::i32);
+
+    // %gp_rel relocation
+    if (TLOF.IsGlobalInSmallSection(GV, getTargetMachine())) {
+      SDValue GA = DAG.getTargetGlobalAddress(GV, DL, MVT::i32, 0,
+                                              Cpu0II::MO_GPREL);
+      SDValue GPRelNode = DAG.getNode(Cpu0ISD::GPRel, DL, VTs, &GA, 1);
+      SDValue GOT = DAG.getGLOBAL_OFFSET_TABLE(MVT::i32);
+      return DAG.getNode(ISD::ADD, DL, MVT::i32, GOT, GPRelNode);
+    }
+    // %hi/%lo relocation
+    SDValue GAHi = DAG.getTargetGlobalAddress(GV, DL, MVT::i32, 0,
+                                              Cpu0II::MO_ABS_HI);
+    SDValue GALo = DAG.getTargetGlobalAddress(GV, DL, MVT::i32, 0,
+                                              Cpu0II::MO_ABS_LO);
+    SDValue HiPart = DAG.getNode(Cpu0ISD::Hi, DL, VTs, &GAHi, 1);
+    SDValue Lo = DAG.getNode(Cpu0ISD::Lo, DL, MVT::i32, GALo);
+    return DAG.getNode(ISD::ADD, DL, MVT::i32, HiPart, Lo);
+  }
+
+  if (GV->hasInternalLinkage() || (GV->hasLocalLinkage() && !isa<Function>(GV)))
+    return getAddrLocal(Op, DAG);
+
+  if (TLOF.IsGlobalInSmallSection(GV, getTargetMachine()))
+    return getAddrGlobal(Op, DAG, Cpu0II::MO_GOT16);
+  else
+    return getAddrGlobalLargeGOT(Op, DAG, Cpu0II::MO_GOT_HI16,
+                                 Cpu0II::MO_GOT_LO16);
+}
+
 #include "Cpu0GenCallingConv.inc"
 
 /// LowerFormalArguments - transform physical registers into virtual registers
diff -Naur Chapter5_1/Cpu0ISelLowering.h Chapter6_1/Cpu0ISelLowering.h
--- Chapter5_1/Cpu0ISelLowering.h	2013-12-27 15:52:01.072977141 +0800
+++ Chapter6_1/Cpu0ISelLowering.h	2013-12-27 15:52:01.120977139 +0800
@@ -25,10 +25,32 @@
     enum NodeType {
       // Start the numbering from where ISD NodeType finishes.
       FIRST_NUMBER = ISD::BUILTIN_OP_END,
+
+      // Jump and link (call)
+      JmpLink,
+
+      // Get the Higher 16 bits from a 32-bit immediate
+      // No relation with Cpu0 Hi register
+      Hi,
+      // Get the Lower 16 bits from a 32-bit immediate
+      // No relation with Cpu0 Lo register
+      Lo,
+
+      // Handle gp_rel (small data/bss sections) relocation.
+      GPRel,
+
+      // Thread Pointer
+      ThreadPointer,
+      // Return
       Ret,
+
       // DivRem(u)
       DivRem,
-      DivRemU
+      DivRemU,
+
+      Wrapper,
+      DynAlloc,
+      Sync
     };
   }
 
@@ -40,12 +62,33 @@
   public:
     explicit Cpu0TargetLowering(Cpu0TargetMachine &TM);
 
+    virtual MVT getShiftAmountTy(EVT LHSTy) const { return MVT::i32; }
+    /// LowerOperation - Provide custom lowering hooks for some operations.
+    virtual SDValue LowerOperation(SDValue Op, SelectionDAG &DAG) const;
+
+    /// getTargetNodeName - This method returns the name of a target specific
+    //  DAG node.
+    virtual const char *getTargetNodeName(unsigned Opcode) const;
+
     virtual SDValue PerformDAGCombine(SDNode *N, DAGCombinerInfo &DCI) const;
 
+  protected:
+    SDValue getGlobalReg(SelectionDAG &DAG, EVT Ty) const;
+
+    SDValue getAddrLocal(SDValue Op, SelectionDAG &DAG) const;
+
+    SDValue getAddrGlobal(SDValue Op, SelectionDAG &DAG, unsigned Flag) const;
+
+    SDValue getAddrGlobalLargeGOT(SDValue Op, SelectionDAG &DAG,
+                                  unsigned HiFlag, unsigned LoFlag) const;
+
   private:
     // Subtarget Info
     const Cpu0Subtarget *Subtarget;
 
+    // Lower Operand specifics
+    SDValue LowerGlobalAddress(SDValue Op, SelectionDAG &DAG) const;
+
 	//- must be exist without function all
     virtual SDValue
       LowerFormalArguments(SDValue Chain,
diff -Naur Chapter5_1/Cpu0MachineFunction.cpp Chapter6_1/Cpu0MachineFunction.cpp
--- Chapter5_1/Cpu0MachineFunction.cpp	1970-01-01 08:00:00.000000000 +0800
+++ Chapter6_1/Cpu0MachineFunction.cpp	2013-12-27 15:52:01.112977139 +0800
@@ -0,0 +1,44 @@
+//===-- Cpu0MachineFunctionInfo.cpp - Private data used for Cpu0 ----------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+
+#include "Cpu0MachineFunction.h"
+#include "Cpu0InstrInfo.h"
+#include "Cpu0Subtarget.h"
+#include "MCTargetDesc/Cpu0BaseInfo.h"
+#include "llvm/IR/Function.h"
+#include "llvm/CodeGen/MachineInstrBuilder.h"
+#include "llvm/CodeGen/MachineRegisterInfo.h"
+
+using namespace llvm;
+
+bool FixGlobalBaseReg = true;
+
+bool Cpu0FunctionInfo::globalBaseRegFixed() const {
+  return FixGlobalBaseReg;
+}
+
+bool Cpu0FunctionInfo::globalBaseRegSet() const {
+  return GlobalBaseReg;
+}
+
+unsigned Cpu0FunctionInfo::getGlobalBaseReg() {
+  // Return if it has already been initialized.
+  if (GlobalBaseReg)
+    return GlobalBaseReg;
+
+  if (FixGlobalBaseReg) // $gp is the global base register.
+    return GlobalBaseReg = Cpu0::GP;
+
+  const TargetRegisterClass *RC;
+  RC = (const TargetRegisterClass*)&Cpu0::CPURegsRegClass;
+
+  return GlobalBaseReg = MF.getRegInfo().createVirtualRegister(RC);
+}
+
+void Cpu0FunctionInfo::anchor() { }
diff -Naur Chapter5_1/Cpu0MachineFunction.h Chapter6_1/Cpu0MachineFunction.h
--- Chapter5_1/Cpu0MachineFunction.h	2013-12-27 15:52:01.072977141 +0800
+++ Chapter6_1/Cpu0MachineFunction.h	2013-12-27 15:52:01.126977139 +0800
@@ -23,17 +23,29 @@
 /// Cpu0FunctionInfo - This class is derived from MachineFunction private
 /// Cpu0 target-specific information for each MachineFunction.
 class Cpu0FunctionInfo : public MachineFunctionInfo {
+  virtual void anchor();
   MachineFunction& MF;
+
+  /// GlobalBaseReg - keeps track of the virtual register initialized for
+  /// use as the global base register. This is used for PIC in some PIC
+  /// relocation models.
+  unsigned GlobalBaseReg;
+  int GPFI; // Index of the frame object for restoring $gp
   unsigned MaxCallFrameSize;
   bool EmitNOAT;
 
 public:
   Cpu0FunctionInfo(MachineFunction& MF)
   : MF(MF), 
+    GlobalBaseReg(0),
     EmitNOAT(false), 
     MaxCallFrameSize(0)
     {}
 
+  bool globalBaseRegFixed() const;
+  bool globalBaseRegSet() const;
+  unsigned getGlobalBaseReg();
+
   unsigned getMaxCallFrameSize() const { return MaxCallFrameSize; }
   void setMaxCallFrameSize(unsigned S) { MaxCallFrameSize = S; }
   bool getEmitNOAT() const { return EmitNOAT; }
diff -Naur Chapter5_1/Cpu0MCInstLower.cpp Chapter6_1/Cpu0MCInstLower.cpp
--- Chapter5_1/Cpu0MCInstLower.cpp	2013-12-27 15:52:01.070977141 +0800
+++ Chapter6_1/Cpu0MCInstLower.cpp	2013-12-27 15:52:01.112977139 +0800
@@ -33,6 +33,85 @@
   Ctx = C;
 } // lbd document - mark - Initialize
 
+MCOperand Cpu0MCInstLower::LowerSymbolOperand(const MachineOperand &MO,
+                                              MachineOperandType MOTy,
+                                              unsigned Offset) const {
+  MCSymbolRefExpr::VariantKind Kind;
+  const MCSymbol *Symbol;
+
+  switch(MO.getTargetFlags()) {
+  default:                   llvm_unreachable("Invalid target flag!");
+  case Cpu0II::MO_NO_FLAG:   Kind = MCSymbolRefExpr::VK_None; break;
+
+// Cpu0_GPREL is for llc -march=cpu0 -relocation-model=static -cpu0-islinux-
+//  format=false (global var in .sdata).
+  case Cpu0II::MO_GPREL:     Kind = MCSymbolRefExpr::VK_Cpu0_GPREL; break;
+
+  case Cpu0II::MO_GOT16:     Kind = MCSymbolRefExpr::VK_Cpu0_GOT16; break;
+  case Cpu0II::MO_GOT:       Kind = MCSymbolRefExpr::VK_Cpu0_GOT; break;
+// ABS_HI and ABS_LO is for llc -march=cpu0 -relocation-model=static (global 
+//  var in .data).
+  case Cpu0II::MO_ABS_HI:    Kind = MCSymbolRefExpr::VK_Cpu0_ABS_HI; break;
+  case Cpu0II::MO_ABS_LO:    Kind = MCSymbolRefExpr::VK_Cpu0_ABS_LO; break;
+  case Cpu0II::MO_GOT_HI16:  Kind = MCSymbolRefExpr::VK_Cpu0_GOT_HI16; break;
+  case Cpu0II::MO_GOT_LO16:  Kind = MCSymbolRefExpr::VK_Cpu0_GOT_LO16; break;
+  }
+
+  switch (MOTy) {
+  case MachineOperand::MO_GlobalAddress:
+    Symbol = AsmPrinter.getSymbol(MO.getGlobal());
+    break;
+
+  default:
+    llvm_unreachable("<unknown operand type>");
+  }
+
+  const MCSymbolRefExpr *MCSym = MCSymbolRefExpr::Create(Symbol, Kind, *Ctx);
+
+  if (!Offset)
+    return MCOperand::CreateExpr(MCSym);
+
+  // Assume offset is never negative.
+  assert(Offset > 0);
+
+  const MCConstantExpr *OffsetExpr =  MCConstantExpr::Create(Offset, *Ctx);
+  const MCBinaryExpr *AddExpr = MCBinaryExpr::CreateAdd(MCSym, OffsetExpr, *Ctx);
+  return MCOperand::CreateExpr(AddExpr);
+} // lbd document - mark - LowerSymbolOperand
+
+static void CreateMCInst(MCInst& Inst, unsigned Opc, const MCOperand& Opnd0,
+                         const MCOperand& Opnd1,
+                         const MCOperand& Opnd2 = MCOperand()) {
+  Inst.setOpcode(Opc);
+  Inst.addOperand(Opnd0);
+  Inst.addOperand(Opnd1);
+  if (Opnd2.isValid())
+    Inst.addOperand(Opnd2);
+}
+
+// Lower ".cpload $reg" to
+//  "lui   $gp, %hi(_gp_disp)"
+//  "addiu $gp, $gp, %lo(_gp_disp)"
+//  "addu  $gp, $gp, $t9"
+void Cpu0MCInstLower::LowerCPLOAD(SmallVector<MCInst, 4>& MCInsts) {
+  MCOperand GPReg = MCOperand::CreateReg(Cpu0::GP);
+  MCOperand T9Reg = MCOperand::CreateReg(Cpu0::T9);
+  StringRef SymName("_gp_disp");
+  const MCSymbol *Sym = Ctx->GetOrCreateSymbol(SymName);
+  const MCSymbolRefExpr *MCSym;
+
+  MCSym = MCSymbolRefExpr::Create(Sym, MCSymbolRefExpr::VK_Cpu0_ABS_HI, *Ctx);
+  MCOperand SymHi = MCOperand::CreateExpr(MCSym);
+  MCSym = MCSymbolRefExpr::Create(Sym, MCSymbolRefExpr::VK_Cpu0_ABS_LO, *Ctx);
+  MCOperand SymLo = MCOperand::CreateExpr(MCSym);
+
+  MCInsts.resize(3);
+
+  CreateMCInst(MCInsts[0], Cpu0::LUi, GPReg, SymHi);
+  CreateMCInst(MCInsts[1], Cpu0::ADDiu, GPReg, GPReg, SymLo);
+  CreateMCInst(MCInsts[2], Cpu0::ADD, GPReg, GPReg, T9Reg);
+} // lbd document - mark - LowerCPLOAD
+
 MCOperand Cpu0MCInstLower::LowerOperand(const MachineOperand& MO,
                                         unsigned offset) const {
   MachineOperandType MOTy = MO.getType();
@@ -45,6 +124,8 @@
     return MCOperand::CreateReg(MO.getReg());
   case MachineOperand::MO_Immediate:
     return MCOperand::CreateImm(MO.getImm() + offset);
+  case MachineOperand::MO_GlobalAddress:
+    return LowerSymbolOperand(MO, MOTy, offset);
   case MachineOperand::MO_RegisterMask:
     break;
  }
diff -Naur Chapter5_1/Cpu0MCInstLower.h Chapter6_1/Cpu0MCInstLower.h
--- Chapter5_1/Cpu0MCInstLower.h	2013-12-27 15:52:01.072977141 +0800
+++ Chapter6_1/Cpu0MCInstLower.h	2013-12-27 15:52:01.127977139 +0800
@@ -31,7 +31,10 @@
   Cpu0MCInstLower(Cpu0AsmPrinter &asmprinter);
   void Initialize(MCContext* C);
   void Lower(const MachineInstr *MI, MCInst &OutMI) const;
+  void LowerCPLOAD(SmallVector<MCInst, 4>& MCInsts);
 private:
+  MCOperand LowerSymbolOperand(const MachineOperand &MO,
+                               MachineOperandType MOTy, unsigned Offset) const;
   MCOperand LowerOperand(const MachineOperand& MO, unsigned offset = 0) const;
 };
 }
diff -Naur Chapter5_1/Cpu0RegisterInfo.cpp Chapter6_1/Cpu0RegisterInfo.cpp
--- Chapter5_1/Cpu0RegisterInfo.cpp	2013-12-27 15:52:01.072977141 +0800
+++ Chapter6_1/Cpu0RegisterInfo.cpp	2013-12-27 15:52:01.127977139 +0800
@@ -77,6 +77,11 @@
   for (unsigned I = 0; I < array_lengthof(ReservedCPURegs); ++I)
     Reserved.set(ReservedCPURegs[I]);
 
+  const Cpu0FunctionInfo *Cpu0FI = MF.getInfo<Cpu0FunctionInfo>();
+  // Reserve GP if globalBaseRegFixed()
+  if (Cpu0FI->globalBaseRegFixed())
+    Reserved.set(Cpu0::GP);
+
   return Reserved;
 } // lbd document - mark - getReservedRegs
 
diff -Naur Chapter5_1/Cpu0Subtarget.cpp Chapter6_1/Cpu0Subtarget.cpp
--- Chapter5_1/Cpu0Subtarget.cpp	2013-12-27 15:52:01.072977141 +0800
+++ Chapter6_1/Cpu0Subtarget.cpp	2013-12-27 15:52:01.126977139 +0800
@@ -14,12 +14,31 @@
 #include "Cpu0Subtarget.h"
 #include "Cpu0.h"
 #include "llvm/Support/TargetRegistry.h"
+#include "llvm/Support/CommandLine.h"
 
 #define GET_SUBTARGETINFO_TARGET_DESC
 #define GET_SUBTARGETINFO_CTOR
 #include "Cpu0GenSubtargetInfo.inc"
 
 using namespace llvm;
+ 
+static cl::opt<bool> UseSmallSectionOpt
+                ("cpu0-use-small-section", cl::Hidden, cl::init(false),
+                 cl::desc("Use small section. Only work when -relocation-model="
+                 "static. pic always not use small section."));
+
+static cl::opt<bool> ReserveGPOpt
+                ("cpu0-reserve-gp", cl::Hidden, cl::init(false),
+                 cl::desc("Never allocate $gp to variable"));
+
+static cl::opt<bool> NoCploadOpt
+                ("cpu0-no-cpload", cl::Hidden, cl::init(false),
+                 cl::desc("No issue .cpload"));
+
+bool Cpu0ReserveGP;
+bool Cpu0NoCpload;
+
+extern bool FixGlobalBaseReg;
 
 void Cpu0Subtarget::anchor() { }
 
@@ -42,5 +61,14 @@
   // Set Cpu0ABI if it hasn't been set yet.
   if (Cpu0ABI == UnknownABI)
     Cpu0ABI = O32;
+
+  // Set UseSmallSection.
+  UseSmallSection = UseSmallSectionOpt;
+  Cpu0ReserveGP = ReserveGPOpt;
+  Cpu0NoCpload = NoCploadOpt;
+  if (RM == Reloc::Static && !UseSmallSection && !Cpu0ReserveGP)
+    FixGlobalBaseReg = false;
+  else
+    FixGlobalBaseReg = true;
 }
 
diff -Naur Chapter5_1/Cpu0Subtarget.h Chapter6_1/Cpu0Subtarget.h
--- Chapter5_1/Cpu0Subtarget.h	2013-12-27 15:52:01.072977141 +0800
+++ Chapter6_1/Cpu0Subtarget.h	2013-12-27 15:52:01.127977139 +0800
@@ -21,6 +21,8 @@
 #define GET_SUBTARGETINFO_HEADER
 #include "Cpu0GenSubtargetInfo.inc"
 
+extern bool Cpu0NoCpload;
+
 namespace llvm {
 class StringRef;
 
@@ -52,6 +54,9 @@
   // Relocation Model
   Reloc::Model RM;
 
+  // UseSmallSection - Small section is used.
+  bool UseSmallSection;
+
 public:
   unsigned getTargetABI() const { return Cpu0ABI; }
 
@@ -66,6 +71,7 @@
   void ParseSubtargetFeatures(StringRef CPU, StringRef FS);
 
   bool isLittle() const { return IsLittle; }
+  bool useSmallSection() const { return UseSmallSection; }
 };
 } // End llvm namespace
 
diff -Naur Chapter5_1/Cpu0TargetObjectFile.cpp Chapter6_1/Cpu0TargetObjectFile.cpp
--- Chapter5_1/Cpu0TargetObjectFile.cpp	2013-12-27 15:52:01.072977141 +0800
+++ Chapter6_1/Cpu0TargetObjectFile.cpp	2013-12-27 15:52:01.127977139 +0800
@@ -39,3 +39,66 @@
 
 }
 
+// A address must be loaded from a small section if its size is less than the
+// small section size threshold. Data in this section must be addressed using
+// gp_rel operator.
+static bool IsInSmallSection(uint64_t Size) {
+  return Size > 0 && Size <= SSThreshold;
+}
+
+bool Cpu0TargetObjectFile::IsGlobalInSmallSection(const GlobalValue *GV,
+                                                const TargetMachine &TM) const {
+  if (GV->isDeclaration() || GV->hasAvailableExternallyLinkage())
+    return false;
+
+  return IsGlobalInSmallSection(GV, TM, getKindForGlobal(GV, TM));
+}
+
+/// IsGlobalInSmallSection - Return true if this global address should be
+/// placed into small data/bss section.
+bool Cpu0TargetObjectFile::
+IsGlobalInSmallSection(const GlobalValue *GV, const TargetMachine &TM,
+                       SectionKind Kind) const {
+
+  // Only use small section for non linux targets.
+  const Cpu0Subtarget &Subtarget = TM.getSubtarget<Cpu0Subtarget>();
+
+  // Return if small section is not available.
+  if (!Subtarget.useSmallSection())
+    return false;
+
+  // Only global variables, not functions.
+  const GlobalVariable *GVA = dyn_cast<GlobalVariable>(GV);
+  if (!GVA)
+    return false;
+
+  // We can only do this for datarel or BSS objects for now.
+  if (!Kind.isBSS() && !Kind.isDataRel())
+    return false;
+
+  // If this is a internal constant string, there is a special
+  // section for it, but not in small data/bss.
+  if (Kind.isMergeable1ByteCString())
+    return false;
+
+  Type *Ty = GV->getType()->getElementType();
+  return IsInSmallSection(TM.getDataLayout()->getTypeAllocSize(Ty));
+}
+
+
+
+const MCSection *Cpu0TargetObjectFile::
+SelectSectionForGlobal(const GlobalValue *GV, SectionKind Kind,
+                       Mangler *Mang, const TargetMachine &TM) const {
+  // TODO: Could also support "weak" symbols as well with ".gnu.linkonce.s.*"
+  // sections?
+
+  // Handle Small Section classification here.
+  if (Kind.isBSS() && IsGlobalInSmallSection(GV, TM, Kind))
+    return SmallBSSSection;
+  if (Kind.isDataNoRel() && IsGlobalInSmallSection(GV, TM, Kind))
+    return SmallDataSection;
+
+  // Otherwise, we work the same as ELF.
+  return TargetLoweringObjectFileELF::SelectSectionForGlobal(GV, Kind, Mang,TM);
+}
diff -Naur Chapter5_1/Cpu0TargetObjectFile.h Chapter6_1/Cpu0TargetObjectFile.h
--- Chapter5_1/Cpu0TargetObjectFile.h	2013-12-27 15:52:01.070977141 +0800
+++ Chapter6_1/Cpu0TargetObjectFile.h	2013-12-27 15:52:01.104977139 +0800
@@ -21,6 +21,19 @@
 
     void Initialize(MCContext &Ctx, const TargetMachine &TM);
 
+
+    /// IsGlobalInSmallSection - Return true if this global address should be
+    /// placed into small data/bss section.
+    bool IsGlobalInSmallSection(const GlobalValue *GV,
+                                const TargetMachine &TM, SectionKind Kind)const;
+    bool IsGlobalInSmallSection(const GlobalValue *GV,
+                                const TargetMachine &TM) const;
+
+    const MCSection *SelectSectionForGlobal(const GlobalValue *GV,
+                                            SectionKind Kind,
+                                            Mangler *Mang,
+                                            const TargetMachine &TM) const;
+
     // TODO: Classify globals as cpu0 wishes.
   };
 } // end namespace llvm
diff -Naur Chapter5_1/InstPrinter/Cpu0InstPrinter.cpp Chapter6_1/InstPrinter/Cpu0InstPrinter.cpp
--- Chapter5_1/InstPrinter/Cpu0InstPrinter.cpp	2013-12-27 15:52:01.072977141 +0800
+++ Chapter6_1/InstPrinter/Cpu0InstPrinter.cpp	2013-12-27 15:52:01.126977139 +0800
@@ -56,6 +56,14 @@
   switch (Kind) {
   default:                                 llvm_unreachable("Invalid kind!");
   case MCSymbolRefExpr::VK_None:           break;
+// Cpu0_GPREL is for llc -march=cpu0 -relocation-model=static
+  case MCSymbolRefExpr::VK_Cpu0_GPREL:     OS << "%gp_rel("; break;
+  case MCSymbolRefExpr::VK_Cpu0_GOT16:     OS << "%got(";    break;
+  case MCSymbolRefExpr::VK_Cpu0_GOT:       OS << "%got(";    break;
+  case MCSymbolRefExpr::VK_Cpu0_ABS_HI:    OS << "%hi(";     break;
+  case MCSymbolRefExpr::VK_Cpu0_ABS_LO:    OS << "%lo(";     break;
+  case MCSymbolRefExpr::VK_Cpu0_GOT_HI16:  OS << "%got_hi("; break;
+  case MCSymbolRefExpr::VK_Cpu0_GOT_LO16:  OS << "%got_lo("; break;
   }
 
   OS << SRE->getSymbol();
diff -Naur Chapter5_1/MCTargetDesc/Cpu0AsmBackend.cpp Chapter6_1/MCTargetDesc/Cpu0AsmBackend.cpp
--- Chapter5_1/MCTargetDesc/Cpu0AsmBackend.cpp	2013-12-27 15:52:01.070977141 +0800
+++ Chapter6_1/MCTargetDesc/Cpu0AsmBackend.cpp	2013-12-27 15:52:01.112977139 +0800
@@ -36,6 +36,7 @@
   case FK_GPRel_4:
   case FK_Data_4:
   case Cpu0::fixup_Cpu0_LO16:
+  case Cpu0::fixup_Cpu0_GOT_LO16:
     break;
   case Cpu0::fixup_Cpu0_PC24:
     // So far we are only using this type for branches and jump.
@@ -48,6 +49,7 @@
     break;
   case Cpu0::fixup_Cpu0_HI16:
   case Cpu0::fixup_Cpu0_GOT_Local:
+  case Cpu0::fixup_Cpu0_GOT_HI16:
     // Get the higher 16-bits. Also add 1 if bit 15 is 1.
     Value = ((Value + 0x8000) >> 16) & 0xffff;
     break;
diff -Naur Chapter5_1/MCTargetDesc/Cpu0BaseInfo.h Chapter6_1/MCTargetDesc/Cpu0BaseInfo.h
--- Chapter5_1/MCTargetDesc/Cpu0BaseInfo.h	2013-12-27 15:52:01.070977141 +0800
+++ Chapter6_1/MCTargetDesc/Cpu0BaseInfo.h	2013-12-27 15:52:01.112977139 +0800
@@ -77,6 +77,10 @@
     // N32/64 Flags.
     MO_GPOFF_HI,
     MO_GPOFF_LO,
+
+    /// MO_GOT_HI16/LO16 - Relocations used for large GOTs.
+    MO_GOT_HI16,
+    MO_GOT_LO16,
     MO_GOT_DISP,
     MO_GOT_PAGE,
     MO_GOT_OFST
diff -Naur Chapter5_1/MCTargetDesc/Cpu0MCCodeEmitter.cpp Chapter6_1/MCTargetDesc/Cpu0MCCodeEmitter.cpp
--- Chapter5_1/MCTargetDesc/Cpu0MCCodeEmitter.cpp	2013-12-27 15:52:01.070977141 +0800
+++ Chapter6_1/MCTargetDesc/Cpu0MCCodeEmitter.cpp	2013-12-27 15:52:01.112977139 +0800
@@ -155,6 +155,36 @@
 
   assert (Kind == MCExpr::SymbolRef);
 
+  Cpu0::Fixups FixupKind = Cpu0::Fixups(0);
+
+  switch(cast<MCSymbolRefExpr>(Expr)->getKind()) {
+  case MCSymbolRefExpr::VK_Cpu0_GPREL:
+    FixupKind = Cpu0::fixup_Cpu0_GPREL16;
+    break;
+  case MCSymbolRefExpr::VK_Cpu0_GOT16:
+    FixupKind = Cpu0::fixup_Cpu0_GOT_Global;
+    break;
+  case MCSymbolRefExpr::VK_Cpu0_GOT:
+    FixupKind = Cpu0::fixup_Cpu0_GOT_Local;
+    break;
+  case MCSymbolRefExpr::VK_Cpu0_ABS_HI:
+    FixupKind = Cpu0::fixup_Cpu0_HI16;
+    break;
+  case MCSymbolRefExpr::VK_Cpu0_ABS_LO:
+    FixupKind = Cpu0::fixup_Cpu0_LO16;
+    break;
+  case MCSymbolRefExpr::VK_Cpu0_GOT_HI16:
+    FixupKind = Cpu0::fixup_Cpu0_GOT_HI16;
+    break;
+  case MCSymbolRefExpr::VK_Cpu0_GOT_LO16:
+    FixupKind = Cpu0::fixup_Cpu0_GOT_LO16;
+    break;
+  default:
+    break;
+  } // switch
+
+  Fixups.push_back(MCFixup::Create(0, MO.getExpr(), MCFixupKind(FixupKind)));
+
   // All of the information is in the fixup.
   return 0;
 }
