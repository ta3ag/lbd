diff -Naur Chapter9_2/CMakeLists.txt Chapter9_3/CMakeLists.txt
--- Chapter9_2/CMakeLists.txt	2013-12-27 15:52:01.230977134 +0800
+++ Chapter9_3/CMakeLists.txt	2013-12-27 15:52:01.276977133 +0800
@@ -25,6 +25,7 @@
 add_llvm_target(Cpu0CodeGen
   Cpu0AnalyzeImmediate.cpp
   Cpu0AsmPrinter.cpp
+  Cpu0EmitGPRestore.cpp
   Cpu0InstrInfo.cpp
   Cpu0ISelDAGToDAG.cpp
   Cpu0ISelLowering.cpp
diff -Naur Chapter9_2/Cpu0AsmPrinter.cpp Chapter9_3/Cpu0AsmPrinter.cpp
--- Chapter9_2/Cpu0AsmPrinter.cpp	2013-12-27 15:52:01.235977134 +0800
+++ Chapter9_3/Cpu0AsmPrinter.cpp	2013-12-27 15:52:01.290977132 +0800
@@ -40,6 +40,19 @@
 
 using namespace llvm;
 
+void Cpu0AsmPrinter::EmitInstrWithMacroNoAT(const MachineInstr *MI) {
+  MCInst TmpInst;
+
+  MCInstLowering.Lower(MI, TmpInst);
+  OutStreamer.EmitRawText(StringRef("\t.set\tmacro"));
+  if (Cpu0FI->getEmitNOAT())
+    OutStreamer.EmitRawText(StringRef("\t.set\tat"));
+  OutStreamer.EmitInstruction(TmpInst);
+  if (Cpu0FI->getEmitNOAT())
+    OutStreamer.EmitRawText(StringRef("\t.set\tnoat"));
+  OutStreamer.EmitRawText(StringRef("\t.set\tnomacro"));
+} // lbd document - mark - EmitInstrWithMacroNoAT
+
 bool Cpu0AsmPrinter::runOnMachineFunction(MachineFunction &MF) {
   Cpu0FI = MF.getInfo<Cpu0FunctionInfo>();
   AsmPrinter::runOnMachineFunction(MF);
@@ -56,7 +69,37 @@
     return;
   }
 
+  unsigned Opc = MI->getOpcode();
   MCInst TmpInst0;
+  SmallVector<MCInst, 4> MCInsts;
+
+  switch (Opc) {
+  case Cpu0::CPRESTORE: {
+    const MachineOperand &MO = MI->getOperand(0);
+    assert(MO.isImm() && "CPRESTORE's operand must be an immediate.");
+    int64_t Offset = MO.getImm();
+
+    if (OutStreamer.hasRawTextSupport()) {
+      if (!isInt<16>(Offset)) {
+        EmitInstrWithMacroNoAT(MI);
+        return;
+      }
+    } else {
+      MCInstLowering.LowerCPRESTORE(Offset, MCInsts);
+
+      for (SmallVector<MCInst, 4>::iterator I = MCInsts.begin();
+           I != MCInsts.end(); ++I)
+        OutStreamer.EmitInstruction(*I);
+
+      return;
+    }
+
+    break;
+  }
+  default:
+    break;
+  } // lbd document - mark - switch (Opc)
+
   MCInstLowering.Lower(MI, TmpInst0);
   OutStreamer.EmitInstruction(TmpInst0);
 }
diff -Naur Chapter9_2/Cpu0EmitGPRestore.cpp Chapter9_3/Cpu0EmitGPRestore.cpp
--- Chapter9_2/Cpu0EmitGPRestore.cpp	1970-01-01 08:00:00.000000000 +0800
+++ Chapter9_3/Cpu0EmitGPRestore.cpp	2013-12-27 15:52:01.290977132 +0800
@@ -0,0 +1,99 @@
+//===-- Cpu0EmitGPRestore.cpp - Emit GP Restore Instruction ---------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This pass emits instructions that restore $gp right
+// after jalr instructions.
+//
+//===----------------------------------------------------------------------===//
+
+#define DEBUG_TYPE "emit-gp-restore"
+
+#include "Cpu0.h"
+#include "Cpu0TargetMachine.h"
+#include "Cpu0MachineFunction.h"
+#include "llvm/CodeGen/MachineFunctionPass.h"
+#include "llvm/CodeGen/MachineInstrBuilder.h"
+#include "llvm/Target/TargetInstrInfo.h"
+#include "llvm/ADT/Statistic.h"
+
+using namespace llvm;
+
+namespace {
+  struct Inserter : public MachineFunctionPass {
+
+    TargetMachine &TM;
+    const TargetInstrInfo *TII;
+
+    static char ID;
+    Inserter(TargetMachine &tm)
+      : MachineFunctionPass(ID), TM(tm), TII(tm.getInstrInfo()) { }
+
+    virtual const char *getPassName() const {
+      return "Cpu0 Emit GP Restore";
+    }
+
+    bool runOnMachineFunction(MachineFunction &F);
+  };
+  char Inserter::ID = 0;
+} // end of anonymous namespace
+
+bool Inserter::runOnMachineFunction(MachineFunction &F) {
+  Cpu0FunctionInfo *Cpu0FI = F.getInfo<Cpu0FunctionInfo>();
+
+  if ((TM.getRelocationModel() != Reloc::PIC_) ||
+      (!Cpu0FI->globalBaseRegFixed()))
+    return false;
+
+  bool Changed = false;
+  int FI = Cpu0FI->getGPFI();
+
+  for (MachineFunction::iterator MFI = F.begin(), MFE = F.end();
+       MFI != MFE; ++MFI) {
+    MachineBasicBlock& MBB = *MFI;
+    MachineBasicBlock::iterator I = MFI->begin();
+    
+    /// IsLandingPad - Indicate that this basic block is entered via an
+    /// exception handler.
+    // If MBB is a landing pad, insert instruction that restores $gp after
+    // EH_LABEL.
+    if (MBB.isLandingPad()) {
+      // Find EH_LABEL first.
+      for (; I->getOpcode() != TargetOpcode::EH_LABEL; ++I) ;
+
+      // Insert ld.
+      ++I;
+      DebugLoc dl = I != MBB.end() ? I->getDebugLoc() : DebugLoc();
+      BuildMI(MBB, I, dl, TII->get(Cpu0::LD), Cpu0::GP).addFrameIndex(FI)
+                                                       .addImm(0);
+      Changed = true;
+    }
+
+    while (I != MFI->end()) {
+      if (I->getOpcode() != Cpu0::JALR) {
+        ++I;
+        continue;
+      }
+
+      DebugLoc dl = I->getDebugLoc();
+      // emit lw $gp, ($gp save slot on stack) after jalr
+      BuildMI(MBB, ++I, dl, TII->get(Cpu0::LD), Cpu0::GP).addFrameIndex(FI)
+                                                         .addImm(0);
+      Changed = true;
+    }
+  }
+
+  return Changed;
+}
+
+/// createCpu0EmitGPRestorePass - Returns a pass that emits instructions that
+/// restores $gp clobbered by jalr instructions.
+FunctionPass *llvm::createCpu0EmitGPRestorePass(Cpu0TargetMachine &tm) {
+  return new Inserter(tm);
+}
+
diff -Naur Chapter9_2/Cpu0FrameLowering.cpp Chapter9_3/Cpu0FrameLowering.cpp
--- Chapter9_2/Cpu0FrameLowering.cpp	2013-12-27 15:52:01.228977135 +0800
+++ Chapter9_3/Cpu0FrameLowering.cpp	2013-12-27 15:52:01.276977133 +0800
@@ -136,7 +136,10 @@
   unsigned ADDiu = Cpu0::ADDiu;
   // First, compute final stack size.
   unsigned StackAlign = getStackAlignment();
+  unsigned RegSize = 4;
   unsigned LocalVarAreaOffset = 
+    Cpu0FI->needGPSaveRestore() ?
+    (MFI->getObjectOffset(Cpu0FI->getGPFI()) + RegSize) :
     Cpu0FI->getMaxCallFrameSize();
   uint64_t StackSize =  RoundUpToAlignment(LocalVarAreaOffset, StackAlign) +
      RoundUpToAlignment(MFI->getStackSize(), StackAlign);
@@ -191,6 +194,13 @@
       }
     }
   }
+  
+  // Restore GP from the saved stack location
+  if (Cpu0FI->needGPSaveRestore()) {
+    unsigned Offset = MFI->getObjectOffset(Cpu0FI->getGPFI());
+    BuildMI(MBB, MBBI, dl, TII.get(Cpu0::CPRESTORE)).addImm(Offset)
+      .addReg(Cpu0::GP);
+  }
 }
 
 void Cpu0FrameLowering::emitEpilogue(MachineFunction &MF,
@@ -220,6 +230,15 @@
   }
 }
 
+// This function eliminate ADJCALLSTACKDOWN,
+// ADJCALLSTACKUP pseudo instructions
+void Cpu0FrameLowering::
+eliminateCallFramePseudoInstr(MachineFunction &MF, MachineBasicBlock &MBB,
+                              MachineBasicBlock::iterator I) const {
+  // Simply discard ADJCALLSTACKDOWN, ADJCALLSTACKUP instructions.
+  MBB.erase(I);
+}
+
 // This method is called immediately before PrologEpilogInserter scans the 
 //  physical registers used to determine what callee saved registers should be 
 //  spilled. This method is optional. 
diff -Naur Chapter9_2/Cpu0FrameLowering.h Chapter9_3/Cpu0FrameLowering.h
--- Chapter9_2/Cpu0FrameLowering.h	2013-12-27 15:52:01.234977134 +0800
+++ Chapter9_3/Cpu0FrameLowering.h	2013-12-27 15:52:01.290977132 +0800
@@ -35,6 +35,9 @@
   void emitPrologue(MachineFunction &MF) const;
   void emitEpilogue(MachineFunction &MF, MachineBasicBlock &MBB) const;
   bool hasFP(const MachineFunction &MF) const;
+  void eliminateCallFramePseudoInstr(MachineFunction &MF,
+                                     MachineBasicBlock &MBB,
+                                     MachineBasicBlock::iterator I) const;
   void processFunctionBeforeCalleeSavedScan(MachineFunction &MF,
                                             RegScavenger *RS) const;
 };
diff -Naur Chapter9_2/Cpu0.h Chapter9_3/Cpu0.h
--- Chapter9_2/Cpu0.h	2013-12-27 15:52:01.230977134 +0800
+++ Chapter9_3/Cpu0.h	2013-12-27 15:52:01.276977133 +0800
@@ -23,6 +23,7 @@
   class FunctionPass;
 
   FunctionPass *createCpu0ISelDag(Cpu0TargetMachine &TM);
+  FunctionPass *createCpu0EmitGPRestorePass(Cpu0TargetMachine &TM);
 
 } // end namespace llvm;
 
diff -Naur Chapter9_2/Cpu0InstrInfo.cpp Chapter9_3/Cpu0InstrInfo.cpp
--- Chapter9_2/Cpu0InstrInfo.cpp	2013-12-27 15:52:01.228977135 +0800
+++ Chapter9_3/Cpu0InstrInfo.cpp	2013-12-27 15:52:01.276977133 +0800
@@ -22,6 +22,7 @@
 
 Cpu0InstrInfo::Cpu0InstrInfo(Cpu0TargetMachine &tm)
   : 
+    Cpu0GenInstrInfo(Cpu0::ADJCALLSTACKDOWN, Cpu0::ADJCALLSTACKUP),
     TM(tm),
     RI(*TM.getSubtargetImpl(), *this) {}
 
diff -Naur Chapter9_2/Cpu0InstrInfo.td Chapter9_3/Cpu0InstrInfo.td
--- Chapter9_2/Cpu0InstrInfo.td	2013-12-27 15:52:01.230977134 +0800
+++ Chapter9_3/Cpu0InstrInfo.td	2013-12-27 15:52:01.289977132 +0800
@@ -422,6 +422,14 @@
                                   [(callseq_end timm:$amt1, timm:$amt2)]>;
 }
 
+// When handling PIC code the assembler needs .cpload and .cprestore
+// directives. If the real instructions corresponding these directives
+// are used, we have the same behavior, but get also a bunch of warnings
+// from the assembler.
+let neverHasSideEffects = 1 in
+def CPRESTORE : Cpu0Pseudo<(outs), (ins i32imm:$loc, CPURegs:$gp),
+                           ".cprestore\t$loc", []>;
+
 //===----------------------------------------------------------------------===//
 // Instruction definition
 //===----------------------------------------------------------------------===//
@@ -490,6 +498,7 @@
   def RetLR : Cpu0Pseudo<(outs), (ins), "", [(Cpu0Ret)]>;
 
 def RET     : RetBase<CPURegs>;
+def IRET    : JumpFR<0x3d, "iret", CPURegs>;
 
 def JALR    : JumpLinkReg<0x3e, "jalr", CPURegs>;
 
diff -Naur Chapter9_2/Cpu0ISelLowering.cpp Chapter9_3/Cpu0ISelLowering.cpp
--- Chapter9_2/Cpu0ISelLowering.cpp	2013-12-27 15:52:01.221977135 +0800
+++ Chapter9_3/Cpu0ISelLowering.cpp	2013-12-27 15:52:01.272977133 +0800
@@ -333,6 +333,9 @@
     NextStackOffset = (NextStackOffset + StackAlignment - 1) /
                       StackAlignment * StackAlignment;
 
+    if (Cpu0FI->needGPSaveRestore())
+      MFI->setObjectOffset(Cpu0FI->getGPFI(), NextStackOffset);
+
     MFI->setObjectOffset(DynAllocFI, NextStackOffset);
   }
   // Chain is the output chain of the last Load/Store or CopyToReg node.
@@ -613,8 +616,40 @@
                                 const SmallVectorImpl<SDValue> &OutVals,
                                 SDLoc DL, SelectionDAG &DAG) const {
 
-    return DAG.getNode(Cpu0ISD::Ret, DL, MVT::Other,
-                       Chain, DAG.getRegister(Cpu0::LR, MVT::i32));
+  // CCValAssign - represent the assignment of
+  // the return value to a location
+  SmallVector<CCValAssign, 16> RVLocs;
+
+  // CCState - Info about the registers and stack slot.
+  CCState CCInfo(CallConv, isVarArg, DAG.getMachineFunction(),
+		 getTargetMachine(), RVLocs, *DAG.getContext());
+
+  // Analize return values.
+  CCInfo.AnalyzeReturn(Outs, RetCC_Cpu0);
+
+  SDValue Flag;
+  SmallVector<SDValue, 4> RetOps(1, Chain);
+
+  // Copy the result values into the output registers.
+  for (unsigned i = 0; i != RVLocs.size(); ++i) {
+    CCValAssign &VA = RVLocs[i];
+    assert(VA.isRegLoc() && "Can only return in registers!");
+
+    Chain = DAG.getCopyToReg(Chain, DL, VA.getLocReg(), OutVals[i], Flag);
+
+    // Guarantee that all emitted copies are stuck together with flags.
+    Flag = Chain.getValue(1);
+    RetOps.push_back(DAG.getRegister(VA.getLocReg(), VA.getLocVT()));
+  }
+  
+  RetOps[0] = Chain;  // Update chain.
+
+  // Add the flag if we have it.
+  if (Flag.getNode())
+    RetOps.push_back(Flag);
+
+  // Return on Cpu0 is always a "ret $lr"
+  return DAG.getNode(Cpu0ISD::Ret, DL, MVT::Other, &RetOps[0], RetOps.size());
 }
 
 bool // lbd document - mark - isOffsetFoldingLegal
diff -Naur Chapter9_2/Cpu0MachineFunction.h Chapter9_3/Cpu0MachineFunction.h
--- Chapter9_2/Cpu0MachineFunction.h	2013-12-27 15:52:01.234977134 +0800
+++ Chapter9_3/Cpu0MachineFunction.h	2013-12-27 15:52:01.289977132 +0800
@@ -26,6 +26,11 @@
   virtual void anchor();
   MachineFunction& MF;
 
+  /// SRetReturnReg - Some subtargets require that sret lowering includes
+  /// returning the value of the returned struct in a register. This field
+  /// holds the virtual register into which the sret argument is passed.
+  unsigned SRetReturnReg;
+
   /// GlobalBaseReg - keeps track of the virtual register initialized for
   /// use as the global base register. This is used for PIC in some PIC
   /// relocation models.
@@ -48,6 +53,7 @@
 public:
   Cpu0FunctionInfo(MachineFunction& MF)
   : MF(MF), 
+    SRetReturnReg(0), 
     GlobalBaseReg(0),
     VarArgsFrameIndex(0), InArgFIRange(std::make_pair(-1, 0)),
     OutArgFIRange(std::make_pair(-1, 0)), GPFI(0), DynAllocFI(0),
@@ -60,6 +66,10 @@
   }
   void setLastInArgFI(int FI) { InArgFIRange.second = FI; }
 
+  bool isOutArgFI(int FI) const {
+    return FI <= OutArgFIRange.first && FI >= OutArgFIRange.second;
+  }
+
   void extendOutArgFIRange(int FirstFI, int LastFI) {
     if (!OutArgFIRange.second)
       // this must be the first time this function was called.
@@ -82,6 +92,9 @@
   }
   bool isDynAllocFI(int FI) const { return DynAllocFI && DynAllocFI == FI; }
 
+  unsigned getSRetReturnReg() const { return SRetReturnReg; }
+  void setSRetReturnReg(unsigned Reg) { SRetReturnReg = Reg; }
+
   bool globalBaseRegFixed() const;
   bool globalBaseRegSet() const;
   unsigned getGlobalBaseReg();
diff -Naur Chapter9_2/Cpu0MCInstLower.cpp Chapter9_3/Cpu0MCInstLower.cpp
--- Chapter9_2/Cpu0MCInstLower.cpp	2013-12-27 15:52:01.228977135 +0800
+++ Chapter9_3/Cpu0MCInstLower.cpp	2013-12-27 15:52:01.276977133 +0800
@@ -127,6 +127,34 @@
   CreateMCInst(MCInsts[2], Cpu0::ADD, GPReg, GPReg, T9Reg);
 } // lbd document - mark - LowerCPLOAD
 
+// Lower ".cprestore offset" to "st $gp, offset($sp)".
+void Cpu0MCInstLower::LowerCPRESTORE(int64_t Offset,
+                                     SmallVector<MCInst, 4>& MCInsts) {
+  assert(isInt<32>(Offset) && (Offset >= 0) &&
+         "Imm operand of .cprestore must be a non-negative 32-bit value.");
+
+  MCOperand SPReg = MCOperand::CreateReg(Cpu0::SP), BaseReg = SPReg;
+  MCOperand GPReg = MCOperand::CreateReg(Cpu0::GP);
+  MCOperand ZEROReg = MCOperand::CreateReg(Cpu0::ZERO);
+
+  if (!isInt<16>(Offset)) {
+    unsigned Hi = ((Offset + 0x8000) >> 16) & 0xffff;
+    Offset &= 0xffff;
+    MCOperand ATReg = MCOperand::CreateReg(Cpu0::AT);
+    BaseReg = ATReg;
+
+    // lui   at,hi
+    // add   at,at,sp
+    MCInsts.resize(2);
+    CreateMCInst(MCInsts[0], Cpu0::LUi, ATReg, ZEROReg, MCOperand::CreateImm(Hi));
+    CreateMCInst(MCInsts[1], Cpu0::ADD, ATReg, ATReg, SPReg);
+  }
+
+  MCInst St;
+  CreateMCInst(St, Cpu0::ST, GPReg, BaseReg, MCOperand::CreateImm(Offset));
+  MCInsts.push_back(St);
+} // lbd document - mark - LowerCPRESTORE
+
 MCOperand Cpu0MCInstLower::LowerOperand(const MachineOperand& MO,
                                         unsigned offset) const {
   MachineOperandType MOTy = MO.getType();
diff -Naur Chapter9_2/Cpu0MCInstLower.h Chapter9_3/Cpu0MCInstLower.h
--- Chapter9_2/Cpu0MCInstLower.h	2013-12-27 15:52:01.235977134 +0800
+++ Chapter9_3/Cpu0MCInstLower.h	2013-12-27 15:52:01.290977132 +0800
@@ -32,6 +32,7 @@
   void Initialize(MCContext* C);
   void Lower(const MachineInstr *MI, MCInst &OutMI) const;
   void LowerCPLOAD(SmallVector<MCInst, 4>& MCInsts);
+  void LowerCPRESTORE(int64_t Offset, SmallVector<MCInst, 4>& MCInsts);
 private:
   MCOperand LowerSymbolOperand(const MachineOperand &MO,
                                MachineOperandType MOTy, unsigned Offset) const;
diff -Naur Chapter9_2/Cpu0RegisterInfo.cpp Chapter9_3/Cpu0RegisterInfo.cpp
--- Chapter9_2/Cpu0RegisterInfo.cpp	2013-12-27 15:52:01.235977134 +0800
+++ Chapter9_3/Cpu0RegisterInfo.cpp	2013-12-27 15:52:01.290977132 +0800
@@ -96,6 +96,7 @@
   MachineInstr &MI = *II;
   MachineFunction &MF = *MI.getParent()->getParent();
   MachineFrameInfo *MFI = MF.getFrameInfo();
+  Cpu0FunctionInfo *Cpu0FI = MF.getInfo<Cpu0FunctionInfo>();
 
   unsigned i = 0;
   while (!MI.getOperand(i).isFI()) {
@@ -132,6 +133,10 @@
   // getFrameRegister() returns.
   unsigned FrameReg;
 
+  if (Cpu0FI->isOutArgFI(FrameIndex) || Cpu0FI->isDynAllocFI(FrameIndex) ||
+      (FrameIndex >= MinCSFI && FrameIndex <= MaxCSFI))
+    FrameReg = Cpu0::SP;
+  else
     FrameReg = getFrameRegister(MF);
 
   // Calculate final offset.
@@ -142,7 +147,11 @@
   //   by adding the size of the stack:
   //   incoming argument, callee-saved register location or local variable.
   int64_t Offset;
-  Offset = spOffset + (int64_t)stackSize;
+  if (Cpu0FI->isOutArgFI(FrameIndex) || Cpu0FI->isGPFI(FrameIndex) ||
+      Cpu0FI->isDynAllocFI(FrameIndex))
+    Offset = spOffset;
+  else
+    Offset = spOffset + (int64_t)stackSize;
 
   Offset    += MI.getOperand(i+1).getImm();
 
diff -Naur Chapter9_2/Cpu0TargetMachine.cpp Chapter9_3/Cpu0TargetMachine.cpp
--- Chapter9_2/Cpu0TargetMachine.cpp	2013-12-27 15:52:01.230977134 +0800
+++ Chapter9_3/Cpu0TargetMachine.cpp	2013-12-27 15:52:01.289977132 +0800
@@ -83,6 +83,7 @@
     return *getCpu0TargetMachine().getSubtargetImpl();
   } // lbd document - mark - getCpu0Subtarget()
   virtual bool addInstSelector();
+  virtual bool addPreRegAlloc();
 };
 } // namespace
 
@@ -97,3 +98,9 @@
   return false;
 } // lbd document - mark - addInstSelector()
 
+bool Cpu0PassConfig::addPreRegAlloc() {
+  // $gp is a caller-saved register.
+
+  addPass(createCpu0EmitGPRestorePass(getCpu0TargetMachine()));
+  return true;
+}
