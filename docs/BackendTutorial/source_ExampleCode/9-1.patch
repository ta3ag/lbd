diff -Naur Chapter8_1/Cpu0CallingConv.td Chapter9_1/Cpu0CallingConv.td
--- Chapter8_1/Cpu0CallingConv.td	2013-12-27 15:52:01.174977137 +0800
+++ Chapter9_1/Cpu0CallingConv.td	2013-12-27 15:52:01.204977136 +0800
@@ -13,6 +13,37 @@
 class CCIfSubtarget<string F, CCAction A>:
   CCIf<!strconcat("State.getTarget().getSubtarget<Cpu0Subtarget>().", F), A>;
 
+def RetCC_Cpu0EABI : CallingConv<[
+  // i32 are returned in registers V0, V1
+  CCIfType<[i32], CCAssignToReg<[V0, V1]>>
+]>;
+
+//===----------------------------------------------------------------------===//
+// Cpu0 EABI Calling Convention
+//===----------------------------------------------------------------------===//
+
+def CC_Cpu0EABI : CallingConv<[
+  // Promote i8/i16 arguments to i32.
+  CCIfType<[i8, i16], CCPromoteToType<i32>>,
+  // Integer values get stored in stack slots that are 4 bytes in
+  // size and 4-byte aligned.
+  CCIfType<[i32], CCAssignToStack<4, 4>>
+]>;
+
+
+//===----------------------------------------------------------------------===//
+// Cpu0 Calling Convention Dispatch
+//===----------------------------------------------------------------------===//
+
+def CC_Cpu0 : CallingConv<[
+  CCDelegateTo<CC_Cpu0EABI>
+]>;
+
+
+def RetCC_Cpu0 : CallingConv<[
+  CCDelegateTo<RetCC_Cpu0EABI>
+]>; // lbd document - mark - def RetCC_Cpu0
+
 def CSR_O32 : CalleeSavedRegs<(add LR, FP,
                                    (sequence "S%u", 2, 0))>;
 
diff -Naur Chapter8_1/Cpu0InstrInfo.cpp Chapter9_1/Cpu0InstrInfo.cpp
--- Chapter8_1/Cpu0InstrInfo.cpp	2013-12-27 15:52:01.173977137 +0800
+++ Chapter9_1/Cpu0InstrInfo.cpp	2013-12-27 15:52:01.203977136 +0800
@@ -13,6 +13,7 @@
 
 #include "Cpu0InstrInfo.h"
 #include "Cpu0TargetMachine.h"
+#include "Cpu0MachineFunction.h"
 #include "llvm/CodeGen/MachineInstrBuilder.h"
 #define GET_INSTRINFO_CTOR_DTOR
 #include "Cpu0GenInstrInfo.inc"
@@ -68,6 +69,34 @@
     MIB.addReg(SrcReg, getKillRegState(KillSrc));
 } // lbd document - mark - copyPhysReg
 
+static MachineMemOperand* GetMemOperand(MachineBasicBlock &MBB, int FI,
+                                        unsigned Flag) {
+  MachineFunction &MF = *MBB.getParent();
+  MachineFrameInfo &MFI = *MF.getFrameInfo();
+  unsigned Align = MFI.getObjectAlignment(FI);
+
+  return MF.getMachineMemOperand(MachinePointerInfo::getFixedStack(FI), Flag,
+                                 MFI.getObjectSize(FI), Align);
+}
+
+void Cpu0InstrInfo::
+loadRegFromStackSlot(MachineBasicBlock &MBB, MachineBasicBlock::iterator I,
+                     unsigned DestReg, int FI,
+                     const TargetRegisterClass *RC,
+                     const TargetRegisterInfo *TRI) const
+{
+  DebugLoc DL;
+  if (I != MBB.end()) DL = I->getDebugLoc();
+  MachineMemOperand *MMO = GetMemOperand(MBB, FI, MachineMemOperand::MOLoad);
+  unsigned Opc = 0;
+
+  if (Cpu0::CPURegsRegClass.hasSubClassEq(RC))
+    Opc = Cpu0::LD;
+  assert(Opc && "Register class not handled!");
+  BuildMI(MBB, I, DL, get(Opc), DestReg).addFrameIndex(FI).addImm(0)
+    .addMemOperand(MMO);
+} // lbd document - mark - loadRegFromStackSlot
+
 MachineInstr*
 Cpu0InstrInfo::emitFrameIndexDebugValue(MachineFunction &MF, int FrameIx,
                                         uint64_t Offset, const MDNode *MDPtr,
diff -Naur Chapter8_1/Cpu0InstrInfo.h Chapter9_1/Cpu0InstrInfo.h
--- Chapter8_1/Cpu0InstrInfo.h	2013-12-27 15:52:01.174977137 +0800
+++ Chapter9_1/Cpu0InstrInfo.h	2013-12-27 15:52:01.204977136 +0800
@@ -41,6 +41,12 @@
                            unsigned DestReg, unsigned SrcReg,
                            bool KillSrc) const;
 
+  virtual void loadRegFromStackSlot(MachineBasicBlock &MBB,
+                                    MachineBasicBlock::iterator MBBI,
+                                    unsigned DestReg, int FrameIndex,
+                                    const TargetRegisterClass *RC,
+                                    const TargetRegisterInfo *TRI) const;
+
   virtual MachineInstr* emitFrameIndexDebugValue(MachineFunction &MF,
                                                  int FrameIx, uint64_t Offset,
                                                  const MDNode *MDPtr,
diff -Naur Chapter8_1/Cpu0InstrInfo.td Chapter9_1/Cpu0InstrInfo.td
--- Chapter8_1/Cpu0InstrInfo.td	2013-12-27 15:52:01.174977137 +0800
+++ Chapter9_1/Cpu0InstrInfo.td	2013-12-27 15:52:01.204977136 +0800
@@ -26,6 +26,13 @@
                                          [SDTCisInt<0>,
                                           SDTCisSameAs<0, 1>]>;
 
+def SDT_Cpu0JmpLink      : SDTypeProfile<0, 1, [SDTCisVT<0, iPTR>]>;
+
+// Call
+def Cpu0JmpLink : SDNode<"Cpu0ISD::JmpLink",SDT_Cpu0JmpLink,
+                         [SDNPHasChain, SDNPOutGlue, SDNPOptInGlue,
+                          SDNPVariadic]>;
+
 // Hi and Lo nodes are used to handle global addresses. Used on
 // Cpu0ISelLowering to lower stuff like GlobalAddress, ExternalSymbol
 // static model. (nothing to do with Cpu0 Registers Hi and Lo)
@@ -66,6 +73,10 @@
   let DecoderMethod = "DecodeJumpRelativeTarget";
 }
 
+def calltarget  : Operand<iPTR> {
+  let EncoderMethod = "getJumpTargetOpValue";
+} // lbd document - mark - def calltarget
+
 // Signed Operand
 def simm16      : Operand<i32> {
   let DecoderMethod= "DecodeSimm16";
@@ -297,6 +308,24 @@
   let hasExtraSrcRegAllocReq = 1;
 }
 
+// Jump and Link (Call)
+let isCall=1, hasDelaySlot=0 in {
+  class JumpLink<bits<8> op, string instr_asm>:
+    FJ<op, (outs), (ins calltarget:$target, variable_ops),
+       !strconcat(instr_asm, "\t$target"), [(Cpu0JmpLink imm:$target)],
+       IIBranch> {
+       }
+
+  class JumpLinkReg<bits<8> op, string instr_asm,
+                    RegisterClass RC>:
+    FA<op, (outs), (ins RC:$rb, variable_ops),
+       !strconcat(instr_asm, "\t$rb"), [(Cpu0JmpLink RC:$rb)], IIBranch> {
+    let rc = 0;
+    let ra = 14;
+    let shamt = 0;
+  }
+}
+
 // Mul, Div
 class Mult<bits<8> op, string instr_asm, InstrItinClass itin,
            RegisterClass RC, list<Register> DefRegs>:
@@ -430,11 +459,17 @@
 
 def JMP     : UncondBranch<0x36, "jmp">;
 
+/// Jump & link and Return Instructions
+def SWI     : JumpLink<0x3a, "swi">;
+def JSUB    : JumpLink<0x3b, "jsub">;
+
 let isReturn=1, isTerminator=1, hasDelaySlot=1, isBarrier=1, hasCtrlDep=1 in
   def RetLR : Cpu0Pseudo<(outs), (ins), "", [(Cpu0Ret)]>;
 
 def RET     : RetBase<CPURegs>;
 
+def JALR    : JumpLinkReg<0x3e, "jalr", CPURegs>;
+
 /// Multiply and Divide Instructions.
 def MULT    : Mult32<0x41, "mult", IIImul>;
 def MULTu   : Mult32<0x42, "multu", IIImul>;
@@ -484,6 +519,11 @@
 def : Pat<(addc  CPURegs:$src, immSExt16:$imm),
           (ADDiu CPURegs:$src, imm:$imm)>;
 
+def : Pat<(Cpu0JmpLink (i32 tglobaladdr:$dst)),
+          (JSUB tglobaladdr:$dst)>;
+def : Pat<(Cpu0JmpLink (i32 texternalsym:$dst)),
+          (JSUB texternalsym:$dst)>;
+
 // hi/lo relocs
 def : Pat<(Cpu0Hi tglobaladdr:$in), (SHL (ADDiu ZERO, tglobaladdr:$in), 16)>;
 def : Pat<(Cpu0Hi tglobaladdr:$in), (LUi tglobaladdr:$in)>;
diff -Naur Chapter8_1/Cpu0ISelLowering.cpp Chapter9_1/Cpu0ISelLowering.cpp
--- Chapter8_1/Cpu0ISelLowering.cpp	2013-12-27 15:52:01.165977137 +0800
+++ Chapter9_1/Cpu0ISelLowering.cpp	2013-12-27 15:52:01.200977136 +0800
@@ -282,6 +282,12 @@
 
 #include "Cpu0GenCallingConv.inc"
 
+SDValue
+Cpu0TargetLowering::LowerCall(TargetLowering::CallLoweringInfo &CLI,
+                              SmallVectorImpl<SDValue> &InVals) const {
+  return CLI.Chain;
+}
+
 /// LowerFormalArguments - transform physical registers into virtual registers
 /// and generate load operations for arguments places on the stack.
 SDValue
@@ -292,6 +298,57 @@
                                          SDLoc DL, SelectionDAG &DAG,
                                          SmallVectorImpl<SDValue> &InVals)
                                           const {
+  MachineFunction &MF = DAG.getMachineFunction();
+  MachineFrameInfo *MFI = MF.getFrameInfo();
+  Cpu0FunctionInfo *Cpu0FI = MF.getInfo<Cpu0FunctionInfo>();
+
+  Cpu0FI->setVarArgsFrameIndex(0);
+
+  // Used with vargs to acumulate store chains.
+  std::vector<SDValue> OutChains;
+
+  // Assign locations to all of the incoming arguments.
+  SmallVector<CCValAssign, 16> ArgLocs;
+  CCState CCInfo(CallConv, isVarArg, DAG.getMachineFunction(),
+                 getTargetMachine(), ArgLocs, *DAG.getContext());
+                         
+  CCInfo.AnalyzeFormalArguments(Ins, CC_Cpu0);
+
+  Function::const_arg_iterator FuncArg =
+    DAG.getMachineFunction().getFunction()->arg_begin();
+  int LastFI = 0;// Cpu0FI->LastInArgFI is 0 at the entry of this function.
+
+  for (unsigned i = 0, e = ArgLocs.size(); i != e; ++i, ++FuncArg) {
+    CCValAssign &VA = ArgLocs[i];
+    EVT ValVT = VA.getValVT();
+    ISD::ArgFlagsTy Flags = Ins[i].Flags;
+
+    if (Flags.isByVal()) {
+      assert(Flags.getByValSize() &&
+             "ByVal args of size 0 should have been ignored by front-end."); 
+      continue;
+    }
+    // sanity check
+    assert(VA.isMemLoc());
+
+    // The stack pointer offset is relative to the caller stack frame.
+    LastFI = MFI->CreateFixedObject(ValVT.getSizeInBits()/8,
+                                    VA.getLocMemOffset(), true);
+
+    // Create load nodes to retrieve arguments from the stack
+    SDValue FIN = DAG.getFrameIndex(LastFI, getPointerTy());
+    InVals.push_back(DAG.getLoad(ValVT, DL, Chain, FIN,
+                                 MachinePointerInfo::getFixedStack(LastFI),
+                                 false, false, false, 0));
+  }
+  Cpu0FI->setLastInArgFI(LastFI);
+  // All stores are grouped in one node to allow the matching between
+  // the size of Ins and InVals. This only happens when on varg functions
+  if (!OutChains.empty()) {
+    OutChains.push_back(Chain);
+    Chain = DAG.getNode(ISD::TokenFactor, DL, MVT::Other,
+                        &OutChains[0], OutChains.size());
+  } // if (!OutChains.empty())
   return Chain;
 }
 
diff -Naur Chapter8_1/Cpu0ISelLowering.h Chapter9_1/Cpu0ISelLowering.h
--- Chapter8_1/Cpu0ISelLowering.h	2013-12-27 15:52:01.174977137 +0800
+++ Chapter9_1/Cpu0ISelLowering.h	2013-12-27 15:52:01.204977136 +0800
@@ -99,6 +99,11 @@
                            SmallVectorImpl<SDValue> &InVals) const;
   // LowerFormalArguments: incoming arguments
 
+    virtual SDValue
+      LowerCall(TargetLowering::CallLoweringInfo &CLI,
+                SmallVectorImpl<SDValue> &InVals) const;
+  // LowerCall: outgoing arguments
+
 	//- must be exist without function all
     virtual SDValue
       LowerReturn(SDValue Chain,
diff -Naur Chapter8_1/Cpu0MachineFunction.h Chapter9_1/Cpu0MachineFunction.h
--- Chapter8_1/Cpu0MachineFunction.h	2013-12-27 15:52:01.174977137 +0800
+++ Chapter9_1/Cpu0MachineFunction.h	2013-12-27 15:52:01.204977136 +0800
@@ -30,7 +30,18 @@
   /// use as the global base register. This is used for PIC in some PIC
   /// relocation models.
   unsigned GlobalBaseReg;
+  
+    /// VarArgsFrameIndex - FrameIndex for start of varargs area.
+  int VarArgsFrameIndex;
+
+  // Range of frame object indices.
+  // InArgFIRange: Range of indices of all frame objects created during call to
+  //               LowerFormalArguments.
+  // OutArgFIRange: Range of indices of all frame objects created during call to
+  //                LowerCall except for the frame object for restoring $gp.
+  std::pair<int, int> InArgFIRange, OutArgFIRange;
   int GPFI; // Index of the frame object for restoring $gp
+  mutable int DynAllocFI; // Frame index of dynamically allocated stack area.
   unsigned MaxCallFrameSize;
   bool EmitNOAT;
 
@@ -38,14 +49,46 @@
   Cpu0FunctionInfo(MachineFunction& MF)
   : MF(MF), 
     GlobalBaseReg(0),
+    VarArgsFrameIndex(0), InArgFIRange(std::make_pair(-1, 0)),
+    OutArgFIRange(std::make_pair(-1, 0)), GPFI(0), DynAllocFI(0),
     EmitNOAT(false), 
     MaxCallFrameSize(0)
     {}
 
+  bool isInArgFI(int FI) const {
+    return FI <= InArgFIRange.first && FI >= InArgFIRange.second;
+  }
+  void setLastInArgFI(int FI) { InArgFIRange.second = FI; }
+
+  void extendOutArgFIRange(int FirstFI, int LastFI) {
+    if (!OutArgFIRange.second)
+      // this must be the first time this function was called.
+      OutArgFIRange.first = FirstFI;
+    OutArgFIRange.second = LastFI;
+  }
+
+  int getGPFI() const { return GPFI; }
+  void setGPFI(int FI) { GPFI = FI; }
+  bool needGPSaveRestore() const { return getGPFI(); }
+  bool isGPFI(int FI) const { return GPFI && GPFI == FI; }
+
+  // The first call to this function creates a frame object for dynamically
+  // allocated stack area.
+  int getDynAllocFI() const {
+    if (!DynAllocFI)
+      DynAllocFI = MF.getFrameInfo()->CreateFixedObject(4, 0, true);
+
+    return DynAllocFI;
+  }
+  bool isDynAllocFI(int FI) const { return DynAllocFI && DynAllocFI == FI; }
+
   bool globalBaseRegFixed() const;
   bool globalBaseRegSet() const;
   unsigned getGlobalBaseReg();
 
+  int getVarArgsFrameIndex() const { return VarArgsFrameIndex; }
+  void setVarArgsFrameIndex(int Index) { VarArgsFrameIndex = Index; }
+
   unsigned getMaxCallFrameSize() const { return MaxCallFrameSize; }
   void setMaxCallFrameSize(unsigned S) { MaxCallFrameSize = S; }
   bool getEmitNOAT() const { return EmitNOAT; }
diff -Naur Chapter8_1/Cpu0MCInstLower.cpp Chapter9_1/Cpu0MCInstLower.cpp
--- Chapter8_1/Cpu0MCInstLower.cpp	2013-12-27 15:52:01.173977137 +0800
+++ Chapter9_1/Cpu0MCInstLower.cpp	2013-12-27 15:52:01.203977136 +0800
@@ -47,6 +47,7 @@
 //  format=false (global var in .sdata).
   case Cpu0II::MO_GPREL:     Kind = MCSymbolRefExpr::VK_Cpu0_GPREL; break;
 
+  case Cpu0II::MO_GOT_CALL:  Kind = MCSymbolRefExpr::VK_Cpu0_GOT_CALL; break;
   case Cpu0II::MO_GOT16:     Kind = MCSymbolRefExpr::VK_Cpu0_GOT16; break;
   case Cpu0II::MO_GOT:       Kind = MCSymbolRefExpr::VK_Cpu0_GOT; break;
 // ABS_HI and ABS_LO is for llc -march=cpu0 -relocation-model=static (global 
@@ -71,6 +72,11 @@
     Offset += MO.getOffset();
     break;
 
+  case MachineOperand::MO_ExternalSymbol:
+    Symbol = AsmPrinter.GetExternalSymbolSymbol(MO.getSymbolName());
+    Offset += MO.getOffset();
+    break; // lbd document - mark - case MachineOperand::MO_ExternalSymbol:
+
   default:
     llvm_unreachable("<unknown operand type>");
   }
@@ -135,6 +141,7 @@
     return MCOperand::CreateImm(MO.getImm() + offset);
   case MachineOperand::MO_MachineBasicBlock:
   case MachineOperand::MO_GlobalAddress:
+  case MachineOperand::MO_ExternalSymbol:
   case MachineOperand::MO_BlockAddress:
     return LowerSymbolOperand(MO, MOTy, offset);
   case MachineOperand::MO_RegisterMask:
diff -Naur Chapter8_1/InstPrinter/Cpu0InstPrinter.cpp Chapter9_1/InstPrinter/Cpu0InstPrinter.cpp
--- Chapter8_1/InstPrinter/Cpu0InstPrinter.cpp	2013-12-27 15:52:01.174977137 +0800
+++ Chapter9_1/InstPrinter/Cpu0InstPrinter.cpp	2013-12-27 15:52:01.204977136 +0800
@@ -58,6 +58,7 @@
   case MCSymbolRefExpr::VK_None:           break;
 // Cpu0_GPREL is for llc -march=cpu0 -relocation-model=static
   case MCSymbolRefExpr::VK_Cpu0_GPREL:     OS << "%gp_rel("; break;
+  case MCSymbolRefExpr::VK_Cpu0_GOT_CALL:  OS << "%call16("; break;
   case MCSymbolRefExpr::VK_Cpu0_GOT16:     OS << "%got(";    break;
   case MCSymbolRefExpr::VK_Cpu0_GOT:       OS << "%got(";    break;
   case MCSymbolRefExpr::VK_Cpu0_ABS_HI:    OS << "%hi(";     break;
diff -Naur Chapter8_1/MCTargetDesc/Cpu0AsmBackend.cpp Chapter9_1/MCTargetDesc/Cpu0AsmBackend.cpp
--- Chapter8_1/MCTargetDesc/Cpu0AsmBackend.cpp	2013-12-27 15:52:01.165977137 +0800
+++ Chapter9_1/MCTargetDesc/Cpu0AsmBackend.cpp	2013-12-27 15:52:01.202977136 +0800
@@ -35,6 +35,7 @@
     return 0;
   case FK_GPRel_4:
   case FK_Data_4:
+  case Cpu0::fixup_Cpu0_CALL16:
   case Cpu0::fixup_Cpu0_LO16:
   case Cpu0::fixup_Cpu0_GOT_LO16:
     break;
@@ -138,6 +139,7 @@
       { "fixup_Cpu0_GOT_Global",     0,     16,   0 },
       { "fixup_Cpu0_GOT_Local",      0,     16,   0 },
       { "fixup_Cpu0_PC24",           0,     24,  MCFixupKindInfo::FKF_IsPCRel },
+      { "fixup_Cpu0_CALL16",         0,     16,   0 },
       { "fixup_Cpu0_GOT_HI16",       0,     16,   0 },
       { "fixup_Cpu0_GOT_LO16",       0,     16,   0 }
     };
diff -Naur Chapter8_1/MCTargetDesc/Cpu0ELFObjectWriter.cpp Chapter9_1/MCTargetDesc/Cpu0ELFObjectWriter.cpp
--- Chapter8_1/MCTargetDesc/Cpu0ELFObjectWriter.cpp	2013-12-27 15:52:01.173977137 +0800
+++ Chapter9_1/MCTargetDesc/Cpu0ELFObjectWriter.cpp	2013-12-27 15:52:01.203977136 +0800
@@ -113,6 +113,9 @@
   case Cpu0::fixup_Cpu0_GPREL16:
     Type = ELF::R_CPU0_GPREL16;
     break;
+  case Cpu0::fixup_Cpu0_CALL16:
+    Type = ELF::R_CPU0_CALL16;
+    break;
   case Cpu0::fixup_Cpu0_GOT_Global:
   case Cpu0::fixup_Cpu0_GOT_Local:
     Type = ELF::R_CPU0_GOT16;
diff -Naur Chapter8_1/MCTargetDesc/Cpu0FixupKinds.h Chapter9_1/MCTargetDesc/Cpu0FixupKinds.h
--- Chapter8_1/MCTargetDesc/Cpu0FixupKinds.h	2013-12-27 15:52:01.173977137 +0800
+++ Chapter9_1/MCTargetDesc/Cpu0FixupKinds.h	2013-12-27 15:52:01.203977136 +0800
@@ -47,6 +47,9 @@
     // PC relative branch fixup resulting in - R_CPU0_PC24.
     // cpu0 PC24, e.g. jeq, jmp
     fixup_Cpu0_PC24,
+    
+    // resulting in - R_CPU0_CALL16.
+    fixup_Cpu0_CALL16,
 
     // resulting in - R_CPU0_GOT_HI16
     fixup_Cpu0_GOT_HI16,
diff -Naur Chapter8_1/MCTargetDesc/Cpu0MCCodeEmitter.cpp Chapter9_1/MCTargetDesc/Cpu0MCCodeEmitter.cpp
--- Chapter8_1/MCTargetDesc/Cpu0MCCodeEmitter.cpp	2013-12-27 15:52:01.173977137 +0800
+++ Chapter9_1/MCTargetDesc/Cpu0MCCodeEmitter.cpp	2013-12-27 15:52:01.203977136 +0800
@@ -175,9 +175,12 @@
   assert(MO.isExpr() && "getJumpTargetOpValue expects only expressions");
 
   const MCExpr *Expr = MO.getExpr();
-  if (Opcode == Cpu0::JMP)
+  if (Opcode == Cpu0::JSUB || Opcode == Cpu0::JMP)
     Fixups.push_back(MCFixup::Create(0, Expr,
                                      MCFixupKind(Cpu0::fixup_Cpu0_PC24)));
+  else if (Opcode == Cpu0::SWI)
+    Fixups.push_back(MCFixup::Create(0, Expr,
+                                     MCFixupKind(Cpu0::fixup_Cpu0_24)));
   else
     llvm_unreachable("unexpect opcode in getJumpAbsoluteTargetOpValue()");
   return 0;
@@ -218,6 +221,9 @@
   case MCSymbolRefExpr::VK_Cpu0_GPREL:
     FixupKind = Cpu0::fixup_Cpu0_GPREL16;
     break;
+  case MCSymbolRefExpr::VK_Cpu0_GOT_CALL:
+    FixupKind = Cpu0::fixup_Cpu0_CALL16;
+    break;
   case MCSymbolRefExpr::VK_Cpu0_GOT16:
     FixupKind = Cpu0::fixup_Cpu0_GOT_Global;
     break;
