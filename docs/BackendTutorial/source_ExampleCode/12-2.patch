diff -Naur Chapter12_1/Cpu0InstrInfo.cpp Chapter12_2/Cpu0InstrInfo.cpp
--- Chapter12_1/Cpu0InstrInfo.cpp	2013-12-27 15:52:01.413977127 +0800
+++ Chapter12_2/Cpu0InstrInfo.cpp	2013-12-27 15:52:01.457977125 +0800
@@ -37,6 +37,7 @@
             bool KillSrc) const {
   unsigned Opc = 0, ZeroReg = 0;
 
+  const Cpu0Subtarget &Subtarget = TM.getSubtarget<Cpu0Subtarget>();
   if (Cpu0::CPURegsRegClass.contains(DestReg)) { // Copy to CPU Reg.
     if (Cpu0::CPURegsRegClass.contains(SrcReg))
       Opc = Cpu0::ADD, ZeroReg = Cpu0::ZERO;
@@ -44,16 +45,20 @@
       Opc = Cpu0::MFHI, SrcReg = 0;
     else if (SrcReg == Cpu0::LO)
       Opc = Cpu0::MFLO, SrcReg = 0;
-    if (SrcReg == Cpu0::SW)
-      Opc = Cpu0::MFSW, SrcReg = 0;
+    if (!Subtarget.hasCpu032II()) {
+      if (SrcReg == Cpu0::SW)
+        Opc = Cpu0::MFSW, SrcReg = 0;
+    } // lbd document - mark - if (!Subtarget.hasCpu032II()) 1
   }
   else if (Cpu0::CPURegsRegClass.contains(SrcReg)) { // Copy from CPU Reg.
     if (DestReg == Cpu0::HI)
       Opc = Cpu0::MTHI, DestReg = 0;
     else if (DestReg == Cpu0::LO)
       Opc = Cpu0::MTLO, DestReg = 0;
-    if (DestReg == Cpu0::SW)
-      Opc = Cpu0::MTSW, DestReg = 0;
+    if (!Subtarget.hasCpu032II()) { // lbd document - mark - 2
+      if (DestReg == Cpu0::SW)
+        Opc = Cpu0::MTSW, DestReg = 0;
+    } // lbd document - mark - if (!Subtarget.hasCpu032II()) 2
   }
 
   assert(Opc && "Cannot copy registers");
diff -Naur Chapter12_1/Cpu0InstrInfo.td Chapter12_2/Cpu0InstrInfo.td
--- Chapter12_1/Cpu0InstrInfo.td	2013-12-27 15:52:01.419977127 +0800
+++ Chapter12_2/Cpu0InstrInfo.td	2013-12-27 15:52:01.458977125 +0800
@@ -63,11 +63,50 @@
 // Cpu0 Instruction Predicate Definitions.
 //===----------------------------------------------------------------------===//
 def RelocPIC    :     Predicate<"TM.getRelocationModel() == Reloc::PIC_">;
+def NotCpu032II :     Predicate<"!Subtarget.hasCpu032II()">,
+                      AssemblerPredicate<"FeatureCpu032I">;
+def HasCpu032II :     Predicate<"Subtarget.hasCpu032II()">,
+                      AssemblerPredicate<"!FeatureCpu032III">;
+// !FeatureCpu032III is for disassembler in "llvm-objdump -d"
+
+/* In Cpu0GenSubtargetInfo.inc,
+namespace llvm {
+namespace Cpu0 {
+enum {
+  FeatureCpu032I =  1ULL << 0,
+  FeatureCpu032II =  1ULL << 1,
+  FeatureCpu032III =  1ULL << 2
+};
+}
+} // End llvm namespace 
+
+static bool checkDecoderPredicate(unsigned Idx, uint64_t Bits) {
+  switch (Idx) {
+  default: llvm_unreachable("Invalid index!");
+  case 0:
+    return ((Bits & Cpu0::FeatureCpu032I)); // came from "FeatureCpu032I"
+  case 1:
+    return (!(Bits & Cpu0::FeatureCpu032III)); // came from !FeatureCpu032III"
+  }
+}
+
+To let disassembler work, the function 
+checkDecoderPredicate(unsigned Idx, uint64_t Bits) must return true(=1).
+As above code, the argument Bits always is 1. Set !FeatureCpu032III" to do 
+disassembler for expectation. */
 
 //===----------------------------------------------------------------------===//
 // Cpu0 Operand, Complex Patterns and Transformations Definitions.
 //===----------------------------------------------------------------------===//
 // Instruction operand types
+
+// BEQ, BNE
+def brtarget16    : Operand<OtherVT> {
+  let EncoderMethod = "getBranch16TargetOpValue";
+  let OperandType = "OPERAND_PCREL";
+  let DecoderMethod = "DecodeBranch16Target";
+}
+
 // JEQ, JNE, ...
 def brtarget24    : Operand<OtherVT> {
   let EncoderMethod = "getBranch24TargetOpValue";
@@ -194,6 +233,14 @@
   let isReMaterializable = 1;
 }
 
+class ArithOverflowR<bits<8> op, string instr_asm,
+                    InstrItinClass itin, RegisterClass RC, bit isComm = 0>:
+  FA<op, (outs RC:$ra), (ins RC:$rb, RC:$rc),
+     !strconcat(instr_asm, "\t$ra, $rb, $rc"), [], itin> {
+  let shamt = 0;
+  let isCommutable = isComm;
+}
+
 class CmpInstr<bits<8> op, string instr_asm, 
                InstrItinClass itin, RegisterClass RC, RegisterClass RD, 
                bit isComm = 0>:
@@ -203,6 +250,7 @@
   let shamt = 0;
   let isCommutable = isComm;
   let DecoderMethod = "DecodeCMPInstruction";
+  let Predicates = [NotCpu032II];
 } // lbd document - mark - class CmpInstr
 
 // Arithmetic and logical instructions with 2 register operands.
@@ -290,11 +338,42 @@
                    list<Register> UseRegs>:
   FJ<op, (outs), (ins RC:$ra, brtarget24:$addr),
              !strconcat(instr_asm, "\t$ra, $addr"),
-             [], IIBranch> {
+             [], IIBranch>, Requires<[NotCpu032II]> {
   let isBranch = 1;
   let isTerminator = 1;
   let hasDelaySlot = 0;
   let neverHasSideEffects = 1;
+//  let Predicates = [HasCpu032II]; // same effect as Requires
+}
+
+// Conditional Branch, e.g. BEQ $r1, $r2, brtarget16
+class CBranch16<bits<8> op, string instr_asm, PatFrag cond_op, RegisterClass RC>:
+  FL<op, (outs), (ins RC:$ra, RC:$rb, brtarget16:$imm16),
+             !strconcat(instr_asm, "\t$ra, $rb, $imm16"),
+             [(brcond (i32 (cond_op RC:$ra, RC:$rb)), bb:$imm16)], IIBranch>, 
+             Requires<[HasCpu032II]> {
+  let isBranch = 1;
+  let isTerminator = 1;
+  let hasDelaySlot = 1;
+  let Defs = [AT];
+}
+
+// SetCC
+class SetCC_R<bits<8> op, string instr_asm, PatFrag cond_op,
+              RegisterClass RC>:
+  FA<op, (outs CPURegs:$ra), (ins RC:$rb, RC:$rc),
+     !strconcat(instr_asm, "\t$ra, $rb, $rc"),
+     [(set CPURegs:$ra, (cond_op RC:$rb, RC:$rc))],
+     IIAlu>, Requires<[HasCpu032II]> {
+  let shamt = 0;
+}
+
+class SetCC_I<bits<8> op, string instr_asm, PatFrag cond_op, Operand Od,
+              PatLeaf imm_type, RegisterClass RC>:
+  FL<op, (outs CPURegs:$ra), (ins RC:$rb, Od:$imm16),
+     !strconcat(instr_asm, "\t$ra, $rb, $imm16"),
+     [(set CPURegs:$ra, (cond_op RC:$rb, imm_type:$imm16))],
+     IIAlu>, Requires<[HasCpu032II]> {
 }
 
 // Unconditional branch, such as JMP
@@ -380,6 +459,7 @@
   let neverHasSideEffects = 1;
 }
 
+// Move to Hi/Lo
 class MoveToLOHI<bits<8> op, string instr_asm, RegisterClass RC,
                  list<Register> DefRegs>:
   FL<op, (outs), (ins RC:$ra),
@@ -507,6 +587,11 @@
 def SHLV    : shift_rotate_reg<0x21, 0x00, "shlv", shl, CPURegs>;
 def SHRV    : shift_rotate_reg<0x22, 0x00, "shrv", srl, CPURegs>;
 
+def SLTi    : SetCC_I<0x26, "slti", setlt, simm16, immSExt16, CPURegs>;
+def SLTiu   : SetCC_I<0x27, "sltiu", setult, simm16, immSExt16, CPURegs>;
+def SLT     : SetCC_R<0x28, "slt", setlt, CPURegs>;
+def SLTu    : SetCC_R<0x29, "sltu", setult, CPURegs>;
+
 /// Jump and Branch Instructions
 def JEQ     : CBranch24<0x30, "jeq", SR, [SW]>;
 def JNE     : CBranch24<0x31, "jne", SR, [SW]>;
@@ -515,6 +600,9 @@
 def JLE     : CBranch24<0x34, "jle", SR, [SW]>;
 def JGE     : CBranch24<0x35, "jge", SR, [SW]>;
 
+def BEQ     : CBranch16<0x37, "beq", seteq, CPURegs>;
+def BNE     : CBranch16<0x38, "bne", setne, CPURegs>;
+
 def JMP     : UncondBranch<0x36, "jmp">;
 
 /// Jump & link and Return Instructions
@@ -604,6 +692,7 @@
 def : Pat<(i32 (extloadi16_a addr:$src)), (LHu addr:$src)>;
 
 // brcond patterns
+// brcond for cmp instruction
 multiclass BrcondPatsCmp<RegisterClass RC, Instruction JEQOp, Instruction JNEOp, 
 Instruction JLTOp, Instruction JGTOp, Instruction JLEOp, Instruction JGEOp, 
 Instruction CMPOp, Register ZEROReg> {
@@ -636,9 +725,44 @@
           (JNEOp (CMPOp RC:$cond, ZEROReg), bb:$dst)>;
 }
 
+// brcond for slt instruction
+multiclass BrcondPatsSlt<RegisterClass RC, Instruction BEQOp, Instruction BNEOp,
+                      Instruction SLTOp, Instruction SLTuOp, Instruction SLTiOp,
+                      Instruction SLTiuOp, Register ZEROReg> {
+def : Pat<(brcond (i32 (setne RC:$lhs, 0)), bb:$dst),
+              (BNEOp RC:$lhs, ZEROReg, bb:$dst)>;
+def : Pat<(brcond (i32 (seteq RC:$lhs, 0)), bb:$dst),
+              (BEQOp RC:$lhs, ZEROReg, bb:$dst)>;
+
+def : Pat<(brcond (i32 (setge RC:$lhs, RC:$rhs)), bb:$dst),
+              (BEQ (SLTOp RC:$lhs, RC:$rhs), ZERO, bb:$dst)>;
+def : Pat<(brcond (i32 (setuge RC:$lhs, RC:$rhs)), bb:$dst),
+              (BEQ (SLTuOp RC:$lhs, RC:$rhs), ZERO, bb:$dst)>;
+def : Pat<(brcond (i32 (setge RC:$lhs, immSExt16:$rhs)), bb:$dst),
+              (BEQ (SLTiOp RC:$lhs, immSExt16:$rhs), ZERO, bb:$dst)>;
+def : Pat<(brcond (i32 (setuge RC:$lhs, immSExt16:$rhs)), bb:$dst),
+              (BEQ (SLTiuOp RC:$lhs, immSExt16:$rhs), ZERO, bb:$dst)>;
+
+def : Pat<(brcond (i32 (setle RC:$lhs, RC:$rhs)), bb:$dst),
+              (BEQ (SLTOp RC:$rhs, RC:$lhs), ZERO, bb:$dst)>;
+def : Pat<(brcond (i32 (setule RC:$lhs, RC:$rhs)), bb:$dst),
+              (BEQ (SLTuOp RC:$rhs, RC:$lhs), ZERO, bb:$dst)>;
+
+def : Pat<(brcond RC:$cond, bb:$dst),
+              (BNEOp RC:$cond, ZEROReg, bb:$dst)>;
+}
+
+let Predicates = [NotCpu032II] in {
 defm : BrcondPatsCmp<CPURegs, JEQ, JNE, JLT, JGT, JLE, JGE, CMP, ZERO>;
+}
+
+let Predicates = [HasCpu032II] in {
+defm : BrcondPatsSlt<CPURegs, BEQ, BNE, SLT, SLTu, SLTi, SLTiu, ZERO>;
+}
 
 // setcc patterns
+
+// setcc for cmp instruction
 multiclass SeteqPatsCmp<RegisterClass RC> {
 // a == b
   def : Pat<(seteq RC:$lhs, RC:$rhs),
@@ -686,8 +810,64 @@
             (XORi (ANDi (CMP RC:$lhs, RC:$rhs), 1), 1)>;
 }
 
+// setcc for slt instruction
+multiclass SeteqPatsSlt<RegisterClass RC, Instruction SLTiuOp, Instruction XOROp,
+                     Instruction SLTuOp, Register ZEROReg> {
+// a == b
+  def : Pat<(seteq RC:$lhs, RC:$rhs),
+                (SLTiuOp (XOROp RC:$lhs, RC:$rhs), 1)>;
+// a != b
+  def : Pat<(setne RC:$lhs, RC:$rhs),
+                (SLTuOp ZEROReg, (XOROp RC:$lhs, RC:$rhs))>;
+}
+
+// a <= b
+multiclass SetlePatsSlt<RegisterClass RC, Instruction SLTOp, Instruction SLTuOp> {
+  def : Pat<(setle RC:$lhs, RC:$rhs),
+// a <= b is equal to (XORi (b < a), 1)
+                (XORi (SLTOp RC:$rhs, RC:$lhs), 1)>;
+  def : Pat<(setule RC:$lhs, RC:$rhs),
+                (XORi (SLTuOp RC:$rhs, RC:$lhs), 1)>;
+}
+
+// a > b
+multiclass SetgtPatsSlt<RegisterClass RC, Instruction SLTOp, Instruction SLTuOp> {
+  def : Pat<(setgt RC:$lhs, RC:$rhs),
+// a > b is equal to b < a is equal to setlt(b, a)
+                (SLTOp RC:$rhs, RC:$lhs)>;
+  def : Pat<(setugt RC:$lhs, RC:$rhs),
+                (SLTuOp RC:$rhs, RC:$lhs)>;
+}
+
+// a >= b
+multiclass SetgePatsSlt<RegisterClass RC, Instruction SLTOp, Instruction SLTuOp> {
+  def : Pat<(setge RC:$lhs, RC:$rhs),
+// a >= b is equal to b <= a
+                (XORi (SLTOp RC:$lhs, RC:$rhs), 1)>;
+  def : Pat<(setuge RC:$lhs, RC:$rhs),
+                (XORi (SLTuOp RC:$lhs, RC:$rhs), 1)>;
+}
+
+multiclass SetgeImmPatsSlt<RegisterClass RC, Instruction SLTiOp,
+                        Instruction SLTiuOp> {
+  def : Pat<(setge RC:$lhs, immSExt16:$rhs),
+                (XORi (SLTiOp RC:$lhs, immSExt16:$rhs), 1)>;
+  def : Pat<(setuge RC:$lhs, immSExt16:$rhs),
+                (XORi (SLTiuOp RC:$lhs, immSExt16:$rhs), 1)>;
+}
+
+let Predicates = [NotCpu032II] in {
 defm : SeteqPatsCmp<CPURegs>;
 defm : SetltPatsCmp<CPURegs>;
 defm : SetlePatsCmp<CPURegs>;
 defm : SetgtPatsCmp<CPURegs>;
 defm : SetgePatsCmp<CPURegs>;
+}
+
+let Predicates = [HasCpu032II] in {
+defm : SeteqPatsSlt<CPURegs, SLTiu, XOR, SLTu, ZERO>;
+defm : SetlePatsSlt<CPURegs, SLT, SLTu>;
+defm : SetgtPatsSlt<CPURegs, SLT, SLTu>;
+defm : SetgePatsSlt<CPURegs, SLT, SLTu>;
+defm : SetgeImmPatsSlt<CPURegs, SLTi, SLTiu>;
+}
diff -Naur Chapter12_1/Cpu0ISelDAGToDAG.cpp Chapter12_2/Cpu0ISelDAGToDAG.cpp
--- Chapter12_1/Cpu0ISelDAGToDAG.cpp	2013-12-27 15:52:01.401977128 +0800
+++ Chapter12_2/Cpu0ISelDAGToDAG.cpp	2013-12-27 15:52:01.445977126 +0800
@@ -244,10 +244,17 @@
     SDValue RHS = Node->getOperand(1);
 
     EVT VT = LHS.getValueType();
-    SDNode *StatusWord = CurDAG->getMachineNode(Cpu0::CMP, DL, VT, Ops);
-    SDValue Constant1 = CurDAG->getTargetConstant(1, VT);
-    SDNode *Carry = CurDAG->getMachineNode(Cpu0::ANDi, DL, VT, 
-                                           SDValue(StatusWord,0), Constant1);
+    const Cpu0TargetMachine &TM = getTargetMachine();
+    const Cpu0Subtarget &Subtarget = TM.getSubtarget<Cpu0Subtarget>();
+    SDNode *Carry;
+    if (Subtarget.hasCpu032II())
+      Carry = CurDAG->getMachineNode(Cpu0::SLTu, DL, VT, Ops);
+    else {
+      SDNode *StatusWord = CurDAG->getMachineNode(Cpu0::CMP, DL, VT, Ops);
+      SDValue Constant1 = CurDAG->getTargetConstant(1, VT);
+      Carry = CurDAG->getMachineNode(Cpu0::ANDi, DL, VT, 
+                                             SDValue(StatusWord,0), Constant1);
+    }
     SDNode *AddCarry = CurDAG->getMachineNode(Cpu0::ADDu, DL, VT,
                                               SDValue(Carry,0), RHS);
 
diff -Naur Chapter12_1/Cpu0Subtarget.h Chapter12_2/Cpu0Subtarget.h
--- Chapter12_1/Cpu0Subtarget.h	2013-12-27 15:52:01.420977127 +0800
+++ Chapter12_2/Cpu0Subtarget.h	2013-12-27 15:52:01.459977125 +0800
@@ -38,6 +38,8 @@
 protected:
   enum Cpu0ArchEnum {
     Cpu032I
+    , Cpu032II,
+    Cpu032III
   };
 
   // Cpu0 architecture version
@@ -71,6 +73,8 @@
   void ParseSubtargetFeatures(StringRef CPU, StringRef FS);
 
   bool isLittle() const { return IsLittle; }
+  bool hasCpu032I() const { return Cpu0ArchVersion >= Cpu032I; }
+  bool hasCpu032II() const { return Cpu0ArchVersion == Cpu032II; }
   bool useSmallSection() const { return UseSmallSection; }
 };
 } // End llvm namespace
diff -Naur Chapter12_1/Cpu0.td Chapter12_2/Cpu0.td
--- Chapter12_1/Cpu0.td	2013-12-27 15:52:01.414977127 +0800
+++ Chapter12_2/Cpu0.td	2013-12-27 15:52:01.457977125 +0800
@@ -35,6 +35,12 @@
 def FeatureCpu032I     : SubtargetFeature<"cpu032I", "Cpu0ArchVersion", 
         "Cpu032I", "Cpu032I ISA Support">;
 
+def FeatureCpu032II    : SubtargetFeature<"cpu032II", "Cpu0ArchVersion",                      
+         "Cpu032II", "Cpu032II ISA Support (use instruction slt)">;
+
+def FeatureCpu032III   : SubtargetFeature<"cpu032III", "Cpu0ArchVersion",                      
+         "Cpu032III", "Cpu032III ISA Support (use instruction slt)">;
+
 //===----------------------------------------------------------------------===//
 // Cpu0 processors supported.
 //===----------------------------------------------------------------------===//
@@ -42,7 +48,9 @@
 class Proc<string Name, list<SubtargetFeature> Features>
  : Processor<Name, Cpu0GenericItineraries, Features>;
 
-def : Proc<"cpu032I", [FeatureCpu032I]>;
+def : Proc<"cpu032I",  [FeatureCpu032I]>;
+def : Proc<"cpu032II", [FeatureCpu032II]>;
+def : Proc<"cpu032III", [FeatureCpu032III]>;
 
 def Cpu0AsmWriter : AsmWriter {
   string AsmWriterClassName  = "InstPrinter";
diff -Naur Chapter12_1/Disassembler/Cpu0Disassembler.cpp Chapter12_2/Disassembler/Cpu0Disassembler.cpp
--- Chapter12_1/Disassembler/Cpu0Disassembler.cpp	2013-12-27 15:52:01.414977127 +0800
+++ Chapter12_2/Disassembler/Cpu0Disassembler.cpp	2013-12-27 15:52:01.458977125 +0800
@@ -67,6 +67,11 @@
                                        uint64_t Address,
                                        const void *Decoder);
 // lbd document - mark - declare DecodeCMPInstruction
+static DecodeStatus DecodeBranch16Target(MCInst &Inst,
+                                       unsigned Insn,
+                                       uint64_t Address,
+                                       const void *Decoder);
+// lbd document - mark - declare DecodeBranch16Target
 static DecodeStatus DecodeBranch24Target(MCInst &Inst,
                                        unsigned Insn,
                                        uint64_t Address,
@@ -239,6 +244,17 @@
   return MCDisassembler::Success;
 } // lbd document - mark - DecodeCMPInstruction
 
+static DecodeStatus DecodeBranch16Target(MCInst &Inst,
+                                       unsigned Insn,
+                                       uint64_t Address,
+                                       const void *Decoder) {
+  int BranchOffset = fieldFromInstruction(Insn, 0, 16);
+  if (BranchOffset > 0x8fff)
+  	BranchOffset = -1*(0x10000 - BranchOffset);
+  Inst.addOperand(MCOperand::CreateImm(BranchOffset));
+  return MCDisassembler::Success;
+} // lbd document - mark - DecodeBranch16Target
+
 /* CBranch instruction define $ra and then imm24; The printOperand() print 
 operand 1 (operand 0 is $ra and operand 1 is imm24), so we Create register 
 operand first and create imm24 next, as follows,
diff -Naur Chapter12_1/MCTargetDesc/Cpu0AsmBackend.cpp Chapter12_2/MCTargetDesc/Cpu0AsmBackend.cpp
--- Chapter12_1/MCTargetDesc/Cpu0AsmBackend.cpp	2013-12-27 15:52:01.412977127 +0800
+++ Chapter12_2/MCTargetDesc/Cpu0AsmBackend.cpp	2013-12-27 15:52:01.455977125 +0800
@@ -39,6 +39,7 @@
   case Cpu0::fixup_Cpu0_LO16:
   case Cpu0::fixup_Cpu0_GOT_LO16:
     break;
+  case Cpu0::fixup_Cpu0_PC16:
   case Cpu0::fixup_Cpu0_PC24:
     // So far we are only using this type for branches and jump.
     // For branches we start 1 instruction after the branch
@@ -138,6 +139,7 @@
       { "fixup_Cpu0_GPREL16",        0,     16,   0 },
       { "fixup_Cpu0_GOT_Global",     0,     16,   0 },
       { "fixup_Cpu0_GOT_Local",      0,     16,   0 },
+      { "fixup_Cpu0_PC16",           0,     16,  MCFixupKindInfo::FKF_IsPCRel },
       { "fixup_Cpu0_PC24",           0,     24,  MCFixupKindInfo::FKF_IsPCRel },
       { "fixup_Cpu0_CALL16",         0,     16,   0 },
       { "fixup_Cpu0_GOT_HI16",       0,     16,   0 },
diff -Naur Chapter12_1/MCTargetDesc/Cpu0ELFObjectWriter.cpp Chapter12_2/MCTargetDesc/Cpu0ELFObjectWriter.cpp
--- Chapter12_1/MCTargetDesc/Cpu0ELFObjectWriter.cpp	2013-12-27 15:52:01.412977127 +0800
+++ Chapter12_2/MCTargetDesc/Cpu0ELFObjectWriter.cpp	2013-12-27 15:52:01.457977125 +0800
@@ -120,6 +120,9 @@
   case Cpu0::fixup_Cpu0_GOT_Local:
     Type = ELF::R_CPU0_GOT16;
     break;
+  case Cpu0::fixup_Cpu0_PC16:
+    Type = ELF::R_CPU0_PC16;
+    break;
   case Cpu0::fixup_Cpu0_PC24:
     Type = ELF::R_CPU0_PC24;
     break;
diff -Naur Chapter12_1/MCTargetDesc/Cpu0FixupKinds.h Chapter12_2/MCTargetDesc/Cpu0FixupKinds.h
--- Chapter12_1/MCTargetDesc/Cpu0FixupKinds.h	2013-12-27 15:52:01.412977127 +0800
+++ Chapter12_2/MCTargetDesc/Cpu0FixupKinds.h	2013-12-27 15:52:01.455977125 +0800
@@ -44,6 +44,10 @@
     // Local symbol fixup resulting in - R_CPU0_GOT16.
     fixup_Cpu0_GOT_Local,
     
+    // PC relative branch fixup resulting in - R_CPU0_PC16.
+    // cpu0 PC16, e.g. beq
+    fixup_Cpu0_PC16,
+    
     // PC relative branch fixup resulting in - R_CPU0_PC24.
     // cpu0 PC24, e.g. jeq, jmp
     fixup_Cpu0_PC24,
diff -Naur Chapter12_1/MCTargetDesc/Cpu0MCCodeEmitter.cpp Chapter12_2/MCTargetDesc/Cpu0MCCodeEmitter.cpp
--- Chapter12_1/MCTargetDesc/Cpu0MCCodeEmitter.cpp	2013-12-27 15:52:01.412977127 +0800
+++ Chapter12_2/MCTargetDesc/Cpu0MCCodeEmitter.cpp	2013-12-27 15:52:01.455977125 +0800
@@ -72,6 +72,13 @@
   uint64_t getBinaryCodeForInstr(const MCInst &MI,
                                  SmallVectorImpl<MCFixup> &Fixups) const;
 
+  // getBranch16TargetOpValue - Return binary encoding of the branch
+  // target operand, such as BEQ, BNE. If the machine operand
+  // requires relocation, record the relocation and return zero.
+  unsigned getBranch16TargetOpValue(const MCInst &MI, unsigned OpNo,
+                                  SmallVectorImpl<MCFixup> &Fixups) const;
+  // lbd document - mark - declare getBranch16TargetOpValue
+
   // getBranch24TargetOpValue - Return binary encoding of the branch
   // target operand, such as JMP #BB01, JEQ, JSUB. If the machine operand
   // requires relocation, record the relocation and return zero.
@@ -141,6 +148,25 @@
   EmitInstruction(Binary, Size, OS);
 }
 
+/// getBranch16TargetOpValue - Return binary encoding of the branch
+/// target operand. If the machine operand requires relocation,
+/// record the relocation and return zero.
+unsigned Cpu0MCCodeEmitter::
+getBranch16TargetOpValue(const MCInst &MI, unsigned OpNo,
+                       SmallVectorImpl<MCFixup> &Fixups) const {
+
+  const MCOperand &MO = MI.getOperand(OpNo);
+
+  // If the destination is an immediate, we have nothing to do.
+  if (MO.isImm()) return MO.getImm();
+  assert(MO.isExpr() && "getBranch16TargetOpValue expects only expressions");
+
+  const MCExpr *Expr = MO.getExpr();
+  Fixups.push_back(MCFixup::Create(0, Expr,
+                                   MCFixupKind(Cpu0::fixup_Cpu0_PC16)));
+  return 0;
+} // lbd document - mark - getBranch16TargetOpValue
+
 /// getBranch24TargetOpValue - Return binary encoding of the branch
 /// target operand. If the machine operand requires relocation,
 /// record the relocation and return zero.
diff -Naur Chapter12_1/MCTargetDesc/Cpu0MCTargetDesc.cpp Chapter12_2/MCTargetDesc/Cpu0MCTargetDesc.cpp
--- Chapter12_1/MCTargetDesc/Cpu0MCTargetDesc.cpp	2013-12-27 15:52:01.412977127 +0800
+++ Chapter12_2/MCTargetDesc/Cpu0MCTargetDesc.cpp	2013-12-27 15:52:01.455977125 +0800
@@ -58,6 +58,8 @@
   if (TheTriple == "cpu0" || TheTriple == "cpu0el") {
     if (CPU.empty() || CPU == "cpu032I") {
       Cpu0ArchFeature = "+cpu032I";
+    } else if (CPU == "cpu032II") {
+      Cpu0ArchFeature = "+cpu032II";
     }
   }
   return Cpu0ArchFeature;
