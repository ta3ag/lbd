diff -Naur Chapter11_1/CMakeLists.txt Chapter12_1/CMakeLists.txt
--- Chapter11_1/CMakeLists.txt	2013-12-27 15:52:01.377977129 +0800
+++ Chapter12_1/CMakeLists.txt	2013-12-27 15:52:01.414977127 +0800
@@ -26,6 +26,7 @@
 add_llvm_target(Cpu0CodeGen
   Cpu0AnalyzeImmediate.cpp
   Cpu0AsmPrinter.cpp
+  Cpu0DelUselessJMP.cpp
   Cpu0EmitGPRestore.cpp
   Cpu0InstrInfo.cpp
   Cpu0ISelDAGToDAG.cpp
diff -Naur Chapter11_1/Cpu0DelUselessJMP.cpp Chapter12_1/Cpu0DelUselessJMP.cpp
--- Chapter11_1/Cpu0DelUselessJMP.cpp	1970-01-01 08:00:00.000000000 +0800
+++ Chapter12_1/Cpu0DelUselessJMP.cpp	2013-12-27 15:52:01.419977127 +0800
@@ -0,0 +1,99 @@
+//===-- Cpu0DelUselessJMP.cpp - Cpu0 DelJmp -------------------------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// Simple pass to fills delay slots with useful instructions.
+//
+//===----------------------------------------------------------------------===//
+
+#define DEBUG_TYPE "del-jmp"
+
+#include "Cpu0.h"
+#include "Cpu0TargetMachine.h"
+#include "llvm/CodeGen/MachineFunctionPass.h"
+#include "llvm/Support/CommandLine.h"
+#include "llvm/Target/TargetMachine.h"
+#include "llvm/Target/TargetInstrInfo.h"
+#include "llvm/ADT/SmallSet.h"
+#include "llvm/ADT/Statistic.h"
+
+using namespace llvm;
+
+STATISTIC(NumDelJmp, "Number of useless jmp deleted");
+
+static cl::opt<bool> EnableDelJmp(
+  "enable-cpu0-del-useless-jmp",
+  cl::init(true),
+  cl::desc("Delete useless jmp instructions: jmp 0."),
+  cl::Hidden);
+
+namespace {
+  struct DelJmp : public MachineFunctionPass {
+
+    TargetMachine &TM;
+    const TargetInstrInfo *TII;
+
+    static char ID;
+    DelJmp(TargetMachine &tm)
+      : MachineFunctionPass(ID), TM(tm), TII(tm.getInstrInfo()) { }
+
+    virtual const char *getPassName() const {
+      return "Cpu0 Del Useless jmp";
+    }
+
+    bool runOnMachineBasicBlock(MachineBasicBlock &MBB, MachineBasicBlock &MBBN);
+    bool runOnMachineFunction(MachineFunction &F) {
+      bool Changed = false;
+      if (EnableDelJmp) {
+        MachineFunction::iterator FJ = F.begin();
+        if (FJ != F.end())
+          FJ++;
+        if (FJ == F.end())
+          return Changed;
+        for (MachineFunction::iterator FI = F.begin(), FE = F.end();
+             FJ != FE; ++FI, ++FJ)
+          // In STL style, F.end() is the dummy BasicBlock() like '\0' in 
+          //  C string. 
+          // FJ is the next BasicBlock of FI; When FI range from F.begin() to 
+          //  the PreviousBasicBlock of F.end() call runOnMachineBasicBlock().
+          Changed |= runOnMachineBasicBlock(*FI, *FJ);
+      }
+      return Changed;
+    }
+
+  };
+  char DelJmp::ID = 0;
+} // end of anonymous namespace
+
+bool DelJmp::
+runOnMachineBasicBlock(MachineBasicBlock &MBB, MachineBasicBlock &MBBN) {
+  bool Changed = false;
+
+  MachineBasicBlock::iterator I = MBB.end();
+  if (I != MBB.begin())
+    I--;	// set I to the last instruction
+  else
+    return Changed;
+    
+  if (I->getOpcode() == Cpu0::JMP && I->getOperand(0).getMBB() == &MBBN) {
+    // I is the instruction of "jmp #offset=0", as follows,
+    //     jmp	$BB0_3
+    // $BB0_3:
+    //     ld	$4, 28($sp)
+    ++NumDelJmp;
+    MBB.erase(I);	// delete the "JMP 0" instruction
+    Changed = true;	// Notify LLVM kernel Changed
+  }
+  return Changed;
+
+}
+
+/// createCpu0DelJmpPass - Returns a pass that DelJmp in Cpu0 MachineFunctions
+FunctionPass *llvm::createCpu0DelJmpPass(Cpu0TargetMachine &tm) {
+  return new DelJmp(tm);
+}
diff -Naur Chapter11_1/Cpu0.h Chapter12_1/Cpu0.h
--- Chapter11_1/Cpu0.h	2013-12-27 15:52:01.377977129 +0800
+++ Chapter12_1/Cpu0.h	2013-12-27 15:52:01.414977127 +0800
@@ -24,6 +24,7 @@
 
   FunctionPass *createCpu0ISelDag(Cpu0TargetMachine &TM);
   FunctionPass *createCpu0EmitGPRestorePass(Cpu0TargetMachine &TM);
+  FunctionPass *createCpu0DelJmpPass(Cpu0TargetMachine &TM);
 
 } // end namespace llvm;
 
diff -Naur Chapter11_1/Cpu0TargetMachine.cpp Chapter12_1/Cpu0TargetMachine.cpp
--- Chapter11_1/Cpu0TargetMachine.cpp	2013-12-27 15:52:01.379977129 +0800
+++ Chapter12_1/Cpu0TargetMachine.cpp	2013-12-27 15:52:01.419977127 +0800
@@ -84,6 +84,7 @@
   } // lbd document - mark - getCpu0Subtarget()
   virtual bool addInstSelector();
   virtual bool addPreRegAlloc();
+  virtual bool addPreEmitPass();
 };
 } // namespace
 
@@ -104,3 +105,12 @@
   addPass(createCpu0EmitGPRestorePass(getCpu0TargetMachine()));
   return true;
 }
+
+// Implemented by targets that want to run passes immediately before
+// machine code is emitted. return true if -print-machineinstrs should
+// print out the code after the passes.
+bool Cpu0PassConfig::addPreEmitPass() {
+  Cpu0TargetMachine &TM = getCpu0TargetMachine();
+  addPass(createCpu0DelJmpPass(TM));
+  return true;
+}
