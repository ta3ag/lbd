diff -Naur Chapter3_3/Cpu0InstrFormats.td Chapter3_4/Cpu0InstrFormats.td
--- Chapter3_3/Cpu0InstrFormats.td	2013-12-27 15:52:00.946977146 +0800
+++ Chapter3_4/Cpu0InstrFormats.td	2013-12-27 15:52:00.971977145 +0800
@@ -69,6 +69,13 @@
   field bits<32> SoftFail = 0;
 } // lbd document - mark - class Cpu0Inst
 
+// Cpu0 Pseudo Instructions Format
+class Cpu0Pseudo<dag outs, dag ins, string asmstr, list<dag> pattern>:
+      Cpu0Inst<outs, ins, asmstr, pattern, IIPseudo, Pseudo> {
+  let isCodeGenOnly = 1;
+  let isPseudo = 1;
+}
+
 //===----------------------------------------------------------------------===//
 // Format A instruction class in Cpu0 : <|opcode|ra|rb|rc|cx|>
 //===----------------------------------------------------------------------===//
diff -Naur Chapter3_3/Cpu0InstrInfo.cpp Chapter3_4/Cpu0InstrInfo.cpp
--- Chapter3_3/Cpu0InstrInfo.cpp	2013-12-27 15:52:00.946977146 +0800
+++ Chapter3_4/Cpu0InstrInfo.cpp	2013-12-27 15:52:00.970977145 +0800
@@ -37,3 +37,25 @@
   return &*MIB;
 } // lbd document - mark - emitFrameIndexDebugValue
 
+// Cpu0InstrInfo::expandPostRAPseudo
+/// Expand Pseudo instructions into real backend instructions
+bool Cpu0InstrInfo::expandPostRAPseudo(MachineBasicBlock::iterator MI) const {
+  MachineBasicBlock &MBB = *MI->getParent();
+
+  switch(MI->getDesc().getOpcode()) {
+  default:
+    return false;
+  case Cpu0::RetLR:
+    ExpandRetLR(MBB, MI, Cpu0::RET);
+    break;
+  }
+
+  MBB.erase(MI);
+  return true;
+}
+
+void Cpu0InstrInfo::ExpandRetLR(MachineBasicBlock &MBB,
+                                MachineBasicBlock::iterator I,
+                                unsigned Opc) const {
+  BuildMI(MBB, I, I->getDebugLoc(), get(Opc)).addReg(Cpu0::LR);
+}
diff -Naur Chapter3_3/Cpu0InstrInfo.h Chapter3_4/Cpu0InstrInfo.h
--- Chapter3_3/Cpu0InstrInfo.h	2013-12-27 15:52:00.947977146 +0800
+++ Chapter3_4/Cpu0InstrInfo.h	2013-12-27 15:52:00.971977145 +0800
@@ -41,6 +41,13 @@
                                                  const MDNode *MDPtr,
                                                  DebugLoc DL) const;
   // lbd document - mark - emitFrameIndexDebugValue
+
+  /// Expand Pseudo instructions into real backend instructions
+  virtual bool expandPostRAPseudo(MachineBasicBlock::iterator MI) const;
+
+private:
+  void ExpandRetLR(MachineBasicBlock &MBB, MachineBasicBlock::iterator I,
+                   unsigned Opc) const;
 };
 }
 
diff -Naur Chapter3_3/Cpu0InstrInfo.td Chapter3_4/Cpu0InstrInfo.td
--- Chapter3_3/Cpu0InstrInfo.td	2013-12-27 15:52:00.946977146 +0800
+++ Chapter3_4/Cpu0InstrInfo.td	2013-12-27 15:52:00.971977145 +0800
@@ -156,6 +156,9 @@
 // IR "add" defined in include/llvm/Target/TargetSelectionDAG.td, line 315 (def add).
 def ADDiu   : ArithLogicI<0x09, "addiu", add, simm16, immSExt16, CPURegs>;
 
+let isReturn=1, isTerminator=1, hasDelaySlot=1, isBarrier=1, hasCtrlDep=1 in
+  def RetLR : Cpu0Pseudo<(outs), (ins), "", [(Cpu0Ret)]>;
+
 def RET     : RetBase<CPURegs>;
 
 //===----------------------------------------------------------------------===//
