Can build with c11 option.

1. Install cloog which depend on GMP as follows,
  http://www.cloog.org/
  https://gmplib.org/
2. Install llvm, clang and polly:
  clang and polly put in llvm/tools/

3. Use polly:
alias pollycc="~/test/polly/cmake_debug_build/bin/clang -Xclang -load -Xclang ~/test/polly/cmake_debug_build/lib/LLVMPolly.so"
pollycc -mllvm -polly -O3 ch8_1_3.cpp -o a.polly.out
or, 
~/test/polly/cmake_debug_build/bin/clang -Xclang -load -Xclang ~/test/polly/cmake_debug_build/lib/LLVMPolly.so -mllvm -polly -O3 ch8_1_3.cpp -o a.polly.out

4. Reference:
http://comments.gmane.org/gmane.comp.compilers.llvm.devel/60547
Polly-basic:  clang -Xclang -load -Xclang LLVMPolly.so -O3  (! load polly but no use of polly optimization)
Polly-optimize: clang -Xclang -load -Xclang LLVMPolly.so -mllvm -polly -O3 (use polly optimization)

5. Run polly_cschen.sh to get llvm/clang/polly source and build it on dir llvm_build.
   Run polly_cschen_arm.sh to build it with llvm arm toolchain on dir llvm_arm_build.
6. Run example code for polly and compare the result with non-polly as the following commands
  cd polly_ex && ./runtime.sh  // for PC/X86

  cd polly_ex && ./build-matmul-arm.sh            // build with llvm arm
  time ./matmul                                   // non-polly clang -O3
  time ./matmul.polly                             // polly clang -O3

  time ./pmatmul > pmatmul.result
  time ./pmatmul.polly > pmatmul.polly.result
  diff pmatmul.result pmatmul.polly.result        // to ensure the outputs is same

