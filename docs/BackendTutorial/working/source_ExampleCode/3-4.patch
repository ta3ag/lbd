diff -Naur Chapter3_3/Cpu0CallingConv.td Chapter3_4/Cpu0CallingConv.td
--- Chapter3_3/Cpu0CallingConv.td	2014-03-02 21:53:02.000000000 +0800
+++ Chapter3_4/Cpu0CallingConv.td	2014-03-02 21:53:02.000000000 +0800
@@ -13,6 +13,15 @@
 class CCIfSubtarget<string F, CCAction A>:
   CCIf<!strconcat("State.getTarget().getSubtarget<Cpu0Subtarget>().", F), A>;
 
+def RetCC_Cpu0EABI : CallingConv<[
+  // i32 are returned in registers V0, V1, A0, A1
+  CCIfType<[i32], CCAssignToReg<[V0, V1, A0, A1]>>
+]>;
+
+def RetCC_Cpu0 : CallingConv<[
+  CCDelegateTo<RetCC_Cpu0EABI>
+]>; // lbd document - mark - def RetCC_Cpu0
+
 def CSR_O32 : CalleeSavedRegs<(add LR, FP,
                                    (sequence "S%u", 1, 0))>;
 
diff -Naur Chapter3_3/Cpu0ISelLowering.cpp Chapter3_4/Cpu0ISelLowering.cpp
--- Chapter3_3/Cpu0ISelLowering.cpp	2014-03-02 21:53:02.000000000 +0800
+++ Chapter3_4/Cpu0ISelLowering.cpp	2014-03-02 21:55:23.000000000 +0800
@@ -78,6 +78,58 @@
                                 const SmallVectorImpl<SDValue> &OutVals,
                                 SDLoc DL, SelectionDAG &DAG) const {
 
-    return DAG.getNode(Cpu0ISD::Ret, DL, MVT::Other,
-                       Chain, DAG.getRegister(Cpu0::LR, MVT::i32));
+  // CCValAssign - represent the assignment of
+  // the return value to a location
+  SmallVector<CCValAssign, 16> RVLocs;
+
+  // CCState - Info about the registers and stack slot.
+  CCState CCInfo(CallConv, isVarArg, DAG.getMachineFunction(),
+		 getTargetMachine(), RVLocs, *DAG.getContext());
+
+  // Analize return values.
+  CCInfo.AnalyzeReturn(Outs, RetCC_Cpu0);
+
+  SDValue Flag;
+  SmallVector<SDValue, 4> RetOps(1, Chain);
+
+  // Copy the result values into the output registers.
+  for (unsigned i = 0; i != RVLocs.size(); ++i) {
+    CCValAssign &VA = RVLocs[i];
+    assert(VA.isRegLoc() && "Can only return in registers!");
+
+    Chain = DAG.getCopyToReg(Chain, DL, VA.getLocReg(), OutVals[i], Flag);
+
+    // Guarantee that all emitted copies are stuck together with flags.
+    Flag = Chain.getValue(1);
+    RetOps.push_back(DAG.getRegister(VA.getLocReg(), VA.getLocVT()));
+  }
+
+#if 1 // structure return begin. Without this, it will use $3 instead of $2 
+  // as return register. The cpu0 ABIs for returning structs by value requires 
+  // that we copy the sret argument into $v0 for the return. We saved the 
+  // argument into a virtual register in the entry block, so now we copy the 
+  // value out and into $v0.
+  if (DAG.getMachineFunction().getFunction()->hasStructRetAttr()) {
+    MachineFunction &MF      = DAG.getMachineFunction();
+    Cpu0FunctionInfo *Cpu0FI = MF.getInfo<Cpu0FunctionInfo>();
+    unsigned Reg = Cpu0FI->getSRetReturnReg();
+
+    if (!Reg)
+      llvm_unreachable("sret virtual register not created in the entry block");
+    SDValue Val = DAG.getCopyFromReg(Chain, DL, Reg, getPointerTy());
+
+    Chain = DAG.getCopyToReg(Chain, DL, Cpu0::V0, Val, Flag);
+    Flag = Chain.getValue(1);
+    RetOps.push_back(DAG.getRegister(Cpu0::V0, getPointerTy()));
+  }
+#endif // structure return end
+
+  RetOps[0] = Chain;  // Update chain.
+
+  // Add the flag if we have it.
+  if (Flag.getNode())
+    RetOps.push_back(Flag);
+
+  // Return on Cpu0 is always a "ret $lr"
+  return DAG.getNode(Cpu0ISD::Ret, DL, MVT::Other, &RetOps[0], RetOps.size());
 }
diff -Naur Chapter3_3/Cpu0InstrFormats.td Chapter3_4/Cpu0InstrFormats.td
--- Chapter3_3/Cpu0InstrFormats.td	2014-03-02 21:53:02.000000000 +0800
+++ Chapter3_4/Cpu0InstrFormats.td	2014-03-02 21:53:02.000000000 +0800
@@ -69,6 +69,13 @@
   field bits<32> SoftFail = 0;
 } // lbd document - mark - class Cpu0Inst
 
+// Cpu0 Pseudo Instructions Format
+class Cpu0Pseudo<dag outs, dag ins, string asmstr, list<dag> pattern>:
+      Cpu0Inst<outs, ins, asmstr, pattern, IIPseudo, Pseudo> {
+  let isCodeGenOnly = 1;
+  let isPseudo = 1;
+}
+
 //===----------------------------------------------------------------------===//
 // Format A instruction class in Cpu0 : <|opcode|ra|rb|rc|cx|>
 //===----------------------------------------------------------------------===//
diff -Naur Chapter3_3/Cpu0InstrInfo.cpp Chapter3_4/Cpu0InstrInfo.cpp
--- Chapter3_3/Cpu0InstrInfo.cpp	2014-03-02 21:53:02.000000000 +0800
+++ Chapter3_4/Cpu0InstrInfo.cpp	2014-03-02 21:53:02.000000000 +0800
@@ -37,3 +37,25 @@
   return &*MIB;
 } // lbd document - mark - emitFrameIndexDebugValue
 
+// Cpu0InstrInfo::expandPostRAPseudo
+/// Expand Pseudo instructions into real backend instructions
+bool Cpu0InstrInfo::expandPostRAPseudo(MachineBasicBlock::iterator MI) const {
+  MachineBasicBlock &MBB = *MI->getParent();
+
+  switch(MI->getDesc().getOpcode()) {
+  default:
+    return false;
+  case Cpu0::RetLR:
+    ExpandRetLR(MBB, MI, Cpu0::RET);
+    break;
+  }
+
+  MBB.erase(MI);
+  return true;
+}
+
+void Cpu0InstrInfo::ExpandRetLR(MachineBasicBlock &MBB,
+                                MachineBasicBlock::iterator I,
+                                unsigned Opc) const {
+  BuildMI(MBB, I, I->getDebugLoc(), get(Opc)).addReg(Cpu0::LR);
+}
diff -Naur Chapter3_3/Cpu0InstrInfo.h Chapter3_4/Cpu0InstrInfo.h
--- Chapter3_3/Cpu0InstrInfo.h	2014-03-02 21:53:02.000000000 +0800
+++ Chapter3_4/Cpu0InstrInfo.h	2014-03-02 21:53:02.000000000 +0800
@@ -41,6 +41,13 @@
                                                  const MDNode *MDPtr,
                                                  DebugLoc DL) const;
   // lbd document - mark - emitFrameIndexDebugValue
+
+  /// Expand Pseudo instructions into real backend instructions
+  virtual bool expandPostRAPseudo(MachineBasicBlock::iterator MI) const;
+
+private:
+  void ExpandRetLR(MachineBasicBlock &MBB, MachineBasicBlock::iterator I,
+                   unsigned Opc) const;
 };
 }
 
diff -Naur Chapter3_3/Cpu0InstrInfo.td Chapter3_4/Cpu0InstrInfo.td
--- Chapter3_3/Cpu0InstrInfo.td	2014-03-02 21:53:02.000000000 +0800
+++ Chapter3_4/Cpu0InstrInfo.td	2014-03-02 21:53:02.000000000 +0800
@@ -164,6 +164,9 @@
 // IR "add" defined in include/llvm/Target/TargetSelectionDAG.td, line 315 (def add).
 def ADDiu   : ArithLogicI<0x09, "addiu", add, simm16, immSExt16, CPURegs>;
 
+let isReturn=1, isTerminator=1, hasDelaySlot=1, isBarrier=1, hasCtrlDep=1 in
+  def RetLR : Cpu0Pseudo<(outs), (ins), "", [(Cpu0Ret)]>;
+
 def RET     : RetBase<GPROut>;
 
 //===----------------------------------------------------------------------===//
diff -Naur Chapter3_3/Cpu0MachineFunction.h Chapter3_4/Cpu0MachineFunction.h
--- Chapter3_3/Cpu0MachineFunction.h	2014-03-02 21:53:02.000000000 +0800
+++ Chapter3_4/Cpu0MachineFunction.h	2014-03-02 21:54:50.000000000 +0800
@@ -24,16 +24,26 @@
 /// Cpu0 target-specific information for each MachineFunction.
 class Cpu0FunctionInfo : public MachineFunctionInfo {
   MachineFunction& MF;
+
+  /// SRetReturnReg - Some subtargets require that sret lowering includes
+  /// returning the value of the returned struct in a register. This field
+  /// holds the virtual register into which the sret argument is passed.
+  unsigned SRetReturnReg;
+
   unsigned MaxCallFrameSize;
   bool EmitNOAT;
 
 public:
   Cpu0FunctionInfo(MachineFunction& MF)
   : MF(MF), 
+    SRetReturnReg(0),
     EmitNOAT(false), 
     MaxCallFrameSize(0)
     {}
 
+  unsigned getSRetReturnReg() const { return SRetReturnReg; }
+  void setSRetReturnReg(unsigned Reg) { SRetReturnReg = Reg; }
+
   unsigned getMaxCallFrameSize() const { return MaxCallFrameSize; }
   void setMaxCallFrameSize(unsigned S) { MaxCallFrameSize = S; }
   bool getEmitNOAT() const { return EmitNOAT; }
