diff -Naur Chapter9_3/Cpu0FrameLowering.cpp Chapter9_4/Cpu0FrameLowering.cpp
--- Chapter9_3/Cpu0FrameLowering.cpp	2014-03-02 22:56:51.000000000 +0800
+++ Chapter9_4/Cpu0FrameLowering.cpp	2014-03-02 22:56:51.000000000 +0800
@@ -133,6 +133,10 @@
   DebugLoc dl = MBBI != MBB.end() ? MBBI->getDebugLoc() : DebugLoc();
   unsigned SP = Cpu0::SP;
  // lbd document - mark - Cpu0::SP
+  unsigned FP = Cpu0::FP;
+  unsigned ZERO = Cpu0::ZERO;
+  unsigned ADDu = Cpu0::ADDu;
+ // lbd document - mark - Cpu0::ADDu
   unsigned ADDiu = Cpu0::ADDiu;
   // First, compute final stack size.
   unsigned StackAlign = getStackAlignment();
@@ -195,12 +199,25 @@
     }
   }
   
+  // if framepointer enabled, set it to point to the stack pointer.
+  if (hasFP(MF)) {
+    // Insert instruction "move $fp, $sp" at this location.
+    BuildMI(MBB, MBBI, dl, TII.get(ADDu), FP).addReg(SP).addReg(ZERO);
+
+    // emit ".cfi_def_cfa_register $fp"
+    MCSymbol *SetFPLabel = MMI.getContext().CreateTempSymbol();
+    BuildMI(MBB, MBBI, dl,
+            TII.get(TargetOpcode::PROLOG_LABEL)).addSym(SetFPLabel);
+    MMI.addFrameInst(MCCFIInstruction::createDefCfaRegister(
+        SetFPLabel, MRI->getDwarfRegNum(FP, true)));
+  }
+
   // Restore GP from the saved stack location
   if (Cpu0FI->needGPSaveRestore()) {
     unsigned Offset = MFI->getObjectOffset(Cpu0FI->getGPFI());
     BuildMI(MBB, MBBI, dl, TII.get(Cpu0::CPRESTORE)).addImm(Offset)
       .addReg(Cpu0::GP);
-  }
+  } // lbd document - mark - if (Cpu0FI->needGPSaveRestore())
 }
 
 void Cpu0FrameLowering::emitEpilogue(MachineFunction &MF,
@@ -213,8 +230,24 @@
   DebugLoc dl = MBBI->getDebugLoc();
   unsigned SP = Cpu0::SP;
  // lbd document - mark - emitEpilogue() Cpu0::SP
+  unsigned FP = Cpu0::FP;
+  unsigned ZERO = Cpu0::ZERO;
+  unsigned ADDu = Cpu0::ADDu;
+ // lbd document - mark - emitEpilogue() Cpu0::ADDu
   unsigned ADDiu = Cpu0::ADDiu;
 
+  // if framepointer enabled, restore the stack pointer.
+  if (hasFP(MF)) {
+    // Find the first instruction that restores a callee-saved register.
+    MachineBasicBlock::iterator I = MBBI;
+
+    for (unsigned i = 0; i < MFI->getCalleeSavedInfo().size(); ++i)
+      --I;
+
+    // Insert instruction "move $sp, $fp" at this location.
+    BuildMI(MBB, I, dl, TII.get(ADDu), SP).addReg(FP).addReg(ZERO);
+  } // lbd document - mark - emitEpilogue() if (hasFP(MF))
+
   // Get the number of bytes from FrameInfo
   uint64_t StackSize = MFI->getStackSize();
 
@@ -230,6 +263,37 @@
   }
 }
 
+bool Cpu0FrameLowering::spillCalleeSavedRegisters(
+                          MachineBasicBlock &MBB,
+                          MachineBasicBlock::iterator MI,
+                          const std::vector<CalleeSavedInfo> &CSI,
+                          const TargetRegisterInfo *TRI) const {
+  MachineFunction *MF = MBB.getParent();
+  MachineBasicBlock *EntryBlock = MF->begin();
+  const TargetInstrInfo &TII = *MF->getTarget().getInstrInfo();
+
+  for (unsigned i = 0, e = CSI.size(); i != e; ++i) {
+    // Add the callee-saved register as live-in. Do not add if the register is
+    // RA and return address is taken, because it has already been added in
+    // method Cpu0TargetLowering::LowerRETURNADDR.
+    // It's killed at the spill, unless the register is RA and return address
+    // is taken.
+    unsigned Reg = CSI[i].getReg();
+    bool IsRAAndRetAddrIsTaken = (Reg == Cpu0::LR)
+        && MF->getFrameInfo()->isReturnAddressTaken();
+    if (!IsRAAndRetAddrIsTaken)
+      EntryBlock->addLiveIn(Reg);
+
+    // Insert the spill to the stack frame.
+    bool IsKill = !IsRAAndRetAddrIsTaken;
+    const TargetRegisterClass *RC = TRI->getMinimalPhysRegClass(Reg);
+    TII.storeRegToStackSlot(*EntryBlock, MI, Reg, IsKill,
+                            CSI[i].getFrameIdx(), RC, TRI);
+  }
+
+  return true;
+}
+
 // This function eliminate ADJCALLSTACKDOWN,
 // ADJCALLSTACKUP pseudo instructions
 void Cpu0FrameLowering::
@@ -265,6 +329,12 @@
 processFunctionBeforeCalleeSavedScan(MachineFunction &MF,
                                      RegScavenger *RS) const {
   MachineRegisterInfo& MRI = MF.getRegInfo();
+  Cpu0FunctionInfo *Cpu0FI = MF.getInfo<Cpu0FunctionInfo>();
+  unsigned FP = Cpu0::FP;
+
+  // Mark $fp as used if function has dedicated frame pointer.
+  if (hasFP(MF))
+    MRI.setPhysRegUsed(FP);
 
   // FIXME: remove this code if register allocator can correctly mark
   //        $fp and $ra used or unused.
diff -Naur Chapter9_3/Cpu0FrameLowering.h Chapter9_4/Cpu0FrameLowering.h
--- Chapter9_3/Cpu0FrameLowering.h	2014-03-02 22:56:51.000000000 +0800
+++ Chapter9_4/Cpu0FrameLowering.h	2014-03-02 22:56:51.000000000 +0800
@@ -38,6 +38,10 @@
   void eliminateCallFramePseudoInstr(MachineFunction &MF,
                                      MachineBasicBlock &MBB,
                                      MachineBasicBlock::iterator I) const;
+  bool spillCalleeSavedRegisters(MachineBasicBlock &MBB,
+                                 MachineBasicBlock::iterator MI,
+                                 const std::vector<CalleeSavedInfo> &CSI,
+                                 const TargetRegisterInfo *TRI) const;
   void processFunctionBeforeCalleeSavedScan(MachineFunction &MF,
                                             RegScavenger *RS) const;
 };
diff -Naur Chapter9_3/Cpu0ISelLowering.cpp Chapter9_4/Cpu0ISelLowering.cpp
--- Chapter9_3/Cpu0ISelLowering.cpp	2014-03-02 22:56:51.000000000 +0800
+++ Chapter9_4/Cpu0ISelLowering.cpp	2014-03-02 22:56:51.000000000 +0800
@@ -143,6 +143,7 @@
   setOperationAction(ISD::GlobalAddress,      MVT::i32,   Custom);
   setOperationAction(ISD::SELECT,             MVT::i32,   Custom);
   setOperationAction(ISD::BRCOND,             MVT::Other, Custom);
+  setOperationAction(ISD::VASTART,            MVT::Other, Custom);
 
   // Cpu0 doesn't have sext_inreg, replace them with shl/sra.
   setOperationAction(ISD::SIGN_EXTEND_INREG, MVT::i1 , Expand);
@@ -155,6 +156,13 @@
   // Operations not directly supported by Cpu0.
   setOperationAction(ISD::BR_CC,             MVT::i32, Expand);
   setOperationAction(ISD::SELECT_CC,         MVT::Other, Expand);
+  setOperationAction(ISD::DYNAMIC_STACKALLOC, MVT::i32,  Expand);
+
+  // Support va_arg(): variable numbers (not fixed numbers) of arguments 
+  //  (parameters) for function all
+  setOperationAction(ISD::VAARG,             MVT::Other, Expand);
+  setOperationAction(ISD::VACOPY,            MVT::Other, Expand);
+  setOperationAction(ISD::VAEND,             MVT::Other, Expand);
 
   setTargetDAGCombine(ISD::SDIVREM);
   setTargetDAGCombine(ISD::UDIVREM);
@@ -163,6 +171,8 @@
 // It will emit .align 2 later
   setMinFunctionAlignment(2);
 
+  setStackPointerRegisterToSaveRestore(Cpu0::SP);
+
 // must, computeRegisterProperties - Once all of the register classes are 
 //  added, this allows us to compute derived properties we expose.
   computeRegisterProperties();
@@ -229,6 +239,7 @@
     case ISD::BRCOND:             return LowerBRCOND(Op, DAG);
     case ISD::GlobalAddress:      return LowerGlobalAddress(Op, DAG);
     case ISD::SELECT:             return lowerSELECT(Op, DAG);
+    case ISD::VASTART:            return LowerVASTART(Op, DAG);
   }
   return SDValue();
 }
@@ -237,6 +248,18 @@
 //  Lower helper functions
 //===----------------------------------------------------------------------===//
 
+// AddLiveIn - This helper function adds the specified physical register to the
+// MachineFunction as a live in value.  It also creates a corresponding
+// virtual register for it.
+static unsigned
+AddLiveIn(MachineFunction &MF, unsigned PReg, const TargetRegisterClass *RC)
+{
+  assert(RC->contains(PReg) && "Not the correct regclass!");
+  unsigned VReg = MF.getRegInfo().createVirtualRegister(RC);
+  MF.getRegInfo().addLiveIn(PReg, VReg);
+  return VReg;
+}
+
 //===----------------------------------------------------------------------===//
 //  Misc Lower Operation implementation
 //===----------------------------------------------------------------------===//
@@ -291,8 +314,63 @@
                                  Cpu0II::MO_GOT_LO16);
 }
 
+SDValue Cpu0TargetLowering::LowerVASTART(SDValue Op, SelectionDAG &DAG) const {
+  MachineFunction &MF = DAG.getMachineFunction();
+  Cpu0FunctionInfo *FuncInfo = MF.getInfo<Cpu0FunctionInfo>();
+
+  SDLoc DL = SDLoc(Op);
+  SDValue FI = DAG.getFrameIndex(FuncInfo->getVarArgsFrameIndex(),
+                                 getPointerTy());
+
+  // vastart just stores the address of the VarArgsFrameIndex slot into the
+  // memory location argument.
+  const Value *SV = cast<SrcValueSDNode>(Op.getOperand(2))->getValue();
+  return DAG.getStore(Op.getOperand(0), DL, FI, Op.getOperand(1),
+                      MachinePointerInfo(SV), false, false, 0);
+}
+
 #include "Cpu0GenCallingConv.inc"
 
+//===----------------------------------------------------------------------===//
+//                  Call Calling Convention Implementation
+//===----------------------------------------------------------------------===//
+
+static const unsigned IntRegsSize = 2;
+
+static const uint16_t IntRegs[] = {
+  Cpu0::A0, Cpu0::A1
+};
+
+// Write ByVal Arg to arg registers and stack.
+static void
+WriteByValArg(SDValue& ByValChain, SDValue Chain, SDLoc DL,
+              SmallVector<std::pair<unsigned, SDValue>, 16>& RegsToPass,
+              SmallVector<SDValue, 8>& MemOpChains, int& LastFI,
+              MachineFrameInfo *MFI, SelectionDAG &DAG, SDValue Arg,
+              const CCValAssign &VA, const ISD::ArgFlagsTy& Flags,
+              MVT PtrType, bool isLittle) {
+  unsigned LocMemOffset = VA.getLocMemOffset();
+  unsigned Offset = 0;
+  uint32_t RemainingSize = Flags.getByValSize();
+  unsigned ByValAlign = Flags.getByValAlign();
+
+  if (RemainingSize == 0)
+    return;
+
+  // Create a fixed object on stack at offset LocMemOffset and copy
+  // remaining part of byval arg to it using memcpy.
+  SDValue Src = DAG.getNode(ISD::ADD, DL, MVT::i32, Arg,
+                            DAG.getConstant(Offset, MVT::i32));
+  LastFI = MFI->CreateFixedObject(RemainingSize, LocMemOffset, true);
+  SDValue Dst = DAG.getFrameIndex(LastFI, PtrType);
+  ByValChain = DAG.getMemcpy(ByValChain, DL, Dst, Src,
+                             DAG.getConstant(RemainingSize, MVT::i32),
+                             std::min(ByValAlign, (unsigned)4),
+                             /*isVolatile=*/false, /*AlwaysInline=*/false,
+                             MachinePointerInfo(0), MachinePointerInfo(0));
+} // lbd document - mark - WriteByValArg
+
+// lbd document - mark - before LowerCall
 SDValue
 Cpu0TargetLowering::LowerCall(TargetLowering::CallLoweringInfo &CLI,
                               SmallVectorImpl<SDValue> &InVals) const {
@@ -375,6 +453,9 @@
       assert("!!!Error!!!, Flags.isByVal()==true");
       assert(Flags.getByValSize() &&
              "ByVal args of size 0 should have been ignored by front-end.");
+      WriteByValArg(ByValChain, Chain, DL, RegsToPass, MemOpChains, LastFI,
+                    MFI, DAG, Arg, VA, Flags, getPointerTy(),
+                    Subtarget->isLittle());
       continue;
     }
 
@@ -552,6 +633,34 @@
   return Chain;
 }
 
+//===----------------------------------------------------------------------===//
+//             Formal Arguments Calling Convention Implementation
+//===----------------------------------------------------------------------===//
+static void ReadByValArg(MachineFunction &MF, SDValue Chain, SDLoc DL,
+                         std::vector<SDValue>& OutChains,
+                         SelectionDAG &DAG, unsigned NumWords, SDValue FIN,
+                         const CCValAssign &VA, const ISD::ArgFlagsTy& Flags,
+                         const Argument *FuncArg) {
+  unsigned LocMem = VA.getLocMemOffset();
+  unsigned FirstWord = LocMem / 4;
+
+  // copy register A0 - A1 to frame object
+  for (unsigned i = 0; i < NumWords; ++i) {
+    unsigned CurWord = FirstWord + i;
+    if (CurWord >= IntRegsSize)
+      break;
+
+    unsigned SrcReg = IntRegs[CurWord];
+    unsigned Reg = AddLiveIn(MF, SrcReg, &Cpu0::CPURegsRegClass);
+    SDValue StorePtr = DAG.getNode(ISD::ADD, DL, MVT::i32, FIN,
+                                   DAG.getConstant(i * 4, MVT::i32));
+    SDValue Store = DAG.getStore(Chain, DL, DAG.getRegister(Reg, MVT::i32),
+                                 StorePtr, MachinePointerInfo(FuncArg, i * 4),
+                                 false, false, 0);
+    OutChains.push_back(Store);
+  }
+} // lbd document - mark - ReadByValArg
+
 /// LowerFormalArguments - transform physical registers into virtual registers
 /// and generate load operations for arguments places on the stack.
 SDValue
@@ -590,8 +699,16 @@
     if (Flags.isByVal()) {
       assert(Flags.getByValSize() &&
              "ByVal args of size 0 should have been ignored by front-end."); 
+      unsigned NumWords = (Flags.getByValSize() + 3) / 4;
+      LastFI = MFI->CreateFixedObject(NumWords * 4, VA.getLocMemOffset(),
+                                      true);
+      SDValue FIN = DAG.getFrameIndex(LastFI, getPointerTy());
+      InVals.push_back(FIN);
+      ReadByValArg(MF, Chain, DL, OutChains, DAG, NumWords, FIN, VA, Flags,
+                   &*FuncArg);
       continue;
     }
+
     // sanity check
     assert(VA.isMemLoc());
 
@@ -605,6 +722,37 @@
                                  MachinePointerInfo::getFixedStack(LastFI),
                                  false, false, false, 0));
   }
+
+#if 1 // Incomming. Without this, it will use $3 instead of $2 as return 
+  // register. The cpu0 ABIs for returning structs by value requires that we 
+  // copy the sret argument into $v0 for the return. Save the argument into
+  // a virtual register so that we can access it from the return points.
+  if (DAG.getMachineFunction().getFunction()->hasStructRetAttr()) {
+    unsigned Reg = Cpu0FI->getSRetReturnReg();
+    if (!Reg) {
+      Reg = MF.getRegInfo().createVirtualRegister(getRegClassFor(MVT::i32));
+      Cpu0FI->setSRetReturnReg(Reg);
+    }
+    SDValue Copy = DAG.getCopyToReg(DAG.getEntryNode(), DL, Reg, InVals[0]);
+    Chain = DAG.getNode(ISD::TokenFactor, DL, MVT::Other, Copy, Chain);
+  }
+#endif // lbd document - mark - endif - hasStructRetAttr()
+
+  if (isVarArg) {
+    int FirstRegSlotOffset = 0; // offset of $a0's slot.
+    unsigned RegSize = Cpu0::CPURegsRegClass.getSize();
+    int RegSlotOffset = FirstRegSlotOffset + ArgLocs.size() * RegSize;
+
+    // Offset of the first variable argument from stack pointer.
+    int FirstVaArgOffset;
+
+    FirstVaArgOffset = RegSlotOffset;
+
+    // Record the frame index of the first variable argument
+    // which is a value necessary to VASTART.
+    LastFI = MFI->CreateFixedObject(RegSize, FirstVaArgOffset, true);
+    Cpu0FI->setVarArgsFrameIndex(LastFI);
+  } // lbd document - mark - if (isVarArg)
   Cpu0FI->setLastInArgFI(LastFI);
   // All stores are grouped in one node to allow the matching between
   // the size of Ins and InVals. This only happens when on varg functions
diff -Naur Chapter9_3/Cpu0ISelLowering.h Chapter9_4/Cpu0ISelLowering.h
--- Chapter9_3/Cpu0ISelLowering.h	2014-03-02 22:56:51.000000000 +0800
+++ Chapter9_4/Cpu0ISelLowering.h	2014-03-02 22:56:51.000000000 +0800
@@ -97,6 +97,7 @@
     SDValue LowerBRCOND(SDValue Op, SelectionDAG &DAG) const;
     SDValue lowerSELECT(SDValue Op, SelectionDAG &DAG) const;
     SDValue LowerGlobalAddress(SDValue Op, SelectionDAG &DAG) const;
+    SDValue LowerVASTART(SDValue Op, SelectionDAG &DAG) const;
 
 	//- must be exist without function all
     virtual SDValue
diff -Naur Chapter9_3/Cpu0RegisterInfo.cpp Chapter9_4/Cpu0RegisterInfo.cpp
--- Chapter9_3/Cpu0RegisterInfo.cpp	2014-03-02 22:56:51.000000000 +0800
+++ Chapter9_4/Cpu0RegisterInfo.cpp	2014-03-02 22:56:51.000000000 +0800
@@ -77,6 +77,11 @@
   for (unsigned I = 0; I < array_lengthof(ReservedCPURegs); ++I)
     Reserved.set(ReservedCPURegs[I]);
 
+  // Reserve FP if this function should have a dedicated frame pointer register.
+  if (MF.getTarget().getFrameLowering()->hasFP(MF)) {
+    Reserved.set(Cpu0::FP);
+  }
+
   const Cpu0FunctionInfo *Cpu0FI = MF.getInfo<Cpu0FunctionInfo>();
   // Reserve GP if globalBaseRegFixed()
   if (Cpu0FI->globalBaseRegFixed())
