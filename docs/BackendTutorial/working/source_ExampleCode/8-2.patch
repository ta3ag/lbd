diff -Naur Chapter8_1/CMakeLists.txt Chapter8_2/CMakeLists.txt
--- Chapter8_1/CMakeLists.txt	2014-03-04 00:38:33.000000000 +0800
+++ Chapter8_2/CMakeLists.txt	2014-03-04 00:38:33.000000000 +0800
@@ -25,6 +25,7 @@
 add_llvm_target(Cpu0CodeGen
   Cpu0AnalyzeImmediate.cpp
   Cpu0AsmPrinter.cpp
+  Cpu0DelUselessJMP.cpp
   Cpu0InstrInfo.cpp
   Cpu0ISelDAGToDAG.cpp
   Cpu0ISelLowering.cpp
diff -Naur Chapter8_1/Cpu0.h Chapter8_2/Cpu0.h
--- Chapter8_1/Cpu0.h	2014-03-04 00:38:33.000000000 +0800
+++ Chapter8_2/Cpu0.h	2014-03-04 00:38:33.000000000 +0800
@@ -23,6 +23,7 @@
   class FunctionPass;
 
   FunctionPass *createCpu0ISelDag(Cpu0TargetMachine &TM);
+  FunctionPass *createCpu0DelJmpPass(Cpu0TargetMachine &TM);
 
 } // end namespace llvm;
 
diff -Naur Chapter8_1/Cpu0CondMov.td Chapter8_2/Cpu0CondMov.td
--- Chapter8_1/Cpu0CondMov.td	1970-01-01 08:00:00.000000000 +0800
+++ Chapter8_2/Cpu0CondMov.td	2014-03-04 00:38:33.000000000 +0800
@@ -0,0 +1,77 @@
+//===-- Cpu0CondMov.td - Describe Cpu0 Conditional Moves --*- tablegen -*--===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This is the Conditional Moves implementation.
+//
+//===----------------------------------------------------------------------===//
+
+// Conditional moves:
+// These instructions are expanded in
+// Cpu0ISelLowering::EmitInstrWithCustomInserter if target does not have
+// conditional move instructions.
+// cond:int, data:int
+class CondMovIntInt<RegisterClass CRC, RegisterClass DRC, bits<8> op,
+                    string instr_asm> :
+  FA<op, (outs DRC:$ra), (ins DRC:$rb, CRC:$rc, DRC:$F),
+     !strconcat(instr_asm, "\t$ra, $rb, $rc"), [], IIAlu> {
+  let shamt = 0;
+  let Constraints = "$F = $ra";
+}
+
+// select patterns
+multiclass MovzPats0Slt<RegisterClass CRC, RegisterClass DRC,
+                     Instruction MOVZInst, Instruction SLTOp,
+                     Instruction SLTuOp, Instruction SLTiOp,
+                     Instruction SLTiuOp> {
+  def : Pat<(select (i32 (setge CRC:$lhs, CRC:$rhs)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, (SLTOp CRC:$lhs, CRC:$rhs), DRC:$F)>;
+  def : Pat<(select (i32 (setuge CRC:$lhs, CRC:$rhs)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, (SLTuOp CRC:$lhs, CRC:$rhs), DRC:$F)>;
+  def : Pat<(select (i32 (setge CRC:$lhs, immSExt16:$rhs)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, (SLTiOp CRC:$lhs, immSExt16:$rhs), DRC:$F)>;
+  def : Pat<(select (i32 (setuge CRC:$lh, immSExt16:$rh)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, (SLTiuOp CRC:$lh, immSExt16:$rh), DRC:$F)>;
+  def : Pat<(select (i32 (setle CRC:$lhs, CRC:$rhs)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, (SLTOp CRC:$rhs, CRC:$lhs), DRC:$F)>;
+  def : Pat<(select (i32 (setule CRC:$lhs, CRC:$rhs)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, (SLTuOp CRC:$rhs, CRC:$lhs), DRC:$F)>;
+}
+
+multiclass MovzPats1<RegisterClass CRC, RegisterClass DRC,
+                     Instruction MOVZInst, Instruction XOROp> {
+  def : Pat<(select (i32 (seteq CRC:$lhs, CRC:$rhs)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, (XOROp CRC:$lhs, CRC:$rhs), DRC:$F)>;
+  def : Pat<(select (i32 (seteq CRC:$lhs, 0)), DRC:$T, DRC:$F),
+            (MOVZInst DRC:$T, CRC:$lhs, DRC:$F)>;
+}
+
+multiclass MovnPats<RegisterClass CRC, RegisterClass DRC, Instruction MOVNInst,
+                    Instruction XOROp> {
+  def : Pat<(select (i32 (setne CRC:$lhs, CRC:$rhs)), DRC:$T, DRC:$F),
+            (MOVNInst DRC:$T, (XOROp CRC:$lhs, CRC:$rhs), DRC:$F)>;
+  def : Pat<(select CRC:$cond, DRC:$T, DRC:$F),
+            (MOVNInst DRC:$T, CRC:$cond, DRC:$F)>;
+  def : Pat<(select (i32 (setne CRC:$lhs, 0)),DRC:$T, DRC:$F),
+            (MOVNInst DRC:$T, CRC:$lhs, DRC:$F)>;
+}
+
+// Instantiation of instructions.
+def MOVZ_I_I     : CondMovIntInt<CPURegs, CPURegs, 0x0a, "movz">;
+
+def MOVN_I_I     : CondMovIntInt<CPURegs, CPURegs, 0x0b, "movn">;
+
+// Instantiation of conditional move patterns.
+let Predicates = [HasSlt] in {
+defm : MovzPats0Slt<CPURegs, CPURegs, MOVZ_I_I, SLT, SLTu, SLTi, SLTiu>;
+}
+
+defm : MovzPats1<CPURegs, CPURegs, MOVZ_I_I, XOR>;
+
+defm : MovnPats<CPURegs, CPURegs, MOVN_I_I, XOR>;
+
diff -Naur Chapter8_1/Cpu0DelUselessJMP.cpp Chapter8_2/Cpu0DelUselessJMP.cpp
--- Chapter8_1/Cpu0DelUselessJMP.cpp	1970-01-01 08:00:00.000000000 +0800
+++ Chapter8_2/Cpu0DelUselessJMP.cpp	2014-03-04 00:38:33.000000000 +0800
@@ -0,0 +1,99 @@
+//===-- Cpu0DelUselessJMP.cpp - Cpu0 DelJmp -------------------------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// Simple pass to fills delay slots with useful instructions.
+//
+//===----------------------------------------------------------------------===//
+
+#define DEBUG_TYPE "del-jmp"
+
+#include "Cpu0.h"
+#include "Cpu0TargetMachine.h"
+#include "llvm/CodeGen/MachineFunctionPass.h"
+#include "llvm/Support/CommandLine.h"
+#include "llvm/Target/TargetMachine.h"
+#include "llvm/Target/TargetInstrInfo.h"
+#include "llvm/ADT/SmallSet.h"
+#include "llvm/ADT/Statistic.h"
+
+using namespace llvm;
+
+STATISTIC(NumDelJmp, "Number of useless jmp deleted");
+
+static cl::opt<bool> EnableDelJmp(
+  "enable-cpu0-del-useless-jmp",
+  cl::init(true),
+  cl::desc("Delete useless jmp instructions: jmp 0."),
+  cl::Hidden);
+
+namespace {
+  struct DelJmp : public MachineFunctionPass {
+
+    TargetMachine &TM;
+    const TargetInstrInfo *TII;
+
+    static char ID;
+    DelJmp(TargetMachine &tm)
+      : MachineFunctionPass(ID), TM(tm), TII(tm.getInstrInfo()) { }
+
+    virtual const char *getPassName() const {
+      return "Cpu0 Del Useless jmp";
+    }
+
+    bool runOnMachineBasicBlock(MachineBasicBlock &MBB, MachineBasicBlock &MBBN);
+    bool runOnMachineFunction(MachineFunction &F) {
+      bool Changed = false;
+      if (EnableDelJmp) {
+        MachineFunction::iterator FJ = F.begin();
+        if (FJ != F.end())
+          FJ++;
+        if (FJ == F.end())
+          return Changed;
+        for (MachineFunction::iterator FI = F.begin(), FE = F.end();
+             FJ != FE; ++FI, ++FJ)
+          // In STL style, F.end() is the dummy BasicBlock() like '\0' in 
+          //  C string. 
+          // FJ is the next BasicBlock of FI; When FI range from F.begin() to 
+          //  the PreviousBasicBlock of F.end() call runOnMachineBasicBlock().
+          Changed |= runOnMachineBasicBlock(*FI, *FJ);
+      }
+      return Changed;
+    }
+
+  };
+  char DelJmp::ID = 0;
+} // end of anonymous namespace
+
+bool DelJmp::
+runOnMachineBasicBlock(MachineBasicBlock &MBB, MachineBasicBlock &MBBN) {
+  bool Changed = false;
+
+  MachineBasicBlock::iterator I = MBB.end();
+  if (I != MBB.begin())
+    I--;	// set I to the last instruction
+  else
+    return Changed;
+    
+  if (I->getOpcode() == Cpu0::JMP && I->getOperand(0).getMBB() == &MBBN) {
+    // I is the instruction of "jmp #offset=0", as follows,
+    //     jmp	$BB0_3
+    // $BB0_3:
+    //     ld	$4, 28($sp)
+    ++NumDelJmp;
+    MBB.erase(I);	// delete the "JMP 0" instruction
+    Changed = true;	// Notify LLVM kernel Changed
+  }
+  return Changed;
+
+}
+
+/// createCpu0DelJmpPass - Returns a pass that DelJmp in Cpu0 MachineFunctions
+FunctionPass *llvm::createCpu0DelJmpPass(Cpu0TargetMachine &tm) {
+  return new DelJmp(tm);
+}
diff -Naur Chapter8_1/Cpu0ISelLowering.cpp Chapter8_2/Cpu0ISelLowering.cpp
--- Chapter8_1/Cpu0ISelLowering.cpp	2014-03-04 00:38:33.000000000 +0800
+++ Chapter8_2/Cpu0ISelLowering.cpp	2014-03-04 00:38:33.000000000 +0800
@@ -141,6 +141,7 @@
 
   // Cpu0 Custom Operations
   setOperationAction(ISD::GlobalAddress,      MVT::i32,   Custom);
+  setOperationAction(ISD::SELECT,             MVT::i32,   Custom);
   setOperationAction(ISD::BRCOND,             MVT::Other, Custom);
 
   // Cpu0 doesn't have sext_inreg, replace them with shl/sra.
@@ -153,6 +154,7 @@
 
   // Operations not directly supported by Cpu0.
   setOperationAction(ISD::BR_CC,             MVT::i32, Expand);
+  setOperationAction(ISD::SELECT_CC,         MVT::Other, Expand);
 
   setTargetDAGCombine(ISD::SDIVREM);
   setTargetDAGCombine(ISD::UDIVREM);
@@ -226,6 +228,7 @@
   {
     case ISD::BRCOND:             return LowerBRCOND(Op, DAG);
     case ISD::GlobalAddress:      return LowerGlobalAddress(Op, DAG);
+    case ISD::SELECT:             return lowerSELECT(Op, DAG);
   }
   return SDValue();
 }
@@ -243,6 +246,12 @@
   return Op;
 }
 
+SDValue Cpu0TargetLowering::
+lowerSELECT(SDValue Op, SelectionDAG &DAG) const
+{
+  return Op;
+} // lbd document - mark - lowerSELECT
+
 SDValue Cpu0TargetLowering::LowerGlobalAddress(SDValue Op,
                                                SelectionDAG &DAG) const {
   // FIXME there isn't actually debug info here
diff -Naur Chapter8_1/Cpu0ISelLowering.h Chapter8_2/Cpu0ISelLowering.h
--- Chapter8_1/Cpu0ISelLowering.h	2014-03-04 00:38:33.000000000 +0800
+++ Chapter8_2/Cpu0ISelLowering.h	2014-03-04 00:38:33.000000000 +0800
@@ -88,6 +88,7 @@
 
     // Lower Operand specifics
     SDValue LowerBRCOND(SDValue Op, SelectionDAG &DAG) const;
+    SDValue lowerSELECT(SDValue Op, SelectionDAG &DAG) const;
     SDValue LowerGlobalAddress(SDValue Op, SelectionDAG &DAG) const;
 
 	//- must be exist without function all
diff -Naur Chapter8_1/Cpu0InstrInfo.td Chapter8_2/Cpu0InstrInfo.td
--- Chapter8_1/Cpu0InstrInfo.td	2014-03-04 00:38:33.000000000 +0800
+++ Chapter8_2/Cpu0InstrInfo.td	2014-03-04 00:38:33.000000000 +0800
@@ -740,3 +740,5 @@
 defm : SetgePatsSlt<CPURegs, SLT, SLTu>;
 defm : SetgeImmPatsSlt<CPURegs, SLTi, SLTiu>;
 }
+
+include "Cpu0CondMov.td"
diff -Naur Chapter8_1/Cpu0TargetMachine.cpp Chapter8_2/Cpu0TargetMachine.cpp
--- Chapter8_1/Cpu0TargetMachine.cpp	2014-03-04 00:38:33.000000000 +0800
+++ Chapter8_2/Cpu0TargetMachine.cpp	2014-03-04 00:38:33.000000000 +0800
@@ -83,6 +83,7 @@
     return *getCpu0TargetMachine().getSubtargetImpl();
   } // lbd document - mark - getCpu0Subtarget()
   virtual bool addInstSelector();
+  virtual bool addPreEmitPass();
 };
 } // namespace
 
@@ -97,3 +98,11 @@
   return false;
 } // lbd document - mark - addInstSelector()
 
+// Implemented by targets that want to run passes immediately before
+// machine code is emitted. return true if -print-machineinstrs should
+// print out the code after the passes.
+bool Cpu0PassConfig::addPreEmitPass() {
+  Cpu0TargetMachine &TM = getCpu0TargetMachine();
+  addPass(createCpu0DelJmpPass(TM));
+  return true;
+}
